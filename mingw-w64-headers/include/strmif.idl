/**
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is part of the w64 mingw-runtime package.
 * No warranty is given; refer to the file DISCLAIMER.PD within this package.
 */

import "unknwn.idl";
import "objidl.idl";

#include "devenum.idl"
#include "axcore.idl"

cpp_quote("#ifndef __IReferenceClock2_FWD_DEFINED__")
cpp_quote("#define __IReferenceClock2_FWD_DEFINED__")
cpp_quote("typedef struct IReferenceClock2 IReferenceClock2;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IEnumRegFilters_FWD_DEFINED__")
cpp_quote("#define __IEnumRegFilters_FWD_DEFINED__")
cpp_quote("typedef struct IEnumRegFilters IEnumRegFilters;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IFilterMapper_FWD_DEFINED__")
cpp_quote("#define __IFilterMapper_FWD_DEFINED__")
cpp_quote("typedef struct IFilterMapper IFilterMapper;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IFilterMapper2_FWD_DEFINED__")
cpp_quote("#define __IFilterMapper2_FWD_DEFINED__")
cpp_quote("typedef struct IFilterMapper2 IFilterMapper2;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IFilterMapper3_FWD_DEFINED__")
cpp_quote("#define __IFilterMapper3_FWD_DEFINED__")
cpp_quote("typedef struct IFilterMapper3 IFilterMapper3;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IQualityControl_FWD_DEFINED__")
cpp_quote("#define __IQualityControl_FWD_DEFINED__")
cpp_quote("typedef struct IQualityControl IQualityControl;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IOverlayNotify_FWD_DEFINED__")
cpp_quote("#define __IOverlayNotify_FWD_DEFINED__")
cpp_quote("typedef struct IOverlayNotify IOverlayNotify;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IOverlayNotify2_FWD_DEFINED__")
cpp_quote("#define __IOverlayNotify2_FWD_DEFINED__")
cpp_quote("typedef struct IOverlayNotify2 IOverlayNotify2;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IOverlay_FWD_DEFINED__")
cpp_quote("#define __IOverlay_FWD_DEFINED__")
cpp_quote("typedef struct IOverlay IOverlay;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IMediaEventSink_FWD_DEFINED__")
cpp_quote("#define __IMediaEventSink_FWD_DEFINED__")
cpp_quote("typedef struct IMediaEventSink IMediaEventSink;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IFileSourceFilter_FWD_DEFINED__")
cpp_quote("#define __IFileSourceFilter_FWD_DEFINED__")
cpp_quote("typedef struct IFileSourceFilter IFileSourceFilter;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IFileSinkFilter_FWD_DEFINED__")
cpp_quote("#define __IFileSinkFilter_FWD_DEFINED__")
cpp_quote("typedef struct IFileSinkFilter IFileSinkFilter;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IFileSinkFilter2_FWD_DEFINED__")
cpp_quote("#define __IFileSinkFilter2_FWD_DEFINED__")
cpp_quote("typedef struct IFileSinkFilter2 IFileSinkFilter2;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IGraphBuilder_FWD_DEFINED__")
cpp_quote("#define __IGraphBuilder_FWD_DEFINED__")
cpp_quote("typedef struct IGraphBuilder IGraphBuilder;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __ICaptureGraphBuilder_FWD_DEFINED__")
cpp_quote("#define __ICaptureGraphBuilder_FWD_DEFINED__")
cpp_quote("typedef struct ICaptureGraphBuilder ICaptureGraphBuilder;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMCopyCaptureFileProgress_FWD_DEFINED__")
cpp_quote("#define __IAMCopyCaptureFileProgress_FWD_DEFINED__")
cpp_quote("typedef struct IAMCopyCaptureFileProgress IAMCopyCaptureFileProgress;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __ICaptureGraphBuilder2_FWD_DEFINED__")
cpp_quote("#define __ICaptureGraphBuilder2_FWD_DEFINED__")
cpp_quote("typedef struct ICaptureGraphBuilder2 ICaptureGraphBuilder2;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IFilterGraph2_FWD_DEFINED__")
cpp_quote("#define __IFilterGraph2_FWD_DEFINED__")
cpp_quote("typedef struct IFilterGraph2 IFilterGraph2;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IStreamBuilder_FWD_DEFINED__")
cpp_quote("#define __IStreamBuilder_FWD_DEFINED__")
cpp_quote("typedef struct IStreamBuilder IStreamBuilder;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAsyncReader_FWD_DEFINED__")
cpp_quote("#define __IAsyncReader_FWD_DEFINED__")
cpp_quote("typedef struct IAsyncReader IAsyncReader;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IGraphVersion_FWD_DEFINED__")
cpp_quote("#define __IGraphVersion_FWD_DEFINED__")
cpp_quote("typedef struct IGraphVersion IGraphVersion;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IResourceConsumer_FWD_DEFINED__")
cpp_quote("#define __IResourceConsumer_FWD_DEFINED__")
cpp_quote("typedef struct IResourceConsumer IResourceConsumer;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IResourceManager_FWD_DEFINED__")
cpp_quote("#define __IResourceManager_FWD_DEFINED__")
cpp_quote("typedef struct IResourceManager IResourceManager;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IDistributorNotify_FWD_DEFINED__")
cpp_quote("#define __IDistributorNotify_FWD_DEFINED__")
cpp_quote("typedef struct IDistributorNotify IDistributorNotify;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMStreamControl_FWD_DEFINED__")
cpp_quote("#define __IAMStreamControl_FWD_DEFINED__")
cpp_quote("typedef struct IAMStreamControl IAMStreamControl;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __ISeekingPassThru_FWD_DEFINED__")
cpp_quote("#define __ISeekingPassThru_FWD_DEFINED__")
cpp_quote("typedef struct ISeekingPassThru ISeekingPassThru;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMStreamConfig_FWD_DEFINED__")
cpp_quote("#define __IAMStreamConfig_FWD_DEFINED__")
cpp_quote("typedef struct IAMStreamConfig IAMStreamConfig;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IConfigInterleaving_FWD_DEFINED__")
cpp_quote("#define __IConfigInterleaving_FWD_DEFINED__")
cpp_quote("typedef struct IConfigInterleaving IConfigInterleaving;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IConfigAviMux_FWD_DEFINED__")
cpp_quote("#define __IConfigAviMux_FWD_DEFINED__")
cpp_quote("typedef struct IConfigAviMux IConfigAviMux;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMVideoCompression_FWD_DEFINED__")
cpp_quote("#define __IAMVideoCompression_FWD_DEFINED__")
cpp_quote("typedef struct IAMVideoCompression IAMVideoCompression;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMVfwCaptureDialogs_FWD_DEFINED__")
cpp_quote("#define __IAMVfwCaptureDialogs_FWD_DEFINED__")
cpp_quote("typedef struct IAMVfwCaptureDialogs IAMVfwCaptureDialogs;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMVfwCompressDialogs_FWD_DEFINED__")
cpp_quote("#define __IAMVfwCompressDialogs_FWD_DEFINED__")
cpp_quote("typedef struct IAMVfwCompressDialogs IAMVfwCompressDialogs;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMDroppedFrames_FWD_DEFINED__")
cpp_quote("#define __IAMDroppedFrames_FWD_DEFINED__")
cpp_quote("typedef struct IAMDroppedFrames IAMDroppedFrames;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMAudioInputMixer_FWD_DEFINED__")
cpp_quote("#define __IAMAudioInputMixer_FWD_DEFINED__")
cpp_quote("typedef struct IAMAudioInputMixer IAMAudioInputMixer;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMBufferNegotiation_FWD_DEFINED__")
cpp_quote("#define __IAMBufferNegotiation_FWD_DEFINED__")
cpp_quote("typedef struct IAMBufferNegotiation IAMBufferNegotiation;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMAnalogVideoDecoder_FWD_DEFINED__")
cpp_quote("#define __IAMAnalogVideoDecoder_FWD_DEFINED__")
cpp_quote("typedef struct IAMAnalogVideoDecoder IAMAnalogVideoDecoder;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMVideoProcAmp_FWD_DEFINED__")
cpp_quote("#define __IAMVideoProcAmp_FWD_DEFINED__")
cpp_quote("typedef struct IAMVideoProcAmp IAMVideoProcAmp;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMCameraControl_FWD_DEFINED__")
cpp_quote("#define __IAMCameraControl_FWD_DEFINED__")
cpp_quote("typedef struct IAMCameraControl IAMCameraControl;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMVideoControl_FWD_DEFINED__")
cpp_quote("#define __IAMVideoControl_FWD_DEFINED__")
cpp_quote("typedef struct IAMVideoControl IAMVideoControl;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMCrossbar_FWD_DEFINED__")
cpp_quote("#define __IAMCrossbar_FWD_DEFINED__")
cpp_quote("typedef struct IAMCrossbar IAMCrossbar;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMTuner_FWD_DEFINED__")
cpp_quote("#define __IAMTuner_FWD_DEFINED__")
cpp_quote("typedef struct IAMTuner IAMTuner;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMTunerNotification_FWD_DEFINED__")
cpp_quote("#define __IAMTunerNotification_FWD_DEFINED__")
cpp_quote("typedef struct IAMTunerNotification IAMTunerNotification;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMTVTuner_FWD_DEFINED__")
cpp_quote("#define __IAMTVTuner_FWD_DEFINED__")
cpp_quote("typedef struct IAMTVTuner IAMTVTuner;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IBPCSatelliteTuner_FWD_DEFINED__")
cpp_quote("#define __IBPCSatelliteTuner_FWD_DEFINED__")
cpp_quote("typedef struct IBPCSatelliteTuner IBPCSatelliteTuner;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMTVAudio_FWD_DEFINED__")
cpp_quote("#define __IAMTVAudio_FWD_DEFINED__")
cpp_quote("typedef struct IAMTVAudio IAMTVAudio;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMTVAudioNotification_FWD_DEFINED__")
cpp_quote("#define __IAMTVAudioNotification_FWD_DEFINED__")
cpp_quote("typedef struct IAMTVAudioNotification IAMTVAudioNotification;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMAnalogVideoEncoder_FWD_DEFINED__")
cpp_quote("#define __IAMAnalogVideoEncoder_FWD_DEFINED__")
cpp_quote("typedef struct IAMAnalogVideoEncoder IAMAnalogVideoEncoder;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IKsPropertySet_FWD_DEFINED__")
cpp_quote("#define __IKsPropertySet_FWD_DEFINED__")
cpp_quote("typedef struct IKsPropertySet IKsPropertySet;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IMediaPropertyBag_FWD_DEFINED__")
cpp_quote("#define __IMediaPropertyBag_FWD_DEFINED__")
cpp_quote("typedef struct IMediaPropertyBag IMediaPropertyBag;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IPersistMediaPropertyBag_FWD_DEFINED__")
cpp_quote("#define __IPersistMediaPropertyBag_FWD_DEFINED__")
cpp_quote("typedef struct IPersistMediaPropertyBag IPersistMediaPropertyBag;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMPhysicalPinInfo_FWD_DEFINED__")
cpp_quote("#define __IAMPhysicalPinInfo_FWD_DEFINED__")
cpp_quote("typedef struct IAMPhysicalPinInfo IAMPhysicalPinInfo;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMExtDevice_FWD_DEFINED__")
cpp_quote("#define __IAMExtDevice_FWD_DEFINED__")
cpp_quote("typedef struct IAMExtDevice IAMExtDevice;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMExtTransport_FWD_DEFINED__")
cpp_quote("#define __IAMExtTransport_FWD_DEFINED__")
cpp_quote("typedef struct IAMExtTransport IAMExtTransport;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMTimecodeReader_FWD_DEFINED__")
cpp_quote("#define __IAMTimecodeReader_FWD_DEFINED__")
cpp_quote("typedef struct IAMTimecodeReader IAMTimecodeReader;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMTimecodeGenerator_FWD_DEFINED__")
cpp_quote("#define __IAMTimecodeGenerator_FWD_DEFINED__")
cpp_quote("typedef struct IAMTimecodeGenerator IAMTimecodeGenerator;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMTimecodeDisplay_FWD_DEFINED__")
cpp_quote("#define __IAMTimecodeDisplay_FWD_DEFINED__")
cpp_quote("typedef struct IAMTimecodeDisplay IAMTimecodeDisplay;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMDevMemoryAllocator_FWD_DEFINED__")
cpp_quote("#define __IAMDevMemoryAllocator_FWD_DEFINED__")
cpp_quote("typedef struct IAMDevMemoryAllocator IAMDevMemoryAllocator;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMDevMemoryControl_FWD_DEFINED__")
cpp_quote("#define __IAMDevMemoryControl_FWD_DEFINED__")
cpp_quote("typedef struct IAMDevMemoryControl IAMDevMemoryControl;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMStreamSelect_FWD_DEFINED__")
cpp_quote("#define __IAMStreamSelect_FWD_DEFINED__")
cpp_quote("typedef struct IAMStreamSelect IAMStreamSelect;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMResourceControl_FWD_DEFINED__")
cpp_quote("#define __IAMResourceControl_FWD_DEFINED__")
cpp_quote("typedef struct IAMResourceControl IAMResourceControl;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMClockAdjust_FWD_DEFINED__")
cpp_quote("#define __IAMClockAdjust_FWD_DEFINED__")
cpp_quote("typedef struct IAMClockAdjust IAMClockAdjust;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMFilterMiscFlags_FWD_DEFINED__")
cpp_quote("#define __IAMFilterMiscFlags_FWD_DEFINED__")
cpp_quote("typedef struct IAMFilterMiscFlags IAMFilterMiscFlags;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IDrawVideoImage_FWD_DEFINED__")
cpp_quote("#define __IDrawVideoImage_FWD_DEFINED__")
cpp_quote("typedef struct IDrawVideoImage IDrawVideoImage;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IDecimateVideoImage_FWD_DEFINED__")
cpp_quote("#define __IDecimateVideoImage_FWD_DEFINED__")
cpp_quote("typedef struct IDecimateVideoImage IDecimateVideoImage;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMVideoDecimationProperties_FWD_DEFINED__")
cpp_quote("#define __IAMVideoDecimationProperties_FWD_DEFINED__")
cpp_quote("typedef struct IAMVideoDecimationProperties IAMVideoDecimationProperties;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IVideoFrameStep_FWD_DEFINED__")
cpp_quote("#define __IVideoFrameStep_FWD_DEFINED__")
cpp_quote("typedef struct IVideoFrameStep IVideoFrameStep;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMLatency_FWD_DEFINED__")
cpp_quote("#define __IAMLatency_FWD_DEFINED__")
cpp_quote("typedef struct IAMLatency IAMLatency;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMPushSource_FWD_DEFINED__")
cpp_quote("#define __IAMPushSource_FWD_DEFINED__")
cpp_quote("typedef struct IAMPushSource IAMPushSource;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMDeviceRemoval_FWD_DEFINED__")
cpp_quote("#define __IAMDeviceRemoval_FWD_DEFINED__")
cpp_quote("typedef struct IAMDeviceRemoval IAMDeviceRemoval;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IDVEnc_FWD_DEFINED__")
cpp_quote("#define __IDVEnc_FWD_DEFINED__")
cpp_quote("typedef struct IDVEnc IDVEnc;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IIPDVDec_FWD_DEFINED__")
cpp_quote("#define __IIPDVDec_FWD_DEFINED__")
cpp_quote("typedef struct IIPDVDec IIPDVDec;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IDVRGB219_FWD_DEFINED__")
cpp_quote("#define __IDVRGB219_FWD_DEFINED__")
cpp_quote("typedef struct IDVRGB219 IDVRGB219;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IDVSplitter_FWD_DEFINED__")
cpp_quote("#define __IDVSplitter_FWD_DEFINED__")
cpp_quote("typedef struct IDVSplitter IDVSplitter;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMAudioRendererStats_FWD_DEFINED__")
cpp_quote("#define __IAMAudioRendererStats_FWD_DEFINED__")
cpp_quote("typedef struct IAMAudioRendererStats IAMAudioRendererStats;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMGraphStreams_FWD_DEFINED__")
cpp_quote("#define __IAMGraphStreams_FWD_DEFINED__")
cpp_quote("typedef struct IAMGraphStreams IAMGraphStreams;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMOverlayFX_FWD_DEFINED__")
cpp_quote("#define __IAMOverlayFX_FWD_DEFINED__")
cpp_quote("typedef struct IAMOverlayFX IAMOverlayFX;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMOpenProgress_FWD_DEFINED__")
cpp_quote("#define __IAMOpenProgress_FWD_DEFINED__")
cpp_quote("typedef struct IAMOpenProgress IAMOpenProgress;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IMpeg2Demultiplexer_FWD_DEFINED__")
cpp_quote("#define __IMpeg2Demultiplexer_FWD_DEFINED__")
cpp_quote("typedef struct IMpeg2Demultiplexer IMpeg2Demultiplexer;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IEnumStreamIdMap_FWD_DEFINED__")
cpp_quote("#define __IEnumStreamIdMap_FWD_DEFINED__")
cpp_quote("typedef struct IEnumStreamIdMap IEnumStreamIdMap;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IMPEG2StreamIdMap_FWD_DEFINED__")
cpp_quote("#define __IMPEG2StreamIdMap_FWD_DEFINED__")
cpp_quote("typedef struct IMPEG2StreamIdMap IMPEG2StreamIdMap;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IRegisterServiceProvider_FWD_DEFINED__")
cpp_quote("#define __IRegisterServiceProvider_FWD_DEFINED__")
cpp_quote("typedef struct IRegisterServiceProvider IRegisterServiceProvider;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMClockSlave_FWD_DEFINED__")
cpp_quote("#define __IAMClockSlave_FWD_DEFINED__")
cpp_quote("typedef struct IAMClockSlave IAMClockSlave;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMGraphBuilderCallback_FWD_DEFINED__")
cpp_quote("#define __IAMGraphBuilderCallback_FWD_DEFINED__")
cpp_quote("typedef struct IAMGraphBuilderCallback IAMGraphBuilderCallback;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __ICodecAPI_FWD_DEFINED__")
cpp_quote("#define __ICodecAPI_FWD_DEFINED__")
cpp_quote("typedef struct ICodecAPI ICodecAPI;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IGetCapabilitiesKey_FWD_DEFINED__")
cpp_quote("#define __IGetCapabilitiesKey_FWD_DEFINED__")
cpp_quote("typedef struct IGetCapabilitiesKey IGetCapabilitiesKey;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IEncoderAPI_FWD_DEFINED__")
cpp_quote("#define __IEncoderAPI_FWD_DEFINED__")
cpp_quote("typedef struct IEncoderAPI IEncoderAPI;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IVideoEncoder_FWD_DEFINED__")
cpp_quote("#define __IVideoEncoder_FWD_DEFINED__")
cpp_quote("typedef struct IVideoEncoder IVideoEncoder;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMDecoderCaps_FWD_DEFINED__")
cpp_quote("#define __IAMDecoderCaps_FWD_DEFINED__")
cpp_quote("typedef struct IAMDecoderCaps IAMDecoderCaps;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMCertifiedOutputProtection_FWD_DEFINED__")
cpp_quote("#define __IAMCertifiedOutputProtection_FWD_DEFINED__")
cpp_quote("typedef struct IAMCertifiedOutputProtection IAMCertifiedOutputProtection;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IDvdControl_FWD_DEFINED__")
cpp_quote("#define __IDvdControl_FWD_DEFINED__")
cpp_quote("typedef struct IDvdControl IDvdControl;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IDvdInfo_FWD_DEFINED__")
cpp_quote("#define __IDvdInfo_FWD_DEFINED__")
cpp_quote("typedef struct IDvdInfo IDvdInfo;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IDvdCmd_FWD_DEFINED__")
cpp_quote("#define __IDvdCmd_FWD_DEFINED__")
cpp_quote("typedef struct IDvdCmd IDvdCmd;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IDvdState_FWD_DEFINED__")
cpp_quote("#define __IDvdState_FWD_DEFINED__")
cpp_quote("typedef struct IDvdState IDvdState;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IDvdControl2_FWD_DEFINED__")
cpp_quote("#define __IDvdControl2_FWD_DEFINED__")
cpp_quote("typedef struct IDvdControl2 IDvdControl2;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IDvdInfo2_FWD_DEFINED__")
cpp_quote("#define __IDvdInfo2_FWD_DEFINED__")
cpp_quote("typedef struct IDvdInfo2 IDvdInfo2;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IDvdGraphBuilder_FWD_DEFINED__")
cpp_quote("#define __IDvdGraphBuilder_FWD_DEFINED__")
cpp_quote("typedef struct IDvdGraphBuilder IDvdGraphBuilder;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IDDrawExclModeVideo_FWD_DEFINED__")
cpp_quote("#define __IDDrawExclModeVideo_FWD_DEFINED__")
cpp_quote("typedef struct IDDrawExclModeVideo IDDrawExclModeVideo;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IDDrawExclModeVideoCallback_FWD_DEFINED__")
cpp_quote("#define __IDDrawExclModeVideoCallback_FWD_DEFINED__")
cpp_quote("typedef struct IDDrawExclModeVideoCallback IDDrawExclModeVideoCallback;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IPinConnection_FWD_DEFINED__")
cpp_quote("#define __IPinConnection_FWD_DEFINED__")
cpp_quote("typedef struct IPinConnection IPinConnection;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IPinFlowControl_FWD_DEFINED__")
cpp_quote("#define __IPinFlowControl_FWD_DEFINED__")
cpp_quote("typedef struct IPinFlowControl IPinFlowControl;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IGraphConfig_FWD_DEFINED__")
cpp_quote("#define __IGraphConfig_FWD_DEFINED__")
cpp_quote("typedef struct IGraphConfig IGraphConfig;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IGraphConfigCallback_FWD_DEFINED__")
cpp_quote("#define __IGraphConfigCallback_FWD_DEFINED__")
cpp_quote("typedef struct IGraphConfigCallback IGraphConfigCallback;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IFilterChain_FWD_DEFINED__")
cpp_quote("#define __IFilterChain_FWD_DEFINED__")
cpp_quote("typedef struct IFilterChain IFilterChain;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IVMRImagePresenter_FWD_DEFINED__")
cpp_quote("#define __IVMRImagePresenter_FWD_DEFINED__")
cpp_quote("typedef struct IVMRImagePresenter IVMRImagePresenter;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IVMRSurfaceAllocator_FWD_DEFINED__")
cpp_quote("#define __IVMRSurfaceAllocator_FWD_DEFINED__")
cpp_quote("typedef struct IVMRSurfaceAllocator IVMRSurfaceAllocator;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IVMRSurfaceAllocatorNotify_FWD_DEFINED__")
cpp_quote("#define __IVMRSurfaceAllocatorNotify_FWD_DEFINED__")
cpp_quote("typedef struct IVMRSurfaceAllocatorNotify IVMRSurfaceAllocatorNotify;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IVMRWindowlessControl_FWD_DEFINED__")
cpp_quote("#define __IVMRWindowlessControl_FWD_DEFINED__")
cpp_quote("typedef struct IVMRWindowlessControl IVMRWindowlessControl;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IVMRMixerControl_FWD_DEFINED__")
cpp_quote("#define __IVMRMixerControl_FWD_DEFINED__")
cpp_quote("typedef struct IVMRMixerControl IVMRMixerControl;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IVMRMonitorConfig_FWD_DEFINED__")
cpp_quote("#define __IVMRMonitorConfig_FWD_DEFINED__")
cpp_quote("typedef struct IVMRMonitorConfig IVMRMonitorConfig;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IVMRFilterConfig_FWD_DEFINED__")
cpp_quote("#define __IVMRFilterConfig_FWD_DEFINED__")
cpp_quote("typedef struct IVMRFilterConfig IVMRFilterConfig;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IVMRAspectRatioControl_FWD_DEFINED__")
cpp_quote("#define __IVMRAspectRatioControl_FWD_DEFINED__")
cpp_quote("typedef struct IVMRAspectRatioControl IVMRAspectRatioControl;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IVMRDeinterlaceControl_FWD_DEFINED__")
cpp_quote("#define __IVMRDeinterlaceControl_FWD_DEFINED__")
cpp_quote("typedef struct IVMRDeinterlaceControl IVMRDeinterlaceControl;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IVMRMixerBitmap_FWD_DEFINED__")
cpp_quote("#define __IVMRMixerBitmap_FWD_DEFINED__")
cpp_quote("typedef struct IVMRMixerBitmap IVMRMixerBitmap;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IVMRImageCompositor_FWD_DEFINED__")
cpp_quote("#define __IVMRImageCompositor_FWD_DEFINED__")
cpp_quote("typedef struct IVMRImageCompositor IVMRImageCompositor;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IVMRVideoStreamControl_FWD_DEFINED__")
cpp_quote("#define __IVMRVideoStreamControl_FWD_DEFINED__")
cpp_quote("typedef struct IVMRVideoStreamControl IVMRVideoStreamControl;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IVMRSurface_FWD_DEFINED__")
cpp_quote("#define __IVMRSurface_FWD_DEFINED__")
cpp_quote("typedef struct IVMRSurface IVMRSurface;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IVMRImagePresenterConfig_FWD_DEFINED__")
cpp_quote("#define __IVMRImagePresenterConfig_FWD_DEFINED__")
cpp_quote("typedef struct IVMRImagePresenterConfig IVMRImagePresenterConfig;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IVMRImagePresenterExclModeConfig_FWD_DEFINED__")
cpp_quote("#define __IVMRImagePresenterExclModeConfig_FWD_DEFINED__")
cpp_quote("typedef struct IVMRImagePresenterExclModeConfig IVMRImagePresenterExclModeConfig;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IVPManager_FWD_DEFINED__")
cpp_quote("#define __IVPManager_FWD_DEFINED__")
cpp_quote("typedef struct IVPManager IVPManager;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMAsyncReaderTimestampScaling_FWD_DEFINED__")
cpp_quote("#define __IAMAsyncReaderTimestampScaling_FWD_DEFINED__")
cpp_quote("typedef struct IAMAsyncReaderTimestampScaling IAMAsyncReaderTimestampScaling;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMPluginControl_FWD_DEFINED__")
cpp_quote("#define __IAMPluginControl_FWD_DEFINED__")
cpp_quote("typedef struct IAMPluginControl IAMPluginControl;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#include \"ocidl.h\"")
cpp_quote("")
cpp_quote("#ifndef __MIDL_user_allocate_free_DEFINED__")
cpp_quote("#define __MIDL_user_allocate_free_DEFINED__")
cpp_quote("  void *__RPC_API MIDL_user_allocate(size_t);")
cpp_quote("  void __RPC_API MIDL_user_free(void *);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0125_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0125_v0_0_s_ifspec;")
cpp_quote("#ifndef __IReferenceClock2_INTERFACE_DEFINED__")
cpp_quote("#define __IReferenceClock2_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IReferenceClock2;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IReferenceClock2 : public IReferenceClock {")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IReferenceClock2Vtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IReferenceClock2 *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IReferenceClock2 *This);")
cpp_quote("      ULONG (WINAPI *Release)(IReferenceClock2 *This);")
cpp_quote("      HRESULT (WINAPI *GetTime)(IReferenceClock2 *This,REFERENCE_TIME *pTime);")
cpp_quote("      HRESULT (WINAPI *AdviseTime)(IReferenceClock2 *This,REFERENCE_TIME baseTime,REFERENCE_TIME streamTime,HEVENT hEvent,DWORD_PTR *pdwAdviseCookie);")
cpp_quote("      HRESULT (WINAPI *AdvisePeriodic)(IReferenceClock2 *This,REFERENCE_TIME startTime,REFERENCE_TIME periodTime,HSEMAPHORE hSemaphore,DWORD_PTR *pdwAdviseCookie);")
cpp_quote("      HRESULT (WINAPI *Unadvise)(IReferenceClock2 *This,DWORD_PTR dwAdviseCookie);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IReferenceClock2Vtbl;")
cpp_quote("  struct IReferenceClock2 {")
cpp_quote("    CONST_VTBL struct IReferenceClock2Vtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IReferenceClock2_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IReferenceClock2_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IReferenceClock2_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IReferenceClock2_GetTime(This,pTime) (This)->lpVtbl->GetTime(This,pTime)")
cpp_quote("#define IReferenceClock2_AdviseTime(This,baseTime,streamTime,hEvent,pdwAdviseCookie) (This)->lpVtbl->AdviseTime(This,baseTime,streamTime,hEvent,pdwAdviseCookie)")
cpp_quote("#define IReferenceClock2_AdvisePeriodic(This,startTime,periodTime,hSemaphore,pdwAdviseCookie) (This)->lpVtbl->AdvisePeriodic(This,startTime,periodTime,hSemaphore,pdwAdviseCookie)")
cpp_quote("#define IReferenceClock2_Unadvise(This,dwAdviseCookie) (This)->lpVtbl->Unadvise(This,dwAdviseCookie)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  typedef IReferenceClock2 *PREFERENCECLOCK2;")
cpp_quote("")
cpp_quote("  typedef struct __MIDL___MIDL_itf_strmif_0134_0001 {")
cpp_quote("    CLSID Clsid;")
cpp_quote("    LPWSTR Name;")
cpp_quote("  } REGFILTER;")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0134_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0134_v0_0_s_ifspec;")
cpp_quote("#ifndef __IEnumRegFilters_INTERFACE_DEFINED__")
cpp_quote("#define __IEnumRegFilters_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IEnumRegFilters;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IEnumRegFilters : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI Next(ULONG cFilters,REGFILTER **apRegFilter,ULONG *pcFetched) = 0;")
cpp_quote("    virtual HRESULT WINAPI Skip(ULONG cFilters) = 0;")
cpp_quote("    virtual HRESULT WINAPI Reset(void) = 0;")
cpp_quote("    virtual HRESULT WINAPI Clone(IEnumRegFilters **ppEnum) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IEnumRegFiltersVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IEnumRegFilters *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IEnumRegFilters *This);")
cpp_quote("      ULONG (WINAPI *Release)(IEnumRegFilters *This);")
cpp_quote("      HRESULT (WINAPI *Next)(IEnumRegFilters *This,ULONG cFilters,REGFILTER **apRegFilter,ULONG *pcFetched);")
cpp_quote("      HRESULT (WINAPI *Skip)(IEnumRegFilters *This,ULONG cFilters);")
cpp_quote("      HRESULT (WINAPI *Reset)(IEnumRegFilters *This);")
cpp_quote("      HRESULT (WINAPI *Clone)(IEnumRegFilters *This,IEnumRegFilters **ppEnum);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IEnumRegFiltersVtbl;")
cpp_quote("  struct IEnumRegFilters {")
cpp_quote("    CONST_VTBL struct IEnumRegFiltersVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IEnumRegFilters_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IEnumRegFilters_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IEnumRegFilters_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IEnumRegFilters_Next(This,cFilters,apRegFilter,pcFetched) (This)->lpVtbl->Next(This,cFilters,apRegFilter,pcFetched)")
cpp_quote("#define IEnumRegFilters_Skip(This,cFilters) (This)->lpVtbl->Skip(This,cFilters)")
cpp_quote("#define IEnumRegFilters_Reset(This) (This)->lpVtbl->Reset(This)")
cpp_quote("#define IEnumRegFilters_Clone(This,ppEnum) (This)->lpVtbl->Clone(This,ppEnum)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IEnumRegFilters_Next_Proxy(IEnumRegFilters *This,ULONG cFilters,REGFILTER **apRegFilter,ULONG *pcFetched);")
cpp_quote("  void __RPC_STUB IEnumRegFilters_Next_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IEnumRegFilters_Skip_Proxy(IEnumRegFilters *This,ULONG cFilters);")
cpp_quote("  void __RPC_STUB IEnumRegFilters_Skip_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IEnumRegFilters_Reset_Proxy(IEnumRegFilters *This);")
cpp_quote("  void __RPC_STUB IEnumRegFilters_Reset_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IEnumRegFilters_Clone_Proxy(IEnumRegFilters *This,IEnumRegFilters **ppEnum);")
cpp_quote("  void __RPC_STUB IEnumRegFilters_Clone_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  typedef IEnumRegFilters *PENUMREGFILTERS;")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0136_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0136_v0_0_s_ifspec;")
cpp_quote("#ifndef __IFilterMapper_INTERFACE_DEFINED__")
cpp_quote("#define __IFilterMapper_INTERFACE_DEFINED__")
cpp_quote("  enum __MIDL_IFilterMapper_0001 {")
cpp_quote("    MERIT_PREFERRED = 0x800000,MERIT_NORMAL = 0x600000,MERIT_UNLIKELY = 0x400000,MERIT_DO_NOT_USE = 0x200000,MERIT_SW_COMPRESSOR = 0x100000,")
cpp_quote("    MERIT_HW_COMPRESSOR = 0x100050")
cpp_quote("  };")
cpp_quote("  EXTERN_C const IID IID_IFilterMapper;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IFilterMapper : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI RegisterFilter(CLSID clsid,LPCWSTR Name,DWORD dwMerit) = 0;")
cpp_quote("    virtual HRESULT WINAPI RegisterFilterInstance(CLSID clsid,LPCWSTR Name,CLSID *MRId) = 0;")
cpp_quote("    virtual HRESULT WINAPI RegisterPin(CLSID Filter,LPCWSTR Name,WINBOOL bRendered,WINBOOL bOutput,WINBOOL bZero,WINBOOL bMany,CLSID ConnectsToFilter,LPCWSTR ConnectsToPin) = 0;")
cpp_quote("    virtual HRESULT WINAPI RegisterPinType(CLSID clsFilter,LPCWSTR strName,CLSID clsMajorType,CLSID clsSubType) = 0;")
cpp_quote("    virtual HRESULT WINAPI UnregisterFilter(CLSID Filter) = 0;")
cpp_quote("    virtual HRESULT WINAPI UnregisterFilterInstance(CLSID MRId) = 0;")
cpp_quote("    virtual HRESULT WINAPI UnregisterPin(CLSID Filter,LPCWSTR Name) = 0;")
cpp_quote("    virtual HRESULT WINAPI EnumMatchingFilters(IEnumRegFilters **ppEnum,DWORD dwMerit,WINBOOL bInputNeeded,CLSID clsInMaj,CLSID clsInSub,WINBOOL bRender,WINBOOL bOututNeeded,CLSID clsOutMaj,CLSID clsOutSub) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IFilterMapperVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IFilterMapper *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IFilterMapper *This);")
cpp_quote("      ULONG (WINAPI *Release)(IFilterMapper *This);")
cpp_quote("      HRESULT (WINAPI *RegisterFilter)(IFilterMapper *This,CLSID clsid,LPCWSTR Name,DWORD dwMerit);")
cpp_quote("      HRESULT (WINAPI *RegisterFilterInstance)(IFilterMapper *This,CLSID clsid,LPCWSTR Name,CLSID *MRId);")
cpp_quote("      HRESULT (WINAPI *RegisterPin)(IFilterMapper *This,CLSID Filter,LPCWSTR Name,WINBOOL bRendered,WINBOOL bOutput,WINBOOL bZero,WINBOOL bMany,CLSID ConnectsToFilter,LPCWSTR ConnectsToPin);")
cpp_quote("      HRESULT (WINAPI *RegisterPinType)(IFilterMapper *This,CLSID clsFilter,LPCWSTR strName,CLSID clsMajorType,CLSID clsSubType);")
cpp_quote("      HRESULT (WINAPI *UnregisterFilter)(IFilterMapper *This,CLSID Filter);")
cpp_quote("      HRESULT (WINAPI *UnregisterFilterInstance)(IFilterMapper *This,CLSID MRId);")
cpp_quote("      HRESULT (WINAPI *UnregisterPin)(IFilterMapper *This,CLSID Filter,LPCWSTR Name);")
cpp_quote("      HRESULT (WINAPI *EnumMatchingFilters)(IFilterMapper *This,IEnumRegFilters **ppEnum,DWORD dwMerit,WINBOOL bInputNeeded,CLSID clsInMaj,CLSID clsInSub,WINBOOL bRender,WINBOOL bOututNeeded,CLSID clsOutMaj,CLSID clsOutSub);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IFilterMapperVtbl;")
cpp_quote("  struct IFilterMapper {")
cpp_quote("    CONST_VTBL struct IFilterMapperVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IFilterMapper_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IFilterMapper_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IFilterMapper_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IFilterMapper_RegisterFilter(This,clsid,Name,dwMerit) (This)->lpVtbl->RegisterFilter(This,clsid,Name,dwMerit)")
cpp_quote("#define IFilterMapper_RegisterFilterInstance(This,clsid,Name,MRId) (This)->lpVtbl->RegisterFilterInstance(This,clsid,Name,MRId)")
cpp_quote("#define IFilterMapper_RegisterPin(This,Filter,Name,bRendered,bOutput,bZero,bMany,ConnectsToFilter,ConnectsToPin) (This)->lpVtbl->RegisterPin(This,Filter,Name,bRendered,bOutput,bZero,bMany,ConnectsToFilter,ConnectsToPin)")
cpp_quote("#define IFilterMapper_RegisterPinType(This,clsFilter,strName,clsMajorType,clsSubType) (This)->lpVtbl->RegisterPinType(This,clsFilter,strName,clsMajorType,clsSubType)")
cpp_quote("#define IFilterMapper_UnregisterFilter(This,Filter) (This)->lpVtbl->UnregisterFilter(This,Filter)")
cpp_quote("#define IFilterMapper_UnregisterFilterInstance(This,MRId) (This)->lpVtbl->UnregisterFilterInstance(This,MRId)")
cpp_quote("#define IFilterMapper_UnregisterPin(This,Filter,Name) (This)->lpVtbl->UnregisterPin(This,Filter,Name)")
cpp_quote("#define IFilterMapper_EnumMatchingFilters(This,ppEnum,dwMerit,bInputNeeded,clsInMaj,clsInSub,bRender,bOututNeeded,clsOutMaj,clsOutSub) (This)->lpVtbl->EnumMatchingFilters(This,ppEnum,dwMerit,bInputNeeded,clsInMaj,clsInSub,bRender,bOututNeeded,clsOutMaj,clsOutSub)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IFilterMapper_RegisterFilter_Proxy(IFilterMapper *This,CLSID clsid,LPCWSTR Name,DWORD dwMerit);")
cpp_quote("  void __RPC_STUB IFilterMapper_RegisterFilter_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IFilterMapper_RegisterFilterInstance_Proxy(IFilterMapper *This,CLSID clsid,LPCWSTR Name,CLSID *MRId);")
cpp_quote("  void __RPC_STUB IFilterMapper_RegisterFilterInstance_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IFilterMapper_RegisterPin_Proxy(IFilterMapper *This,CLSID Filter,LPCWSTR Name,WINBOOL bRendered,WINBOOL bOutput,WINBOOL bZero,WINBOOL bMany,CLSID ConnectsToFilter,LPCWSTR ConnectsToPin);")
cpp_quote("  void __RPC_STUB IFilterMapper_RegisterPin_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IFilterMapper_RegisterPinType_Proxy(IFilterMapper *This,CLSID clsFilter,LPCWSTR strName,CLSID clsMajorType,CLSID clsSubType);")
cpp_quote("  void __RPC_STUB IFilterMapper_RegisterPinType_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IFilterMapper_UnregisterFilter_Proxy(IFilterMapper *This,CLSID Filter);")
cpp_quote("  void __RPC_STUB IFilterMapper_UnregisterFilter_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IFilterMapper_UnregisterFilterInstance_Proxy(IFilterMapper *This,CLSID MRId);")
cpp_quote("  void __RPC_STUB IFilterMapper_UnregisterFilterInstance_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IFilterMapper_UnregisterPin_Proxy(IFilterMapper *This,CLSID Filter,LPCWSTR Name);")
cpp_quote("  void __RPC_STUB IFilterMapper_UnregisterPin_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IFilterMapper_EnumMatchingFilters_Proxy(IFilterMapper *This,IEnumRegFilters **ppEnum,DWORD dwMerit,WINBOOL bInputNeeded,CLSID clsInMaj,CLSID clsInSub,WINBOOL bRender,WINBOOL bOututNeeded,CLSID clsOutMaj,CLSID clsOutSub);")
cpp_quote("  void __RPC_STUB IFilterMapper_EnumMatchingFilters_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  typedef struct __MIDL___MIDL_itf_strmif_0138_0001 {")
cpp_quote("    const CLSID *clsMajorType;")
cpp_quote("    const CLSID *clsMinorType;")
cpp_quote("  } REGPINTYPES;")
cpp_quote("")
cpp_quote("  typedef struct __MIDL___MIDL_itf_strmif_0138_0002 {")
cpp_quote("    LPWSTR strName;")
cpp_quote("    WINBOOL bRendered;")
cpp_quote("    WINBOOL bOutput;")
cpp_quote("    WINBOOL bZero;")
cpp_quote("    WINBOOL bMany;")
cpp_quote("    const CLSID *clsConnectsToFilter;")
cpp_quote("    const WCHAR *strConnectsToPin;")
cpp_quote("    UINT nMediaTypes;")
cpp_quote("    const REGPINTYPES *lpMediaType;")
cpp_quote("  } REGFILTERPINS;")
cpp_quote("")
cpp_quote("  typedef struct __MIDL___MIDL_itf_strmif_0138_0003 {")
cpp_quote("    CLSID clsMedium;")
cpp_quote("    DWORD dw1;")
cpp_quote("    DWORD dw2;")
cpp_quote("  } REGPINMEDIUM;")
cpp_quote("")
cpp_quote("  enum __MIDL___MIDL_itf_strmif_0138_0004 {")
cpp_quote("    REG_PINFLAG_B_ZERO = 0x1,REG_PINFLAG_B_RENDERER = 0x2,REG_PINFLAG_B_MANY = 0x4,REG_PINFLAG_B_OUTPUT = 0x8")
cpp_quote("  };")
cpp_quote("  typedef struct __MIDL___MIDL_itf_strmif_0138_0005 {")
cpp_quote("    DWORD dwFlags;")
cpp_quote("    UINT cInstances;")
cpp_quote("    UINT nMediaTypes;")
cpp_quote("    const REGPINTYPES *lpMediaType;")
cpp_quote("    UINT nMediums;")
cpp_quote("    const REGPINMEDIUM *lpMedium;")
cpp_quote("    const CLSID *clsPinCategory;")
cpp_quote("  } REGFILTERPINS2;")
cpp_quote("")
cpp_quote("  typedef struct __MIDL___MIDL_itf_strmif_0138_0006 {")
cpp_quote("    DWORD dwVersion;")
cpp_quote("    DWORD dwMerit;")
cpp_quote("    __C89_NAMELESS union {")
cpp_quote("      __C89_NAMELESS struct {")
cpp_quote("	ULONG cPins;")
cpp_quote("	const REGFILTERPINS *rgPins;")
cpp_quote("      };")
cpp_quote("      __C89_NAMELESS struct {")
cpp_quote("	ULONG cPins2;")
cpp_quote("	const REGFILTERPINS2 *rgPins2;")
cpp_quote("      };")
cpp_quote("    };")
cpp_quote("  } REGFILTER2;")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0138_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0138_v0_0_s_ifspec;")
cpp_quote("#ifndef __IFilterMapper2_INTERFACE_DEFINED__")
cpp_quote("#define __IFilterMapper2_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IFilterMapper2;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IFilterMapper2 : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI CreateCategory(REFCLSID clsidCategory,DWORD dwCategoryMerit,LPCWSTR Description) = 0;")
cpp_quote("    virtual HRESULT WINAPI UnregisterFilter(const CLSID *pclsidCategory,const OLECHAR *szInstance,REFCLSID Filter) = 0;")
cpp_quote("    virtual HRESULT WINAPI RegisterFilter(REFCLSID clsidFilter,LPCWSTR Name,IMoniker **ppMoniker,const CLSID *pclsidCategory,const OLECHAR *szInstance,const REGFILTER2 *prf2) = 0;")
cpp_quote("    virtual HRESULT WINAPI EnumMatchingFilters(IEnumMoniker **ppEnum,DWORD dwFlags,WINBOOL bExactMatch,DWORD dwMerit,WINBOOL bInputNeeded,DWORD cInputTypes,const GUID *pInputTypes,const REGPINMEDIUM *pMedIn,const CLSID *pPinCategoryIn,WINBOOL bRender,WINBOOL bOutputNeeded,DWORD cOutputTypes,const GUID *pOutputTypes,const REGPINMEDIUM *pMedOut,const CLSID *pPinCategoryOut) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IFilterMapper2Vtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IFilterMapper2 *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IFilterMapper2 *This);")
cpp_quote("      ULONG (WINAPI *Release)(IFilterMapper2 *This);")
cpp_quote("      HRESULT (WINAPI *CreateCategory)(IFilterMapper2 *This,REFCLSID clsidCategory,DWORD dwCategoryMerit,LPCWSTR Description);")
cpp_quote("      HRESULT (WINAPI *UnregisterFilter)(IFilterMapper2 *This,const CLSID *pclsidCategory,const OLECHAR *szInstance,REFCLSID Filter);")
cpp_quote("      HRESULT (WINAPI *RegisterFilter)(IFilterMapper2 *This,REFCLSID clsidFilter,LPCWSTR Name,IMoniker **ppMoniker,const CLSID *pclsidCategory,const OLECHAR *szInstance,const REGFILTER2 *prf2);")
cpp_quote("      HRESULT (WINAPI *EnumMatchingFilters)(IFilterMapper2 *This,IEnumMoniker **ppEnum,DWORD dwFlags,WINBOOL bExactMatch,DWORD dwMerit,WINBOOL bInputNeeded,DWORD cInputTypes,const GUID *pInputTypes,const REGPINMEDIUM *pMedIn,const CLSID *pPinCategoryIn,WINBOOL bRender,WINBOOL bOutputNeeded,DWORD cOutputTypes,const GUID *pOutputTypes,const REGPINMEDIUM *pMedOut,const CLSID *pPinCategoryOut);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IFilterMapper2Vtbl;")
cpp_quote("  struct IFilterMapper2 {")
cpp_quote("    CONST_VTBL struct IFilterMapper2Vtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IFilterMapper2_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IFilterMapper2_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IFilterMapper2_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IFilterMapper2_CreateCategory(This,clsidCategory,dwCategoryMerit,Description) (This)->lpVtbl->CreateCategory(This,clsidCategory,dwCategoryMerit,Description)")
cpp_quote("#define IFilterMapper2_UnregisterFilter(This,pclsidCategory,szInstance,Filter) (This)->lpVtbl->UnregisterFilter(This,pclsidCategory,szInstance,Filter)")
cpp_quote("#define IFilterMapper2_RegisterFilter(This,clsidFilter,Name,ppMoniker,pclsidCategory,szInstance,prf2) (This)->lpVtbl->RegisterFilter(This,clsidFilter,Name,ppMoniker,pclsidCategory,szInstance,prf2)")
cpp_quote("#define IFilterMapper2_EnumMatchingFilters(This,ppEnum,dwFlags,bExactMatch,dwMerit,bInputNeeded,cInputTypes,pInputTypes,pMedIn,pPinCategoryIn,bRender,bOutputNeeded,cOutputTypes,pOutputTypes,pMedOut,pPinCategoryOut) (This)->lpVtbl->EnumMatchingFilters(This,ppEnum,dwFlags,bExactMatch,dwMerit,bInputNeeded,cInputTypes,pInputTypes,pMedIn,pPinCategoryIn,bRender,bOutputNeeded,cOutputTypes,pOutputTypes,pMedOut,pPinCategoryOut)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IFilterMapper2_CreateCategory_Proxy(IFilterMapper2 *This,REFCLSID clsidCategory,DWORD dwCategoryMerit,LPCWSTR Description);")
cpp_quote("  void __RPC_STUB IFilterMapper2_CreateCategory_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IFilterMapper2_UnregisterFilter_Proxy(IFilterMapper2 *This,const CLSID *pclsidCategory,const OLECHAR *szInstance,REFCLSID Filter);")
cpp_quote("  void __RPC_STUB IFilterMapper2_UnregisterFilter_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IFilterMapper2_RegisterFilter_Proxy(IFilterMapper2 *This,REFCLSID clsidFilter,LPCWSTR Name,IMoniker **ppMoniker,const CLSID *pclsidCategory,const OLECHAR *szInstance,const REGFILTER2 *prf2);")
cpp_quote("  void __RPC_STUB IFilterMapper2_RegisterFilter_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IFilterMapper2_EnumMatchingFilters_Proxy(IFilterMapper2 *This,IEnumMoniker **ppEnum,DWORD dwFlags,WINBOOL bExactMatch,DWORD dwMerit,WINBOOL bInputNeeded,DWORD cInputTypes,const GUID *pInputTypes,const REGPINMEDIUM *pMedIn,const CLSID *pPinCategoryIn,WINBOOL bRender,WINBOOL bOutputNeeded,DWORD cOutputTypes,const GUID *pOutputTypes,const REGPINMEDIUM *pMedOut,const CLSID *pPinCategoryOut);")
cpp_quote("  void __RPC_STUB IFilterMapper2_EnumMatchingFilters_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IFilterMapper3_INTERFACE_DEFINED__")
cpp_quote("#define __IFilterMapper3_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IFilterMapper3;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IFilterMapper3 : public IFilterMapper2 {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI GetICreateDevEnum(ICreateDevEnum **ppEnum) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IFilterMapper3Vtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IFilterMapper3 *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IFilterMapper3 *This);")
cpp_quote("      ULONG (WINAPI *Release)(IFilterMapper3 *This);")
cpp_quote("      HRESULT (WINAPI *CreateCategory)(IFilterMapper3 *This,REFCLSID clsidCategory,DWORD dwCategoryMerit,LPCWSTR Description);")
cpp_quote("      HRESULT (WINAPI *UnregisterFilter)(IFilterMapper3 *This,const CLSID *pclsidCategory,const OLECHAR *szInstance,REFCLSID Filter);")
cpp_quote("      HRESULT (WINAPI *RegisterFilter)(IFilterMapper3 *This,REFCLSID clsidFilter,LPCWSTR Name,IMoniker **ppMoniker,const CLSID *pclsidCategory,const OLECHAR *szInstance,const REGFILTER2 *prf2);")
cpp_quote("      HRESULT (WINAPI *EnumMatchingFilters)(IFilterMapper3 *This,IEnumMoniker **ppEnum,DWORD dwFlags,WINBOOL bExactMatch,DWORD dwMerit,WINBOOL bInputNeeded,DWORD cInputTypes,const GUID *pInputTypes,const REGPINMEDIUM *pMedIn,const CLSID *pPinCategoryIn,WINBOOL bRender,WINBOOL bOutputNeeded,DWORD cOutputTypes,const GUID *pOutputTypes,const REGPINMEDIUM *pMedOut,const CLSID *pPinCategoryOut);")
cpp_quote("      HRESULT (WINAPI *GetICreateDevEnum)(IFilterMapper3 *This,ICreateDevEnum **ppEnum);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IFilterMapper3Vtbl;")
cpp_quote("  struct IFilterMapper3 {")
cpp_quote("    CONST_VTBL struct IFilterMapper3Vtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IFilterMapper3_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IFilterMapper3_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IFilterMapper3_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IFilterMapper3_CreateCategory(This,clsidCategory,dwCategoryMerit,Description) (This)->lpVtbl->CreateCategory(This,clsidCategory,dwCategoryMerit,Description)")
cpp_quote("#define IFilterMapper3_UnregisterFilter(This,pclsidCategory,szInstance,Filter) (This)->lpVtbl->UnregisterFilter(This,pclsidCategory,szInstance,Filter)")
cpp_quote("#define IFilterMapper3_RegisterFilter(This,clsidFilter,Name,ppMoniker,pclsidCategory,szInstance,prf2) (This)->lpVtbl->RegisterFilter(This,clsidFilter,Name,ppMoniker,pclsidCategory,szInstance,prf2)")
cpp_quote("#define IFilterMapper3_EnumMatchingFilters(This,ppEnum,dwFlags,bExactMatch,dwMerit,bInputNeeded,cInputTypes,pInputTypes,pMedIn,pPinCategoryIn,bRender,bOutputNeeded,cOutputTypes,pOutputTypes,pMedOut,pPinCategoryOut) (This)->lpVtbl->EnumMatchingFilters(This,ppEnum,dwFlags,bExactMatch,dwMerit,bInputNeeded,cInputTypes,pInputTypes,pMedIn,pPinCategoryIn,bRender,bOutputNeeded,cOutputTypes,pOutputTypes,pMedOut,pPinCategoryOut)")
cpp_quote("#define IFilterMapper3_GetICreateDevEnum(This,ppEnum) (This)->lpVtbl->GetICreateDevEnum(This,ppEnum)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IFilterMapper3_GetICreateDevEnum_Proxy(IFilterMapper3 *This,ICreateDevEnum **ppEnum);")
cpp_quote("  void __RPC_STUB IFilterMapper3_GetICreateDevEnum_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  typedef enum tagQualityMessageType {")
cpp_quote("    Famine = 0,Flood = Famine + 1")
cpp_quote("  } QualityMessageType;")
cpp_quote("")
cpp_quote("  typedef struct tagQuality {")
cpp_quote("    QualityMessageType Type;")
cpp_quote("    long Proportion;")
cpp_quote("    REFERENCE_TIME Late;")
cpp_quote("    REFERENCE_TIME TimeStamp;")
cpp_quote("  } Quality;")
cpp_quote("")
cpp_quote("  typedef IQualityControl *PQUALITYCONTROL;")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0141_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0141_v0_0_s_ifspec;")
cpp_quote("#ifndef __IQualityControl_INTERFACE_DEFINED__")
cpp_quote("#define __IQualityControl_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IQualityControl;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IQualityControl : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI Notify(IBaseFilter *pSelf,Quality q) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetSink(IQualityControl *piqc) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IQualityControlVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IQualityControl *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IQualityControl *This);")
cpp_quote("      ULONG (WINAPI *Release)(IQualityControl *This);")
cpp_quote("      HRESULT (WINAPI *Notify)(IQualityControl *This,IBaseFilter *pSelf,Quality q);")
cpp_quote("      HRESULT (WINAPI *SetSink)(IQualityControl *This,IQualityControl *piqc);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IQualityControlVtbl;")
cpp_quote("  struct IQualityControl {")
cpp_quote("    CONST_VTBL struct IQualityControlVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IQualityControl_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IQualityControl_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IQualityControl_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IQualityControl_Notify(This,pSelf,q) (This)->lpVtbl->Notify(This,pSelf,q)")
cpp_quote("#define IQualityControl_SetSink(This,piqc) (This)->lpVtbl->SetSink(This,piqc)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IQualityControl_Notify_Proxy(IQualityControl *This,IBaseFilter *pSelf,Quality q);")
cpp_quote("  void __RPC_STUB IQualityControl_Notify_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IQualityControl_SetSink_Proxy(IQualityControl *This,IQualityControl *piqc);")
cpp_quote("  void __RPC_STUB IQualityControl_SetSink_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  enum __MIDL___MIDL_itf_strmif_0142_0001 {")
cpp_quote("    CK_NOCOLORKEY = 0,CK_INDEX = 0x1,CK_RGB = 0x2")
cpp_quote("  };")
cpp_quote("  typedef struct tagCOLORKEY {")
cpp_quote("    DWORD KeyType;")
cpp_quote("    DWORD PaletteIndex;")
cpp_quote("    COLORREF LowColorValue;")
cpp_quote("    COLORREF HighColorValue;")
cpp_quote("  } COLORKEY;")
cpp_quote("")
cpp_quote("  enum __MIDL___MIDL_itf_strmif_0142_0002 {")
cpp_quote("    ADVISE_NONE = 0,ADVISE_CLIPPING = 0x1,ADVISE_PALETTE = 0x2,ADVISE_COLORKEY = 0x4,ADVISE_POSITION = 0x8,ADVISE_DISPLAY_CHANGE = 0x10")
cpp_quote("  };")
cpp_quote("#define ADVISE_ALL (ADVISE_CLIPPING | ADVISE_PALETTE | ADVISE_COLORKEY | ADVISE_POSITION)")
cpp_quote("#define ADVISE_ALL2 (ADVISE_ALL | ADVISE_DISPLAY_CHANGE)")
cpp_quote("")
cpp_quote("#ifndef _WINGDI_")
cpp_quote("  typedef struct _RGNDATAHEADER {")
cpp_quote("    DWORD dwSize;")
cpp_quote("    DWORD iType;")
cpp_quote("    DWORD nCount;")
cpp_quote("    DWORD nRgnSize;")
cpp_quote("    RECT rcBound;")
cpp_quote("  } RGNDATAHEADER;")
cpp_quote("")
cpp_quote("  typedef struct _RGNDATA {")
cpp_quote("    RGNDATAHEADER rdh;")
cpp_quote("    char Buffer[1];")
cpp_quote("  } RGNDATA;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0142_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0142_v0_0_s_ifspec;")
cpp_quote("#ifndef __IOverlayNotify_INTERFACE_DEFINED__")
cpp_quote("#define __IOverlayNotify_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IOverlayNotify;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IOverlayNotify : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI OnPaletteChange(DWORD dwColors,const PALETTEENTRY *pPalette) = 0;")
cpp_quote("    virtual HRESULT WINAPI OnClipChange(const RECT *pSourceRect,const RECT *pDestinationRect,const RGNDATA *pRgnData) = 0;")
cpp_quote("    virtual HRESULT WINAPI OnColorKeyChange(const COLORKEY *pColorKey) = 0;")
cpp_quote("    virtual HRESULT WINAPI OnPositionChange(const RECT *pSourceRect,const RECT *pDestinationRect) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IOverlayNotifyVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IOverlayNotify *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IOverlayNotify *This);")
cpp_quote("      ULONG (WINAPI *Release)(IOverlayNotify *This);")
cpp_quote("      HRESULT (WINAPI *OnPaletteChange)(IOverlayNotify *This,DWORD dwColors,const PALETTEENTRY *pPalette);")
cpp_quote("      HRESULT (WINAPI *OnClipChange)(IOverlayNotify *This,const RECT *pSourceRect,const RECT *pDestinationRect,const RGNDATA *pRgnData);")
cpp_quote("      HRESULT (WINAPI *OnColorKeyChange)(IOverlayNotify *This,const COLORKEY *pColorKey);")
cpp_quote("      HRESULT (WINAPI *OnPositionChange)(IOverlayNotify *This,const RECT *pSourceRect,const RECT *pDestinationRect);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IOverlayNotifyVtbl;")
cpp_quote("  struct IOverlayNotify {")
cpp_quote("    CONST_VTBL struct IOverlayNotifyVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IOverlayNotify_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IOverlayNotify_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IOverlayNotify_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IOverlayNotify_OnPaletteChange(This,dwColors,pPalette) (This)->lpVtbl->OnPaletteChange(This,dwColors,pPalette)")
cpp_quote("#define IOverlayNotify_OnClipChange(This,pSourceRect,pDestinationRect,pRgnData) (This)->lpVtbl->OnClipChange(This,pSourceRect,pDestinationRect,pRgnData)")
cpp_quote("#define IOverlayNotify_OnColorKeyChange(This,pColorKey) (This)->lpVtbl->OnColorKeyChange(This,pColorKey)")
cpp_quote("#define IOverlayNotify_OnPositionChange(This,pSourceRect,pDestinationRect) (This)->lpVtbl->OnPositionChange(This,pSourceRect,pDestinationRect)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IOverlayNotify_OnPaletteChange_Proxy(IOverlayNotify *This,DWORD dwColors,const PALETTEENTRY *pPalette);")
cpp_quote("  void __RPC_STUB IOverlayNotify_OnPaletteChange_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IOverlayNotify_OnClipChange_Proxy(IOverlayNotify *This,const RECT *pSourceRect,const RECT *pDestinationRect,const RGNDATA *pRgnData);")
cpp_quote("  void __RPC_STUB IOverlayNotify_OnClipChange_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IOverlayNotify_OnColorKeyChange_Proxy(IOverlayNotify *This,const COLORKEY *pColorKey);")
cpp_quote("  void __RPC_STUB IOverlayNotify_OnColorKeyChange_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IOverlayNotify_OnPositionChange_Proxy(IOverlayNotify *This,const RECT *pSourceRect,const RECT *pDestinationRect);")
cpp_quote("  void __RPC_STUB IOverlayNotify_OnPositionChange_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  typedef IOverlayNotify *POVERLAYNOTIFY;")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0143_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0143_v0_0_s_ifspec;")
cpp_quote("#ifndef __IOverlayNotify2_INTERFACE_DEFINED__")
cpp_quote("#define __IOverlayNotify2_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IOverlayNotify2;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IOverlayNotify2 : public IOverlayNotify {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI OnDisplayChange(HMONITOR hMonitor) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IOverlayNotify2Vtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IOverlayNotify2 *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IOverlayNotify2 *This);")
cpp_quote("      ULONG (WINAPI *Release)(IOverlayNotify2 *This);")
cpp_quote("      HRESULT (WINAPI *OnPaletteChange)(IOverlayNotify2 *This,DWORD dwColors,const PALETTEENTRY *pPalette);")
cpp_quote("      HRESULT (WINAPI *OnClipChange)(IOverlayNotify2 *This,const RECT *pSourceRect,const RECT *pDestinationRect,const RGNDATA *pRgnData);")
cpp_quote("      HRESULT (WINAPI *OnColorKeyChange)(IOverlayNotify2 *This,const COLORKEY *pColorKey);")
cpp_quote("      HRESULT (WINAPI *OnPositionChange)(IOverlayNotify2 *This,const RECT *pSourceRect,const RECT *pDestinationRect);")
cpp_quote("      HRESULT (WINAPI *OnDisplayChange)(IOverlayNotify2 *This,HMONITOR hMonitor);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IOverlayNotify2Vtbl;")
cpp_quote("  struct IOverlayNotify2 {")
cpp_quote("    CONST_VTBL struct IOverlayNotify2Vtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IOverlayNotify2_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IOverlayNotify2_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IOverlayNotify2_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IOverlayNotify2_OnPaletteChange(This,dwColors,pPalette) (This)->lpVtbl->OnPaletteChange(This,dwColors,pPalette)")
cpp_quote("#define IOverlayNotify2_OnClipChange(This,pSourceRect,pDestinationRect,pRgnData) (This)->lpVtbl->OnClipChange(This,pSourceRect,pDestinationRect,pRgnData)")
cpp_quote("#define IOverlayNotify2_OnColorKeyChange(This,pColorKey) (This)->lpVtbl->OnColorKeyChange(This,pColorKey)")
cpp_quote("#define IOverlayNotify2_OnPositionChange(This,pSourceRect,pDestinationRect) (This)->lpVtbl->OnPositionChange(This,pSourceRect,pDestinationRect)")
cpp_quote("#define IOverlayNotify2_OnDisplayChange(This,hMonitor) (This)->lpVtbl->OnDisplayChange(This,hMonitor)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IOverlayNotify2_OnDisplayChange_Proxy(IOverlayNotify2 *This,HMONITOR hMonitor);")
cpp_quote("  void __RPC_STUB IOverlayNotify2_OnDisplayChange_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  typedef IOverlayNotify2 *POVERLAYNOTIFY2;")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0144_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0144_v0_0_s_ifspec;")
cpp_quote("#ifndef __IOverlay_INTERFACE_DEFINED__")
cpp_quote("#define __IOverlay_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IOverlay;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IOverlay : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI GetPalette(DWORD *pdwColors,PALETTEENTRY **ppPalette) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetPalette(DWORD dwColors,PALETTEENTRY *pPalette) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetDefaultColorKey(COLORKEY *pColorKey) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetColorKey(COLORKEY *pColorKey) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetColorKey(COLORKEY *pColorKey) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetWindowHandle(HWND *pHwnd) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetClipList(RECT *pSourceRect,RECT *pDestinationRect,RGNDATA **ppRgnData) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetVideoPosition(RECT *pSourceRect,RECT *pDestinationRect) = 0;")
cpp_quote("    virtual HRESULT WINAPI Advise(IOverlayNotify *pOverlayNotify,DWORD dwInterests) = 0;")
cpp_quote("    virtual HRESULT WINAPI Unadvise(void) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IOverlayVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IOverlay *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IOverlay *This);")
cpp_quote("      ULONG (WINAPI *Release)(IOverlay *This);")
cpp_quote("      HRESULT (WINAPI *GetPalette)(IOverlay *This,DWORD *pdwColors,PALETTEENTRY **ppPalette);")
cpp_quote("      HRESULT (WINAPI *SetPalette)(IOverlay *This,DWORD dwColors,PALETTEENTRY *pPalette);")
cpp_quote("      HRESULT (WINAPI *GetDefaultColorKey)(IOverlay *This,COLORKEY *pColorKey);")
cpp_quote("      HRESULT (WINAPI *GetColorKey)(IOverlay *This,COLORKEY *pColorKey);")
cpp_quote("      HRESULT (WINAPI *SetColorKey)(IOverlay *This,COLORKEY *pColorKey);")
cpp_quote("      HRESULT (WINAPI *GetWindowHandle)(IOverlay *This,HWND *pHwnd);")
cpp_quote("      HRESULT (WINAPI *GetClipList)(IOverlay *This,RECT *pSourceRect,RECT *pDestinationRect,RGNDATA **ppRgnData);")
cpp_quote("      HRESULT (WINAPI *GetVideoPosition)(IOverlay *This,RECT *pSourceRect,RECT *pDestinationRect);")
cpp_quote("      HRESULT (WINAPI *Advise)(IOverlay *This,IOverlayNotify *pOverlayNotify,DWORD dwInterests);")
cpp_quote("      HRESULT (WINAPI *Unadvise)(IOverlay *This);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IOverlayVtbl;")
cpp_quote("  struct IOverlay {")
cpp_quote("    CONST_VTBL struct IOverlayVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IOverlay_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IOverlay_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IOverlay_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IOverlay_GetPalette(This,pdwColors,ppPalette) (This)->lpVtbl->GetPalette(This,pdwColors,ppPalette)")
cpp_quote("#define IOverlay_SetPalette(This,dwColors,pPalette) (This)->lpVtbl->SetPalette(This,dwColors,pPalette)")
cpp_quote("#define IOverlay_GetDefaultColorKey(This,pColorKey) (This)->lpVtbl->GetDefaultColorKey(This,pColorKey)")
cpp_quote("#define IOverlay_GetColorKey(This,pColorKey) (This)->lpVtbl->GetColorKey(This,pColorKey)")
cpp_quote("#define IOverlay_SetColorKey(This,pColorKey) (This)->lpVtbl->SetColorKey(This,pColorKey)")
cpp_quote("#define IOverlay_GetWindowHandle(This,pHwnd) (This)->lpVtbl->GetWindowHandle(This,pHwnd)")
cpp_quote("#define IOverlay_GetClipList(This,pSourceRect,pDestinationRect,ppRgnData) (This)->lpVtbl->GetClipList(This,pSourceRect,pDestinationRect,ppRgnData)")
cpp_quote("#define IOverlay_GetVideoPosition(This,pSourceRect,pDestinationRect) (This)->lpVtbl->GetVideoPosition(This,pSourceRect,pDestinationRect)")
cpp_quote("#define IOverlay_Advise(This,pOverlayNotify,dwInterests) (This)->lpVtbl->Advise(This,pOverlayNotify,dwInterests)")
cpp_quote("#define IOverlay_Unadvise(This) (This)->lpVtbl->Unadvise(This)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IOverlay_GetPalette_Proxy(IOverlay *This,DWORD *pdwColors,PALETTEENTRY **ppPalette);")
cpp_quote("  void __RPC_STUB IOverlay_GetPalette_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IOverlay_SetPalette_Proxy(IOverlay *This,DWORD dwColors,PALETTEENTRY *pPalette);")
cpp_quote("  void __RPC_STUB IOverlay_SetPalette_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IOverlay_GetDefaultColorKey_Proxy(IOverlay *This,COLORKEY *pColorKey);")
cpp_quote("  void __RPC_STUB IOverlay_GetDefaultColorKey_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IOverlay_GetColorKey_Proxy(IOverlay *This,COLORKEY *pColorKey);")
cpp_quote("  void __RPC_STUB IOverlay_GetColorKey_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IOverlay_SetColorKey_Proxy(IOverlay *This,COLORKEY *pColorKey);")
cpp_quote("  void __RPC_STUB IOverlay_SetColorKey_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IOverlay_GetWindowHandle_Proxy(IOverlay *This,HWND *pHwnd);")
cpp_quote("  void __RPC_STUB IOverlay_GetWindowHandle_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IOverlay_GetClipList_Proxy(IOverlay *This,RECT *pSourceRect,RECT *pDestinationRect,RGNDATA **ppRgnData);")
cpp_quote("  void __RPC_STUB IOverlay_GetClipList_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IOverlay_GetVideoPosition_Proxy(IOverlay *This,RECT *pSourceRect,RECT *pDestinationRect);")
cpp_quote("  void __RPC_STUB IOverlay_GetVideoPosition_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IOverlay_Advise_Proxy(IOverlay *This,IOverlayNotify *pOverlayNotify,DWORD dwInterests);")
cpp_quote("  void __RPC_STUB IOverlay_Advise_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IOverlay_Unadvise_Proxy(IOverlay *This);")
cpp_quote("  void __RPC_STUB IOverlay_Unadvise_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  typedef IOverlay *POVERLAY;")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0145_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0145_v0_0_s_ifspec;")
cpp_quote("#ifndef __IMediaEventSink_INTERFACE_DEFINED__")
cpp_quote("#define __IMediaEventSink_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IMediaEventSink;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IMediaEventSink : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI Notify(long EventCode,LONG_PTR EventParam1,LONG_PTR EventParam2) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IMediaEventSinkVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IMediaEventSink *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IMediaEventSink *This);")
cpp_quote("      ULONG (WINAPI *Release)(IMediaEventSink *This);")
cpp_quote("      HRESULT (WINAPI *Notify)(IMediaEventSink *This,long EventCode,LONG_PTR EventParam1,LONG_PTR EventParam2);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IMediaEventSinkVtbl;")
cpp_quote("  struct IMediaEventSink {")
cpp_quote("    CONST_VTBL struct IMediaEventSinkVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IMediaEventSink_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IMediaEventSink_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IMediaEventSink_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IMediaEventSink_Notify(This,EventCode,EventParam1,EventParam2) (This)->lpVtbl->Notify(This,EventCode,EventParam1,EventParam2)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IMediaEventSink_Notify_Proxy(IMediaEventSink *This,long EventCode,LONG_PTR EventParam1,LONG_PTR EventParam2);")
cpp_quote("  void __RPC_STUB IMediaEventSink_Notify_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  typedef IMediaEventSink *PMEDIAEVENTSINK;")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0146_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0146_v0_0_s_ifspec;")
cpp_quote("#ifndef __IFileSourceFilter_INTERFACE_DEFINED__")
cpp_quote("#define __IFileSourceFilter_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IFileSourceFilter;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IFileSourceFilter : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI Load(LPCOLESTR pszFileName,const AM_MEDIA_TYPE *pmt) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetCurFile(LPOLESTR *ppszFileName,AM_MEDIA_TYPE *pmt) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IFileSourceFilterVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IFileSourceFilter *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IFileSourceFilter *This);")
cpp_quote("      ULONG (WINAPI *Release)(IFileSourceFilter *This);")
cpp_quote("      HRESULT (WINAPI *Load)(IFileSourceFilter *This,LPCOLESTR pszFileName,const AM_MEDIA_TYPE *pmt);")
cpp_quote("      HRESULT (WINAPI *GetCurFile)(IFileSourceFilter *This,LPOLESTR *ppszFileName,AM_MEDIA_TYPE *pmt);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IFileSourceFilterVtbl;")
cpp_quote("  struct IFileSourceFilter {")
cpp_quote("    CONST_VTBL struct IFileSourceFilterVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IFileSourceFilter_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IFileSourceFilter_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IFileSourceFilter_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IFileSourceFilter_Load(This,pszFileName,pmt) (This)->lpVtbl->Load(This,pszFileName,pmt)")
cpp_quote("#define IFileSourceFilter_GetCurFile(This,ppszFileName,pmt) (This)->lpVtbl->GetCurFile(This,ppszFileName,pmt)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IFileSourceFilter_Load_Proxy(IFileSourceFilter *This,LPCOLESTR pszFileName,const AM_MEDIA_TYPE *pmt);")
cpp_quote("  void __RPC_STUB IFileSourceFilter_Load_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IFileSourceFilter_GetCurFile_Proxy(IFileSourceFilter *This,LPOLESTR *ppszFileName,AM_MEDIA_TYPE *pmt);")
cpp_quote("  void __RPC_STUB IFileSourceFilter_GetCurFile_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  typedef IFileSourceFilter *PFILTERFILESOURCE;")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0147_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0147_v0_0_s_ifspec;")
cpp_quote("#ifndef __IFileSinkFilter_INTERFACE_DEFINED__")
cpp_quote("#define __IFileSinkFilter_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IFileSinkFilter;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IFileSinkFilter : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI SetFileName(LPCOLESTR pszFileName,const AM_MEDIA_TYPE *pmt) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetCurFile(LPOLESTR *ppszFileName,AM_MEDIA_TYPE *pmt) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IFileSinkFilterVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IFileSinkFilter *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IFileSinkFilter *This);")
cpp_quote("      ULONG (WINAPI *Release)(IFileSinkFilter *This);")
cpp_quote("      HRESULT (WINAPI *SetFileName)(IFileSinkFilter *This,LPCOLESTR pszFileName,const AM_MEDIA_TYPE *pmt);")
cpp_quote("      HRESULT (WINAPI *GetCurFile)(IFileSinkFilter *This,LPOLESTR *ppszFileName,AM_MEDIA_TYPE *pmt);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IFileSinkFilterVtbl;")
cpp_quote("  struct IFileSinkFilter {")
cpp_quote("    CONST_VTBL struct IFileSinkFilterVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IFileSinkFilter_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IFileSinkFilter_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IFileSinkFilter_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IFileSinkFilter_SetFileName(This,pszFileName,pmt) (This)->lpVtbl->SetFileName(This,pszFileName,pmt)")
cpp_quote("#define IFileSinkFilter_GetCurFile(This,ppszFileName,pmt) (This)->lpVtbl->GetCurFile(This,ppszFileName,pmt)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IFileSinkFilter_SetFileName_Proxy(IFileSinkFilter *This,LPCOLESTR pszFileName,const AM_MEDIA_TYPE *pmt);")
cpp_quote("  void __RPC_STUB IFileSinkFilter_SetFileName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IFileSinkFilter_GetCurFile_Proxy(IFileSinkFilter *This,LPOLESTR *ppszFileName,AM_MEDIA_TYPE *pmt);")
cpp_quote("  void __RPC_STUB IFileSinkFilter_GetCurFile_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  typedef IFileSinkFilter *PFILTERFILESINK;")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0148_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0148_v0_0_s_ifspec;")
cpp_quote("#ifndef __IFileSinkFilter2_INTERFACE_DEFINED__")
cpp_quote("#define __IFileSinkFilter2_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IFileSinkFilter2;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IFileSinkFilter2 : public IFileSinkFilter {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI SetMode(DWORD dwFlags) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetMode(DWORD *pdwFlags) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IFileSinkFilter2Vtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IFileSinkFilter2 *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IFileSinkFilter2 *This);")
cpp_quote("      ULONG (WINAPI *Release)(IFileSinkFilter2 *This);")
cpp_quote("      HRESULT (WINAPI *SetFileName)(IFileSinkFilter2 *This,LPCOLESTR pszFileName,const AM_MEDIA_TYPE *pmt);")
cpp_quote("      HRESULT (WINAPI *GetCurFile)(IFileSinkFilter2 *This,LPOLESTR *ppszFileName,AM_MEDIA_TYPE *pmt);")
cpp_quote("      HRESULT (WINAPI *SetMode)(IFileSinkFilter2 *This,DWORD dwFlags);")
cpp_quote("      HRESULT (WINAPI *GetMode)(IFileSinkFilter2 *This,DWORD *pdwFlags);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IFileSinkFilter2Vtbl;")
cpp_quote("  struct IFileSinkFilter2 {")
cpp_quote("    CONST_VTBL struct IFileSinkFilter2Vtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IFileSinkFilter2_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IFileSinkFilter2_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IFileSinkFilter2_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IFileSinkFilter2_SetFileName(This,pszFileName,pmt) (This)->lpVtbl->SetFileName(This,pszFileName,pmt)")
cpp_quote("#define IFileSinkFilter2_GetCurFile(This,ppszFileName,pmt) (This)->lpVtbl->GetCurFile(This,ppszFileName,pmt)")
cpp_quote("#define IFileSinkFilter2_SetMode(This,dwFlags) (This)->lpVtbl->SetMode(This,dwFlags)")
cpp_quote("#define IFileSinkFilter2_GetMode(This,pdwFlags) (This)->lpVtbl->GetMode(This,pdwFlags)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IFileSinkFilter2_SetMode_Proxy(IFileSinkFilter2 *This,DWORD dwFlags);")
cpp_quote("  void __RPC_STUB IFileSinkFilter2_SetMode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IFileSinkFilter2_GetMode_Proxy(IFileSinkFilter2 *This,DWORD *pdwFlags);")
cpp_quote("  void __RPC_STUB IFileSinkFilter2_GetMode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  typedef IFileSinkFilter2 *PFILESINKFILTER2;")
cpp_quote("")
cpp_quote("  typedef enum __MIDL___MIDL_itf_strmif_0149_0001 {")
cpp_quote("    AM_FILE_OVERWRITE = 0x1")
cpp_quote("  } AM_FILESINK_FLAGS;")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0149_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0149_v0_0_s_ifspec;")
cpp_quote("#ifndef __IGraphBuilder_INTERFACE_DEFINED__")
cpp_quote("#define __IGraphBuilder_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IGraphBuilder;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IGraphBuilder : public IFilterGraph {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI Connect(IPin *ppinOut,IPin *ppinIn) = 0;")
cpp_quote("    virtual HRESULT WINAPI Render(IPin *ppinOut) = 0;")
cpp_quote("    virtual HRESULT WINAPI RenderFile(LPCWSTR lpcwstrFile,LPCWSTR lpcwstrPlayList) = 0;")
cpp_quote("    virtual HRESULT WINAPI AddSourceFilter(LPCWSTR lpcwstrFileName,LPCWSTR lpcwstrFilterName,IBaseFilter **ppFilter) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetLogFile(DWORD_PTR hFile) = 0;")
cpp_quote("    virtual HRESULT WINAPI Abort(void) = 0;")
cpp_quote("    virtual HRESULT WINAPI ShouldOperationContinue(void) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IGraphBuilderVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IGraphBuilder *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IGraphBuilder *This);")
cpp_quote("      ULONG (WINAPI *Release)(IGraphBuilder *This);")
cpp_quote("      HRESULT (WINAPI *AddFilter)(IGraphBuilder *This,IBaseFilter *pFilter,LPCWSTR pName);")
cpp_quote("      HRESULT (WINAPI *RemoveFilter)(IGraphBuilder *This,IBaseFilter *pFilter);")
cpp_quote("      HRESULT (WINAPI *EnumFilters)(IGraphBuilder *This,IEnumFilters **ppEnum);")
cpp_quote("      HRESULT (WINAPI *FindFilterByName)(IGraphBuilder *This,LPCWSTR pName,IBaseFilter **ppFilter);")
cpp_quote("      HRESULT (WINAPI *ConnectDirect)(IGraphBuilder *This,IPin *ppinOut,IPin *ppinIn,const AM_MEDIA_TYPE *pmt);")
cpp_quote("      HRESULT (WINAPI *Reconnect)(IGraphBuilder *This,IPin *ppin);")
cpp_quote("      HRESULT (WINAPI *Disconnect)(IGraphBuilder *This,IPin *ppin);")
cpp_quote("      HRESULT (WINAPI *SetDefaultSyncSource)(IGraphBuilder *This);")
cpp_quote("      HRESULT (WINAPI *Connect)(IGraphBuilder *This,IPin *ppinOut,IPin *ppinIn);")
cpp_quote("      HRESULT (WINAPI *Render)(IGraphBuilder *This,IPin *ppinOut);")
cpp_quote("      HRESULT (WINAPI *RenderFile)(IGraphBuilder *This,LPCWSTR lpcwstrFile,LPCWSTR lpcwstrPlayList);")
cpp_quote("      HRESULT (WINAPI *AddSourceFilter)(IGraphBuilder *This,LPCWSTR lpcwstrFileName,LPCWSTR lpcwstrFilterName,IBaseFilter **ppFilter);")
cpp_quote("      HRESULT (WINAPI *SetLogFile)(IGraphBuilder *This,DWORD_PTR hFile);")
cpp_quote("      HRESULT (WINAPI *Abort)(IGraphBuilder *This);")
cpp_quote("      HRESULT (WINAPI *ShouldOperationContinue)(IGraphBuilder *This);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IGraphBuilderVtbl;")
cpp_quote("  struct IGraphBuilder {")
cpp_quote("    CONST_VTBL struct IGraphBuilderVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IGraphBuilder_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IGraphBuilder_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IGraphBuilder_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IGraphBuilder_AddFilter(This,pFilter,pName) (This)->lpVtbl->AddFilter(This,pFilter,pName)")
cpp_quote("#define IGraphBuilder_RemoveFilter(This,pFilter) (This)->lpVtbl->RemoveFilter(This,pFilter)")
cpp_quote("#define IGraphBuilder_EnumFilters(This,ppEnum) (This)->lpVtbl->EnumFilters(This,ppEnum)")
cpp_quote("#define IGraphBuilder_FindFilterByName(This,pName,ppFilter) (This)->lpVtbl->FindFilterByName(This,pName,ppFilter)")
cpp_quote("#define IGraphBuilder_ConnectDirect(This,ppinOut,ppinIn,pmt) (This)->lpVtbl->ConnectDirect(This,ppinOut,ppinIn,pmt)")
cpp_quote("#define IGraphBuilder_Reconnect(This,ppin) (This)->lpVtbl->Reconnect(This,ppin)")
cpp_quote("#define IGraphBuilder_Disconnect(This,ppin) (This)->lpVtbl->Disconnect(This,ppin)")
cpp_quote("#define IGraphBuilder_SetDefaultSyncSource(This) (This)->lpVtbl->SetDefaultSyncSource(This)")
cpp_quote("#define IGraphBuilder_Connect(This,ppinOut,ppinIn) (This)->lpVtbl->Connect(This,ppinOut,ppinIn)")
cpp_quote("#define IGraphBuilder_Render(This,ppinOut) (This)->lpVtbl->Render(This,ppinOut)")
cpp_quote("#define IGraphBuilder_RenderFile(This,lpcwstrFile,lpcwstrPlayList) (This)->lpVtbl->RenderFile(This,lpcwstrFile,lpcwstrPlayList)")
cpp_quote("#define IGraphBuilder_AddSourceFilter(This,lpcwstrFileName,lpcwstrFilterName,ppFilter) (This)->lpVtbl->AddSourceFilter(This,lpcwstrFileName,lpcwstrFilterName,ppFilter)")
cpp_quote("#define IGraphBuilder_SetLogFile(This,hFile) (This)->lpVtbl->SetLogFile(This,hFile)")
cpp_quote("#define IGraphBuilder_Abort(This) (This)->lpVtbl->Abort(This)")
cpp_quote("#define IGraphBuilder_ShouldOperationContinue(This) (This)->lpVtbl->ShouldOperationContinue(This)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IGraphBuilder_Connect_Proxy(IGraphBuilder *This,IPin *ppinOut,IPin *ppinIn);")
cpp_quote("  void __RPC_STUB IGraphBuilder_Connect_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IGraphBuilder_Render_Proxy(IGraphBuilder *This,IPin *ppinOut);")
cpp_quote("  void __RPC_STUB IGraphBuilder_Render_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IGraphBuilder_RenderFile_Proxy(IGraphBuilder *This,LPCWSTR lpcwstrFile,LPCWSTR lpcwstrPlayList);")
cpp_quote("  void __RPC_STUB IGraphBuilder_RenderFile_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IGraphBuilder_AddSourceFilter_Proxy(IGraphBuilder *This,LPCWSTR lpcwstrFileName,LPCWSTR lpcwstrFilterName,IBaseFilter **ppFilter);")
cpp_quote("  void __RPC_STUB IGraphBuilder_AddSourceFilter_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IGraphBuilder_SetLogFile_Proxy(IGraphBuilder *This,DWORD_PTR hFile);")
cpp_quote("  void __RPC_STUB IGraphBuilder_SetLogFile_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IGraphBuilder_Abort_Proxy(IGraphBuilder *This);")
cpp_quote("  void __RPC_STUB IGraphBuilder_Abort_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IGraphBuilder_ShouldOperationContinue_Proxy(IGraphBuilder *This);")
cpp_quote("  void __RPC_STUB IGraphBuilder_ShouldOperationContinue_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __ICaptureGraphBuilder_INTERFACE_DEFINED__")
cpp_quote("#define __ICaptureGraphBuilder_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_ICaptureGraphBuilder;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct ICaptureGraphBuilder : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI SetFiltergraph(IGraphBuilder *pfg) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetFiltergraph(IGraphBuilder **ppfg) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetOutputFileName(const GUID *pType,LPCOLESTR lpstrFile,IBaseFilter **ppf,IFileSinkFilter **ppSink) = 0;")
cpp_quote("    virtual HRESULT WINAPI FindInterface(const GUID *pCategory,IBaseFilter *pf,REFIID riid,void **ppint) = 0;")
cpp_quote("    virtual HRESULT WINAPI RenderStream(const GUID *pCategory,IUnknown *pSource,IBaseFilter *pfCompressor,IBaseFilter *pfRenderer) = 0;")
cpp_quote("    virtual HRESULT WINAPI ControlStream(const GUID *pCategory,IBaseFilter *pFilter,REFERENCE_TIME *pstart,REFERENCE_TIME *pstop,WORD wStartCookie,WORD wStopCookie) = 0;")
cpp_quote("    virtual HRESULT WINAPI AllocCapFile(LPCOLESTR lpstr,DWORDLONG dwlSize) = 0;")
cpp_quote("    virtual HRESULT WINAPI CopyCaptureFile(LPOLESTR lpwstrOld,LPOLESTR lpwstrNew,int fAllowEscAbort,IAMCopyCaptureFileProgress *pCallback) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct ICaptureGraphBuilderVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(ICaptureGraphBuilder *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(ICaptureGraphBuilder *This);")
cpp_quote("      ULONG (WINAPI *Release)(ICaptureGraphBuilder *This);")
cpp_quote("      HRESULT (WINAPI *SetFiltergraph)(ICaptureGraphBuilder *This,IGraphBuilder *pfg);")
cpp_quote("      HRESULT (WINAPI *GetFiltergraph)(ICaptureGraphBuilder *This,IGraphBuilder **ppfg);")
cpp_quote("      HRESULT (WINAPI *SetOutputFileName)(ICaptureGraphBuilder *This,const GUID *pType,LPCOLESTR lpstrFile,IBaseFilter **ppf,IFileSinkFilter **ppSink);")
cpp_quote("      HRESULT (WINAPI *FindInterface)(ICaptureGraphBuilder *This,const GUID *pCategory,IBaseFilter *pf,REFIID riid,void **ppint);")
cpp_quote("      HRESULT (WINAPI *RenderStream)(ICaptureGraphBuilder *This,const GUID *pCategory,IUnknown *pSource,IBaseFilter *pfCompressor,IBaseFilter *pfRenderer);")
cpp_quote("      HRESULT (WINAPI *ControlStream)(ICaptureGraphBuilder *This,const GUID *pCategory,IBaseFilter *pFilter,REFERENCE_TIME *pstart,REFERENCE_TIME *pstop,WORD wStartCookie,WORD wStopCookie);")
cpp_quote("      HRESULT (WINAPI *AllocCapFile)(ICaptureGraphBuilder *This,LPCOLESTR lpstr,DWORDLONG dwlSize);")
cpp_quote("      HRESULT (WINAPI *CopyCaptureFile)(ICaptureGraphBuilder *This,LPOLESTR lpwstrOld,LPOLESTR lpwstrNew,int fAllowEscAbort,IAMCopyCaptureFileProgress *pCallback);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } ICaptureGraphBuilderVtbl;")
cpp_quote("  struct ICaptureGraphBuilder {")
cpp_quote("    CONST_VTBL struct ICaptureGraphBuilderVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define ICaptureGraphBuilder_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define ICaptureGraphBuilder_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define ICaptureGraphBuilder_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define ICaptureGraphBuilder_SetFiltergraph(This,pfg) (This)->lpVtbl->SetFiltergraph(This,pfg)")
cpp_quote("#define ICaptureGraphBuilder_GetFiltergraph(This,ppfg) (This)->lpVtbl->GetFiltergraph(This,ppfg)")
cpp_quote("#define ICaptureGraphBuilder_SetOutputFileName(This,pType,lpstrFile,ppf,ppSink) (This)->lpVtbl->SetOutputFileName(This,pType,lpstrFile,ppf,ppSink)")
cpp_quote("#define ICaptureGraphBuilder_FindInterface(This,pCategory,pf,riid,ppint) (This)->lpVtbl->FindInterface(This,pCategory,pf,riid,ppint)")
cpp_quote("#define ICaptureGraphBuilder_RenderStream(This,pCategory,pSource,pfCompressor,pfRenderer) (This)->lpVtbl->RenderStream(This,pCategory,pSource,pfCompressor,pfRenderer)")
cpp_quote("#define ICaptureGraphBuilder_ControlStream(This,pCategory,pFilter,pstart,pstop,wStartCookie,wStopCookie) (This)->lpVtbl->ControlStream(This,pCategory,pFilter,pstart,pstop,wStartCookie,wStopCookie)")
cpp_quote("#define ICaptureGraphBuilder_AllocCapFile(This,lpstr,dwlSize) (This)->lpVtbl->AllocCapFile(This,lpstr,dwlSize)")
cpp_quote("#define ICaptureGraphBuilder_CopyCaptureFile(This,lpwstrOld,lpwstrNew,fAllowEscAbort,pCallback) (This)->lpVtbl->CopyCaptureFile(This,lpwstrOld,lpwstrNew,fAllowEscAbort,pCallback)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI ICaptureGraphBuilder_SetFiltergraph_Proxy(ICaptureGraphBuilder *This,IGraphBuilder *pfg);")
cpp_quote("  void __RPC_STUB ICaptureGraphBuilder_SetFiltergraph_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI ICaptureGraphBuilder_GetFiltergraph_Proxy(ICaptureGraphBuilder *This,IGraphBuilder **ppfg);")
cpp_quote("  void __RPC_STUB ICaptureGraphBuilder_GetFiltergraph_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI ICaptureGraphBuilder_SetOutputFileName_Proxy(ICaptureGraphBuilder *This,const GUID *pType,LPCOLESTR lpstrFile,IBaseFilter **ppf,IFileSinkFilter **ppSink);")
cpp_quote("  void __RPC_STUB ICaptureGraphBuilder_SetOutputFileName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI ICaptureGraphBuilder_RemoteFindInterface_Proxy(ICaptureGraphBuilder *This,const GUID *pCategory,IBaseFilter *pf,REFIID riid,IUnknown **ppint);")
cpp_quote("  void __RPC_STUB ICaptureGraphBuilder_RemoteFindInterface_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI ICaptureGraphBuilder_RenderStream_Proxy(ICaptureGraphBuilder *This,const GUID *pCategory,IUnknown *pSource,IBaseFilter *pfCompressor,IBaseFilter *pfRenderer);")
cpp_quote("  void __RPC_STUB ICaptureGraphBuilder_RenderStream_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI ICaptureGraphBuilder_ControlStream_Proxy(ICaptureGraphBuilder *This,const GUID *pCategory,IBaseFilter *pFilter,REFERENCE_TIME *pstart,REFERENCE_TIME *pstop,WORD wStartCookie,WORD wStopCookie);")
cpp_quote("  void __RPC_STUB ICaptureGraphBuilder_ControlStream_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI ICaptureGraphBuilder_AllocCapFile_Proxy(ICaptureGraphBuilder *This,LPCOLESTR lpstr,DWORDLONG dwlSize);")
cpp_quote("  void __RPC_STUB ICaptureGraphBuilder_AllocCapFile_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI ICaptureGraphBuilder_CopyCaptureFile_Proxy(ICaptureGraphBuilder *This,LPOLESTR lpwstrOld,LPOLESTR lpwstrNew,int fAllowEscAbort,IAMCopyCaptureFileProgress *pCallback);")
cpp_quote("  void __RPC_STUB ICaptureGraphBuilder_CopyCaptureFile_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMCopyCaptureFileProgress_INTERFACE_DEFINED__")
cpp_quote("#define __IAMCopyCaptureFileProgress_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IAMCopyCaptureFileProgress;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IAMCopyCaptureFileProgress : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI Progress(int iProgress) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IAMCopyCaptureFileProgressVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IAMCopyCaptureFileProgress *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IAMCopyCaptureFileProgress *This);")
cpp_quote("      ULONG (WINAPI *Release)(IAMCopyCaptureFileProgress *This);")
cpp_quote("      HRESULT (WINAPI *Progress)(IAMCopyCaptureFileProgress *This,int iProgress);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IAMCopyCaptureFileProgressVtbl;")
cpp_quote("  struct IAMCopyCaptureFileProgress {")
cpp_quote("    CONST_VTBL struct IAMCopyCaptureFileProgressVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IAMCopyCaptureFileProgress_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IAMCopyCaptureFileProgress_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IAMCopyCaptureFileProgress_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IAMCopyCaptureFileProgress_Progress(This,iProgress) (This)->lpVtbl->Progress(This,iProgress)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IAMCopyCaptureFileProgress_Progress_Proxy(IAMCopyCaptureFileProgress *This,int iProgress);")
cpp_quote("  void __RPC_STUB IAMCopyCaptureFileProgress_Progress_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __ICaptureGraphBuilder2_INTERFACE_DEFINED__")
cpp_quote("#define __ICaptureGraphBuilder2_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_ICaptureGraphBuilder2;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct ICaptureGraphBuilder2 : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI SetFiltergraph(IGraphBuilder *pfg) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetFiltergraph(IGraphBuilder **ppfg) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetOutputFileName(const GUID *pType,LPCOLESTR lpstrFile,IBaseFilter **ppf,IFileSinkFilter **ppSink) = 0;")
cpp_quote("    virtual HRESULT WINAPI FindInterface(const GUID *pCategory,const GUID *pType,IBaseFilter *pf,REFIID riid,void **ppint) = 0;")
cpp_quote("    virtual HRESULT WINAPI RenderStream(const GUID *pCategory,const GUID *pType,IUnknown *pSource,IBaseFilter *pfCompressor,IBaseFilter *pfRenderer) = 0;")
cpp_quote("    virtual HRESULT WINAPI ControlStream(const GUID *pCategory,const GUID *pType,IBaseFilter *pFilter,REFERENCE_TIME *pstart,REFERENCE_TIME *pstop,WORD wStartCookie,WORD wStopCookie) = 0;")
cpp_quote("    virtual HRESULT WINAPI AllocCapFile(LPCOLESTR lpstr,DWORDLONG dwlSize) = 0;")
cpp_quote("    virtual HRESULT WINAPI CopyCaptureFile(LPOLESTR lpwstrOld,LPOLESTR lpwstrNew,int fAllowEscAbort,IAMCopyCaptureFileProgress *pCallback) = 0;")
cpp_quote("    virtual HRESULT WINAPI FindPin(IUnknown *pSource,PIN_DIRECTION pindir,const GUID *pCategory,const GUID *pType,WINBOOL fUnconnected,int num,IPin **ppPin) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct ICaptureGraphBuilder2Vtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(ICaptureGraphBuilder2 *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(ICaptureGraphBuilder2 *This);")
cpp_quote("      ULONG (WINAPI *Release)(ICaptureGraphBuilder2 *This);")
cpp_quote("      HRESULT (WINAPI *SetFiltergraph)(ICaptureGraphBuilder2 *This,IGraphBuilder *pfg);")
cpp_quote("      HRESULT (WINAPI *GetFiltergraph)(ICaptureGraphBuilder2 *This,IGraphBuilder **ppfg);")
cpp_quote("      HRESULT (WINAPI *SetOutputFileName)(ICaptureGraphBuilder2 *This,const GUID *pType,LPCOLESTR lpstrFile,IBaseFilter **ppf,IFileSinkFilter **ppSink);")
cpp_quote("      HRESULT (WINAPI *FindInterface)(ICaptureGraphBuilder2 *This,const GUID *pCategory,const GUID *pType,IBaseFilter *pf,REFIID riid,void **ppint);")
cpp_quote("      HRESULT (WINAPI *RenderStream)(ICaptureGraphBuilder2 *This,const GUID *pCategory,const GUID *pType,IUnknown *pSource,IBaseFilter *pfCompressor,IBaseFilter *pfRenderer);")
cpp_quote("      HRESULT (WINAPI *ControlStream)(ICaptureGraphBuilder2 *This,const GUID *pCategory,const GUID *pType,IBaseFilter *pFilter,REFERENCE_TIME *pstart,REFERENCE_TIME *pstop,WORD wStartCookie,WORD wStopCookie);")
cpp_quote("      HRESULT (WINAPI *AllocCapFile)(ICaptureGraphBuilder2 *This,LPCOLESTR lpstr,DWORDLONG dwlSize);")
cpp_quote("      HRESULT (WINAPI *CopyCaptureFile)(ICaptureGraphBuilder2 *This,LPOLESTR lpwstrOld,LPOLESTR lpwstrNew,int fAllowEscAbort,IAMCopyCaptureFileProgress *pCallback);")
cpp_quote("      HRESULT (WINAPI *FindPin)(ICaptureGraphBuilder2 *This,IUnknown *pSource,PIN_DIRECTION pindir,const GUID *pCategory,const GUID *pType,WINBOOL fUnconnected,int num,IPin **ppPin);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } ICaptureGraphBuilder2Vtbl;")
cpp_quote("  struct ICaptureGraphBuilder2 {")
cpp_quote("    CONST_VTBL struct ICaptureGraphBuilder2Vtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define ICaptureGraphBuilder2_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define ICaptureGraphBuilder2_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define ICaptureGraphBuilder2_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define ICaptureGraphBuilder2_SetFiltergraph(This,pfg) (This)->lpVtbl->SetFiltergraph(This,pfg)")
cpp_quote("#define ICaptureGraphBuilder2_GetFiltergraph(This,ppfg) (This)->lpVtbl->GetFiltergraph(This,ppfg)")
cpp_quote("#define ICaptureGraphBuilder2_SetOutputFileName(This,pType,lpstrFile,ppf,ppSink) (This)->lpVtbl->SetOutputFileName(This,pType,lpstrFile,ppf,ppSink)")
cpp_quote("#define ICaptureGraphBuilder2_FindInterface(This,pCategory,pType,pf,riid,ppint) (This)->lpVtbl->FindInterface(This,pCategory,pType,pf,riid,ppint)")
cpp_quote("#define ICaptureGraphBuilder2_RenderStream(This,pCategory,pType,pSource,pfCompressor,pfRenderer) (This)->lpVtbl->RenderStream(This,pCategory,pType,pSource,pfCompressor,pfRenderer)")
cpp_quote("#define ICaptureGraphBuilder2_ControlStream(This,pCategory,pType,pFilter,pstart,pstop,wStartCookie,wStopCookie) (This)->lpVtbl->ControlStream(This,pCategory,pType,pFilter,pstart,pstop,wStartCookie,wStopCookie)")
cpp_quote("#define ICaptureGraphBuilder2_AllocCapFile(This,lpstr,dwlSize) (This)->lpVtbl->AllocCapFile(This,lpstr,dwlSize)")
cpp_quote("#define ICaptureGraphBuilder2_CopyCaptureFile(This,lpwstrOld,lpwstrNew,fAllowEscAbort,pCallback) (This)->lpVtbl->CopyCaptureFile(This,lpwstrOld,lpwstrNew,fAllowEscAbort,pCallback)")
cpp_quote("#define ICaptureGraphBuilder2_FindPin(This,pSource,pindir,pCategory,pType,fUnconnected,num,ppPin) (This)->lpVtbl->FindPin(This,pSource,pindir,pCategory,pType,fUnconnected,num,ppPin)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI ICaptureGraphBuilder2_SetFiltergraph_Proxy(ICaptureGraphBuilder2 *This,IGraphBuilder *pfg);")
cpp_quote("  void __RPC_STUB ICaptureGraphBuilder2_SetFiltergraph_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI ICaptureGraphBuilder2_GetFiltergraph_Proxy(ICaptureGraphBuilder2 *This,IGraphBuilder **ppfg);")
cpp_quote("  void __RPC_STUB ICaptureGraphBuilder2_GetFiltergraph_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI ICaptureGraphBuilder2_SetOutputFileName_Proxy(ICaptureGraphBuilder2 *This,const GUID *pType,LPCOLESTR lpstrFile,IBaseFilter **ppf,IFileSinkFilter **ppSink);")
cpp_quote("  void __RPC_STUB ICaptureGraphBuilder2_SetOutputFileName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI ICaptureGraphBuilder2_RemoteFindInterface_Proxy(ICaptureGraphBuilder2 *This,const GUID *pCategory,const GUID *pType,IBaseFilter *pf,REFIID riid,IUnknown **ppint);")
cpp_quote("  void __RPC_STUB ICaptureGraphBuilder2_RemoteFindInterface_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI ICaptureGraphBuilder2_RenderStream_Proxy(ICaptureGraphBuilder2 *This,const GUID *pCategory,const GUID *pType,IUnknown *pSource,IBaseFilter *pfCompressor,IBaseFilter *pfRenderer);")
cpp_quote("  void __RPC_STUB ICaptureGraphBuilder2_RenderStream_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI ICaptureGraphBuilder2_ControlStream_Proxy(ICaptureGraphBuilder2 *This,const GUID *pCategory,const GUID *pType,IBaseFilter *pFilter,REFERENCE_TIME *pstart,REFERENCE_TIME *pstop,WORD wStartCookie,WORD wStopCookie);")
cpp_quote("  void __RPC_STUB ICaptureGraphBuilder2_ControlStream_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI ICaptureGraphBuilder2_AllocCapFile_Proxy(ICaptureGraphBuilder2 *This,LPCOLESTR lpstr,DWORDLONG dwlSize);")
cpp_quote("  void __RPC_STUB ICaptureGraphBuilder2_AllocCapFile_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI ICaptureGraphBuilder2_CopyCaptureFile_Proxy(ICaptureGraphBuilder2 *This,LPOLESTR lpwstrOld,LPOLESTR lpwstrNew,int fAllowEscAbort,IAMCopyCaptureFileProgress *pCallback);")
cpp_quote("  void __RPC_STUB ICaptureGraphBuilder2_CopyCaptureFile_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI ICaptureGraphBuilder2_FindPin_Proxy(ICaptureGraphBuilder2 *This,IUnknown *pSource,PIN_DIRECTION pindir,const GUID *pCategory,const GUID *pType,WINBOOL fUnconnected,int num,IPin **ppPin);")
cpp_quote("  void __RPC_STUB ICaptureGraphBuilder2_FindPin_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  enum _AM_RENSDEREXFLAGS {")
cpp_quote("    AM_RENDEREX_RENDERTOEXISTINGRENDERERS = 0x1")
cpp_quote("  };")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0153_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0153_v0_0_s_ifspec;")
cpp_quote("#ifndef __IFilterGraph2_INTERFACE_DEFINED__")
cpp_quote("#define __IFilterGraph2_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IFilterGraph2;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IFilterGraph2 : public IGraphBuilder {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI AddSourceFilterForMoniker(IMoniker *pMoniker,IBindCtx *pCtx,LPCWSTR lpcwstrFilterName,IBaseFilter **ppFilter) = 0;")
cpp_quote("    virtual HRESULT WINAPI ReconnectEx(IPin *ppin,const AM_MEDIA_TYPE *pmt) = 0;")
cpp_quote("    virtual HRESULT WINAPI RenderEx(IPin *pPinOut,DWORD dwFlags,DWORD *pvContext) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IFilterGraph2Vtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IFilterGraph2 *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IFilterGraph2 *This);")
cpp_quote("      ULONG (WINAPI *Release)(IFilterGraph2 *This);")
cpp_quote("      HRESULT (WINAPI *AddFilter)(IFilterGraph2 *This,IBaseFilter *pFilter,LPCWSTR pName);")
cpp_quote("      HRESULT (WINAPI *RemoveFilter)(IFilterGraph2 *This,IBaseFilter *pFilter);")
cpp_quote("      HRESULT (WINAPI *EnumFilters)(IFilterGraph2 *This,IEnumFilters **ppEnum);")
cpp_quote("      HRESULT (WINAPI *FindFilterByName)(IFilterGraph2 *This,LPCWSTR pName,IBaseFilter **ppFilter);")
cpp_quote("      HRESULT (WINAPI *ConnectDirect)(IFilterGraph2 *This,IPin *ppinOut,IPin *ppinIn,const AM_MEDIA_TYPE *pmt);")
cpp_quote("      HRESULT (WINAPI *Reconnect)(IFilterGraph2 *This,IPin *ppin);")
cpp_quote("      HRESULT (WINAPI *Disconnect)(IFilterGraph2 *This,IPin *ppin);")
cpp_quote("      HRESULT (WINAPI *SetDefaultSyncSource)(IFilterGraph2 *This);")
cpp_quote("      HRESULT (WINAPI *Connect)(IFilterGraph2 *This,IPin *ppinOut,IPin *ppinIn);")
cpp_quote("      HRESULT (WINAPI *Render)(IFilterGraph2 *This,IPin *ppinOut);")
cpp_quote("      HRESULT (WINAPI *RenderFile)(IFilterGraph2 *This,LPCWSTR lpcwstrFile,LPCWSTR lpcwstrPlayList);")
cpp_quote("      HRESULT (WINAPI *AddSourceFilter)(IFilterGraph2 *This,LPCWSTR lpcwstrFileName,LPCWSTR lpcwstrFilterName,IBaseFilter **ppFilter);")
cpp_quote("      HRESULT (WINAPI *SetLogFile)(IFilterGraph2 *This,DWORD_PTR hFile);")
cpp_quote("      HRESULT (WINAPI *Abort)(IFilterGraph2 *This);")
cpp_quote("      HRESULT (WINAPI *ShouldOperationContinue)(IFilterGraph2 *This);")
cpp_quote("      HRESULT (WINAPI *AddSourceFilterForMoniker)(IFilterGraph2 *This,IMoniker *pMoniker,IBindCtx *pCtx,LPCWSTR lpcwstrFilterName,IBaseFilter **ppFilter);")
cpp_quote("      HRESULT (WINAPI *ReconnectEx)(IFilterGraph2 *This,IPin *ppin,const AM_MEDIA_TYPE *pmt);")
cpp_quote("      HRESULT (WINAPI *RenderEx)(IFilterGraph2 *This,IPin *pPinOut,DWORD dwFlags,DWORD *pvContext);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IFilterGraph2Vtbl;")
cpp_quote("  struct IFilterGraph2 {")
cpp_quote("    CONST_VTBL struct IFilterGraph2Vtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IFilterGraph2_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IFilterGraph2_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IFilterGraph2_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IFilterGraph2_AddFilter(This,pFilter,pName) (This)->lpVtbl->AddFilter(This,pFilter,pName)")
cpp_quote("#define IFilterGraph2_RemoveFilter(This,pFilter) (This)->lpVtbl->RemoveFilter(This,pFilter)")
cpp_quote("#define IFilterGraph2_EnumFilters(This,ppEnum) (This)->lpVtbl->EnumFilters(This,ppEnum)")
cpp_quote("#define IFilterGraph2_FindFilterByName(This,pName,ppFilter) (This)->lpVtbl->FindFilterByName(This,pName,ppFilter)")
cpp_quote("#define IFilterGraph2_ConnectDirect(This,ppinOut,ppinIn,pmt) (This)->lpVtbl->ConnectDirect(This,ppinOut,ppinIn,pmt)")
cpp_quote("#define IFilterGraph2_Reconnect(This,ppin) (This)->lpVtbl->Reconnect(This,ppin)")
cpp_quote("#define IFilterGraph2_Disconnect(This,ppin) (This)->lpVtbl->Disconnect(This,ppin)")
cpp_quote("#define IFilterGraph2_SetDefaultSyncSource(This) (This)->lpVtbl->SetDefaultSyncSource(This)")
cpp_quote("#define IFilterGraph2_Connect(This,ppinOut,ppinIn) (This)->lpVtbl->Connect(This,ppinOut,ppinIn)")
cpp_quote("#define IFilterGraph2_Render(This,ppinOut) (This)->lpVtbl->Render(This,ppinOut)")
cpp_quote("#define IFilterGraph2_RenderFile(This,lpcwstrFile,lpcwstrPlayList) (This)->lpVtbl->RenderFile(This,lpcwstrFile,lpcwstrPlayList)")
cpp_quote("#define IFilterGraph2_AddSourceFilter(This,lpcwstrFileName,lpcwstrFilterName,ppFilter) (This)->lpVtbl->AddSourceFilter(This,lpcwstrFileName,lpcwstrFilterName,ppFilter)")
cpp_quote("#define IFilterGraph2_SetLogFile(This,hFile) (This)->lpVtbl->SetLogFile(This,hFile)")
cpp_quote("#define IFilterGraph2_Abort(This) (This)->lpVtbl->Abort(This)")
cpp_quote("#define IFilterGraph2_ShouldOperationContinue(This) (This)->lpVtbl->ShouldOperationContinue(This)")
cpp_quote("#define IFilterGraph2_AddSourceFilterForMoniker(This,pMoniker,pCtx,lpcwstrFilterName,ppFilter) (This)->lpVtbl->AddSourceFilterForMoniker(This,pMoniker,pCtx,lpcwstrFilterName,ppFilter)")
cpp_quote("#define IFilterGraph2_ReconnectEx(This,ppin,pmt) (This)->lpVtbl->ReconnectEx(This,ppin,pmt)")
cpp_quote("#define IFilterGraph2_RenderEx(This,pPinOut,dwFlags,pvContext) (This)->lpVtbl->RenderEx(This,pPinOut,dwFlags,pvContext)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IFilterGraph2_AddSourceFilterForMoniker_Proxy(IFilterGraph2 *This,IMoniker *pMoniker,IBindCtx *pCtx,LPCWSTR lpcwstrFilterName,IBaseFilter **ppFilter);")
cpp_quote("  void __RPC_STUB IFilterGraph2_AddSourceFilterForMoniker_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IFilterGraph2_ReconnectEx_Proxy(IFilterGraph2 *This,IPin *ppin,const AM_MEDIA_TYPE *pmt);")
cpp_quote("  void __RPC_STUB IFilterGraph2_ReconnectEx_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IFilterGraph2_RenderEx_Proxy(IFilterGraph2 *This,IPin *pPinOut,DWORD dwFlags,DWORD *pvContext);")
cpp_quote("  void __RPC_STUB IFilterGraph2_RenderEx_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IStreamBuilder_INTERFACE_DEFINED__")
cpp_quote("#define __IStreamBuilder_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IStreamBuilder;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IStreamBuilder : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI Render(IPin *ppinOut,IGraphBuilder *pGraph) = 0;")
cpp_quote("    virtual HRESULT WINAPI Backout(IPin *ppinOut,IGraphBuilder *pGraph) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IStreamBuilderVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IStreamBuilder *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IStreamBuilder *This);")
cpp_quote("      ULONG (WINAPI *Release)(IStreamBuilder *This);")
cpp_quote("      HRESULT (WINAPI *Render)(IStreamBuilder *This,IPin *ppinOut,IGraphBuilder *pGraph);")
cpp_quote("      HRESULT (WINAPI *Backout)(IStreamBuilder *This,IPin *ppinOut,IGraphBuilder *pGraph);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IStreamBuilderVtbl;")
cpp_quote("  struct IStreamBuilder {")
cpp_quote("    CONST_VTBL struct IStreamBuilderVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IStreamBuilder_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IStreamBuilder_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IStreamBuilder_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IStreamBuilder_Render(This,ppinOut,pGraph) (This)->lpVtbl->Render(This,ppinOut,pGraph)")
cpp_quote("#define IStreamBuilder_Backout(This,ppinOut,pGraph) (This)->lpVtbl->Backout(This,ppinOut,pGraph)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IStreamBuilder_Render_Proxy(IStreamBuilder *This,IPin *ppinOut,IGraphBuilder *pGraph);")
cpp_quote("  void __RPC_STUB IStreamBuilder_Render_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IStreamBuilder_Backout_Proxy(IStreamBuilder *This,IPin *ppinOut,IGraphBuilder *pGraph);")
cpp_quote("  void __RPC_STUB IStreamBuilder_Backout_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAsyncReader_INTERFACE_DEFINED__")
cpp_quote("#define __IAsyncReader_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IAsyncReader;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IAsyncReader : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI RequestAllocator(IMemAllocator *pPreferred,ALLOCATOR_PROPERTIES *pProps,IMemAllocator **ppActual) = 0;")
cpp_quote("    virtual HRESULT WINAPI Request(IMediaSample *pSample,DWORD_PTR dwUser) = 0;")
cpp_quote("    virtual HRESULT WINAPI WaitForNext(DWORD dwTimeout,IMediaSample **ppSample,DWORD_PTR *pdwUser) = 0;")
cpp_quote("    virtual HRESULT WINAPI SyncReadAligned(IMediaSample *pSample) = 0;")
cpp_quote("    virtual HRESULT WINAPI SyncRead(LONGLONG llPosition,LONG lLength,BYTE *pBuffer) = 0;")
cpp_quote("    virtual HRESULT WINAPI Length(LONGLONG *pTotal,LONGLONG *pAvailable) = 0;")
cpp_quote("    virtual HRESULT WINAPI BeginFlush(void) = 0;")
cpp_quote("    virtual HRESULT WINAPI EndFlush(void) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IAsyncReaderVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IAsyncReader *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IAsyncReader *This);")
cpp_quote("      ULONG (WINAPI *Release)(IAsyncReader *This);")
cpp_quote("      HRESULT (WINAPI *RequestAllocator)(IAsyncReader *This,IMemAllocator *pPreferred,ALLOCATOR_PROPERTIES *pProps,IMemAllocator **ppActual);")
cpp_quote("      HRESULT (WINAPI *Request)(IAsyncReader *This,IMediaSample *pSample,DWORD_PTR dwUser);")
cpp_quote("      HRESULT (WINAPI *WaitForNext)(IAsyncReader *This,DWORD dwTimeout,IMediaSample **ppSample,DWORD_PTR *pdwUser);")
cpp_quote("      HRESULT (WINAPI *SyncReadAligned)(IAsyncReader *This,IMediaSample *pSample);")
cpp_quote("      HRESULT (WINAPI *SyncRead)(IAsyncReader *This,LONGLONG llPosition,LONG lLength,BYTE *pBuffer);")
cpp_quote("      HRESULT (WINAPI *Length)(IAsyncReader *This,LONGLONG *pTotal,LONGLONG *pAvailable);")
cpp_quote("      HRESULT (WINAPI *BeginFlush)(IAsyncReader *This);")
cpp_quote("      HRESULT (WINAPI *EndFlush)(IAsyncReader *This);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IAsyncReaderVtbl;")
cpp_quote("  struct IAsyncReader {")
cpp_quote("    CONST_VTBL struct IAsyncReaderVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IAsyncReader_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IAsyncReader_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IAsyncReader_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IAsyncReader_RequestAllocator(This,pPreferred,pProps,ppActual) (This)->lpVtbl->RequestAllocator(This,pPreferred,pProps,ppActual)")
cpp_quote("#define IAsyncReader_Request(This,pSample,dwUser) (This)->lpVtbl->Request(This,pSample,dwUser)")
cpp_quote("#define IAsyncReader_WaitForNext(This,dwTimeout,ppSample,pdwUser) (This)->lpVtbl->WaitForNext(This,dwTimeout,ppSample,pdwUser)")
cpp_quote("#define IAsyncReader_SyncReadAligned(This,pSample) (This)->lpVtbl->SyncReadAligned(This,pSample)")
cpp_quote("#define IAsyncReader_SyncRead(This,llPosition,lLength,pBuffer) (This)->lpVtbl->SyncRead(This,llPosition,lLength,pBuffer)")
cpp_quote("#define IAsyncReader_Length(This,pTotal,pAvailable) (This)->lpVtbl->Length(This,pTotal,pAvailable)")
cpp_quote("#define IAsyncReader_BeginFlush(This) (This)->lpVtbl->BeginFlush(This)")
cpp_quote("#define IAsyncReader_EndFlush(This) (This)->lpVtbl->EndFlush(This)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IAsyncReader_RequestAllocator_Proxy(IAsyncReader *This,IMemAllocator *pPreferred,ALLOCATOR_PROPERTIES *pProps,IMemAllocator **ppActual);")
cpp_quote("  void __RPC_STUB IAsyncReader_RequestAllocator_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAsyncReader_Request_Proxy(IAsyncReader *This,IMediaSample *pSample,DWORD_PTR dwUser);")
cpp_quote("  void __RPC_STUB IAsyncReader_Request_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAsyncReader_WaitForNext_Proxy(IAsyncReader *This,DWORD dwTimeout,IMediaSample **ppSample,DWORD_PTR *pdwUser);")
cpp_quote("  void __RPC_STUB IAsyncReader_WaitForNext_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAsyncReader_SyncReadAligned_Proxy(IAsyncReader *This,IMediaSample *pSample);")
cpp_quote("  void __RPC_STUB IAsyncReader_SyncReadAligned_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAsyncReader_SyncRead_Proxy(IAsyncReader *This,LONGLONG llPosition,LONG lLength,BYTE *pBuffer);")
cpp_quote("  void __RPC_STUB IAsyncReader_SyncRead_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAsyncReader_Length_Proxy(IAsyncReader *This,LONGLONG *pTotal,LONGLONG *pAvailable);")
cpp_quote("  void __RPC_STUB IAsyncReader_Length_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAsyncReader_BeginFlush_Proxy(IAsyncReader *This);")
cpp_quote("  void __RPC_STUB IAsyncReader_BeginFlush_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAsyncReader_EndFlush_Proxy(IAsyncReader *This);")
cpp_quote("  void __RPC_STUB IAsyncReader_EndFlush_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IGraphVersion_INTERFACE_DEFINED__")
cpp_quote("#define __IGraphVersion_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IGraphVersion;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IGraphVersion : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI QueryVersion(LONG *pVersion) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IGraphVersionVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IGraphVersion *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IGraphVersion *This);")
cpp_quote("      ULONG (WINAPI *Release)(IGraphVersion *This);")
cpp_quote("      HRESULT (WINAPI *QueryVersion)(IGraphVersion *This,LONG *pVersion);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IGraphVersionVtbl;")
cpp_quote("  struct IGraphVersion {")
cpp_quote("    CONST_VTBL struct IGraphVersionVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IGraphVersion_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IGraphVersion_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IGraphVersion_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IGraphVersion_QueryVersion(This,pVersion) (This)->lpVtbl->QueryVersion(This,pVersion)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IGraphVersion_QueryVersion_Proxy(IGraphVersion *This,LONG *pVersion);")
cpp_quote("  void __RPC_STUB IGraphVersion_QueryVersion_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IResourceConsumer_INTERFACE_DEFINED__")
cpp_quote("#define __IResourceConsumer_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IResourceConsumer;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IResourceConsumer : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI AcquireResource(LONG idResource) = 0;")
cpp_quote("    virtual HRESULT WINAPI ReleaseResource(LONG idResource) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IResourceConsumerVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IResourceConsumer *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IResourceConsumer *This);")
cpp_quote("      ULONG (WINAPI *Release)(IResourceConsumer *This);")
cpp_quote("      HRESULT (WINAPI *AcquireResource)(IResourceConsumer *This,LONG idResource);")
cpp_quote("      HRESULT (WINAPI *ReleaseResource)(IResourceConsumer *This,LONG idResource);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IResourceConsumerVtbl;")
cpp_quote("  struct IResourceConsumer {")
cpp_quote("    CONST_VTBL struct IResourceConsumerVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IResourceConsumer_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IResourceConsumer_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IResourceConsumer_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IResourceConsumer_AcquireResource(This,idResource) (This)->lpVtbl->AcquireResource(This,idResource)")
cpp_quote("#define IResourceConsumer_ReleaseResource(This,idResource) (This)->lpVtbl->ReleaseResource(This,idResource)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IResourceConsumer_AcquireResource_Proxy(IResourceConsumer *This,LONG idResource);")
cpp_quote("  void __RPC_STUB IResourceConsumer_AcquireResource_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IResourceConsumer_ReleaseResource_Proxy(IResourceConsumer *This,LONG idResource);")
cpp_quote("  void __RPC_STUB IResourceConsumer_ReleaseResource_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IResourceManager_INTERFACE_DEFINED__")
cpp_quote("#define __IResourceManager_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IResourceManager;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IResourceManager : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI Register(LPCWSTR pName,LONG cResource,LONG *plToken) = 0;")
cpp_quote("    virtual HRESULT WINAPI RegisterGroup(LPCWSTR pName,LONG cResource,LONG *palTokens,LONG *plToken) = 0;")
cpp_quote("    virtual HRESULT WINAPI RequestResource(LONG idResource,IUnknown *pFocusObject,IResourceConsumer *pConsumer) = 0;")
cpp_quote("    virtual HRESULT WINAPI NotifyAcquire(LONG idResource,IResourceConsumer *pConsumer,HRESULT hr) = 0;")
cpp_quote("    virtual HRESULT WINAPI NotifyRelease(LONG idResource,IResourceConsumer *pConsumer,WINBOOL bStillWant) = 0;")
cpp_quote("    virtual HRESULT WINAPI CancelRequest(LONG idResource,IResourceConsumer *pConsumer) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetFocus(IUnknown *pFocusObject) = 0;")
cpp_quote("    virtual HRESULT WINAPI ReleaseFocus(IUnknown *pFocusObject) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IResourceManagerVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IResourceManager *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IResourceManager *This);")
cpp_quote("      ULONG (WINAPI *Release)(IResourceManager *This);")
cpp_quote("      HRESULT (WINAPI *Register)(IResourceManager *This,LPCWSTR pName,LONG cResource,LONG *plToken);")
cpp_quote("      HRESULT (WINAPI *RegisterGroup)(IResourceManager *This,LPCWSTR pName,LONG cResource,LONG *palTokens,LONG *plToken);")
cpp_quote("      HRESULT (WINAPI *RequestResource)(IResourceManager *This,LONG idResource,IUnknown *pFocusObject,IResourceConsumer *pConsumer);")
cpp_quote("      HRESULT (WINAPI *NotifyAcquire)(IResourceManager *This,LONG idResource,IResourceConsumer *pConsumer,HRESULT hr);")
cpp_quote("      HRESULT (WINAPI *NotifyRelease)(IResourceManager *This,LONG idResource,IResourceConsumer *pConsumer,WINBOOL bStillWant);")
cpp_quote("      HRESULT (WINAPI *CancelRequest)(IResourceManager *This,LONG idResource,IResourceConsumer *pConsumer);")
cpp_quote("      HRESULT (WINAPI *SetFocus)(IResourceManager *This,IUnknown *pFocusObject);")
cpp_quote("      HRESULT (WINAPI *ReleaseFocus)(IResourceManager *This,IUnknown *pFocusObject);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IResourceManagerVtbl;")
cpp_quote("  struct IResourceManager {")
cpp_quote("    CONST_VTBL struct IResourceManagerVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IResourceManager_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IResourceManager_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IResourceManager_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IResourceManager_Register(This,pName,cResource,plToken) (This)->lpVtbl->Register(This,pName,cResource,plToken)")
cpp_quote("#define IResourceManager_RegisterGroup(This,pName,cResource,palTokens,plToken) (This)->lpVtbl->RegisterGroup(This,pName,cResource,palTokens,plToken)")
cpp_quote("#define IResourceManager_RequestResource(This,idResource,pFocusObject,pConsumer) (This)->lpVtbl->RequestResource(This,idResource,pFocusObject,pConsumer)")
cpp_quote("#define IResourceManager_NotifyAcquire(This,idResource,pConsumer,hr) (This)->lpVtbl->NotifyAcquire(This,idResource,pConsumer,hr)")
cpp_quote("#define IResourceManager_NotifyRelease(This,idResource,pConsumer,bStillWant) (This)->lpVtbl->NotifyRelease(This,idResource,pConsumer,bStillWant)")
cpp_quote("#define IResourceManager_CancelRequest(This,idResource,pConsumer) (This)->lpVtbl->CancelRequest(This,idResource,pConsumer)")
cpp_quote("#define IResourceManager_SetFocus(This,pFocusObject) (This)->lpVtbl->SetFocus(This,pFocusObject)")
cpp_quote("#define IResourceManager_ReleaseFocus(This,pFocusObject) (This)->lpVtbl->ReleaseFocus(This,pFocusObject)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IResourceManager_Register_Proxy(IResourceManager *This,LPCWSTR pName,LONG cResource,LONG *plToken);")
cpp_quote("  void __RPC_STUB IResourceManager_Register_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IResourceManager_RegisterGroup_Proxy(IResourceManager *This,LPCWSTR pName,LONG cResource,LONG *palTokens,LONG *plToken);")
cpp_quote("  void __RPC_STUB IResourceManager_RegisterGroup_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IResourceManager_RequestResource_Proxy(IResourceManager *This,LONG idResource,IUnknown *pFocusObject,IResourceConsumer *pConsumer);")
cpp_quote("  void __RPC_STUB IResourceManager_RequestResource_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IResourceManager_NotifyAcquire_Proxy(IResourceManager *This,LONG idResource,IResourceConsumer *pConsumer,HRESULT hr);")
cpp_quote("  void __RPC_STUB IResourceManager_NotifyAcquire_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IResourceManager_NotifyRelease_Proxy(IResourceManager *This,LONG idResource,IResourceConsumer *pConsumer,WINBOOL bStillWant);")
cpp_quote("  void __RPC_STUB IResourceManager_NotifyRelease_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IResourceManager_CancelRequest_Proxy(IResourceManager *This,LONG idResource,IResourceConsumer *pConsumer);")
cpp_quote("  void __RPC_STUB IResourceManager_CancelRequest_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IResourceManager_SetFocus_Proxy(IResourceManager *This,IUnknown *pFocusObject);")
cpp_quote("  void __RPC_STUB IResourceManager_SetFocus_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IResourceManager_ReleaseFocus_Proxy(IResourceManager *This,IUnknown *pFocusObject);")
cpp_quote("  void __RPC_STUB IResourceManager_ReleaseFocus_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IDistributorNotify_INTERFACE_DEFINED__")
cpp_quote("#define __IDistributorNotify_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IDistributorNotify;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IDistributorNotify : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI Stop(void) = 0;")
cpp_quote("    virtual HRESULT WINAPI Pause(void) = 0;")
cpp_quote("    virtual HRESULT WINAPI Run(REFERENCE_TIME tStart) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetSyncSource(IReferenceClock *pClock) = 0;")
cpp_quote("    virtual HRESULT WINAPI NotifyGraphChange(void) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IDistributorNotifyVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IDistributorNotify *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IDistributorNotify *This);")
cpp_quote("      ULONG (WINAPI *Release)(IDistributorNotify *This);")
cpp_quote("      HRESULT (WINAPI *Stop)(IDistributorNotify *This);")
cpp_quote("      HRESULT (WINAPI *Pause)(IDistributorNotify *This);")
cpp_quote("      HRESULT (WINAPI *Run)(IDistributorNotify *This,REFERENCE_TIME tStart);")
cpp_quote("      HRESULT (WINAPI *SetSyncSource)(IDistributorNotify *This,IReferenceClock *pClock);")
cpp_quote("      HRESULT (WINAPI *NotifyGraphChange)(IDistributorNotify *This);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IDistributorNotifyVtbl;")
cpp_quote("  struct IDistributorNotify {")
cpp_quote("    CONST_VTBL struct IDistributorNotifyVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IDistributorNotify_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IDistributorNotify_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IDistributorNotify_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IDistributorNotify_Stop(This) (This)->lpVtbl->Stop(This)")
cpp_quote("#define IDistributorNotify_Pause(This) (This)->lpVtbl->Pause(This)")
cpp_quote("#define IDistributorNotify_Run(This,tStart) (This)->lpVtbl->Run(This,tStart)")
cpp_quote("#define IDistributorNotify_SetSyncSource(This,pClock) (This)->lpVtbl->SetSyncSource(This,pClock)")
cpp_quote("#define IDistributorNotify_NotifyGraphChange(This) (This)->lpVtbl->NotifyGraphChange(This)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IDistributorNotify_Stop_Proxy(IDistributorNotify *This);")
cpp_quote("  void __RPC_STUB IDistributorNotify_Stop_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDistributorNotify_Pause_Proxy(IDistributorNotify *This);")
cpp_quote("  void __RPC_STUB IDistributorNotify_Pause_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDistributorNotify_Run_Proxy(IDistributorNotify *This,REFERENCE_TIME tStart);")
cpp_quote("  void __RPC_STUB IDistributorNotify_Run_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDistributorNotify_SetSyncSource_Proxy(IDistributorNotify *This,IReferenceClock *pClock);")
cpp_quote("  void __RPC_STUB IDistributorNotify_SetSyncSource_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDistributorNotify_NotifyGraphChange_Proxy(IDistributorNotify *This);")
cpp_quote("  void __RPC_STUB IDistributorNotify_NotifyGraphChange_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  typedef enum __MIDL___MIDL_itf_strmif_0160_0001 {")
cpp_quote("    AM_STREAM_INFO_START_DEFINED = 0x1,AM_STREAM_INFO_STOP_DEFINED = 0x2,AM_STREAM_INFO_DISCARDING = 0x4,AM_STREAM_INFO_STOP_SEND_EXTRA = 0x10")
cpp_quote("  } AM_STREAM_INFO_FLAGS;")
cpp_quote("")
cpp_quote("  typedef struct __MIDL___MIDL_itf_strmif_0160_0002 {")
cpp_quote("    REFERENCE_TIME tStart;")
cpp_quote("    REFERENCE_TIME tStop;")
cpp_quote("    DWORD dwStartCookie;")
cpp_quote("    DWORD dwStopCookie;")
cpp_quote("    DWORD dwFlags;")
cpp_quote("  } AM_STREAM_INFO;")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0160_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0160_v0_0_s_ifspec;")
cpp_quote("#ifndef __IAMStreamControl_INTERFACE_DEFINED__")
cpp_quote("#define __IAMStreamControl_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IAMStreamControl;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IAMStreamControl : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI StartAt(const REFERENCE_TIME *ptStart,DWORD dwCookie) = 0;")
cpp_quote("    virtual HRESULT WINAPI StopAt(const REFERENCE_TIME *ptStop,WINBOOL bSendExtra,DWORD dwCookie) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetInfo(AM_STREAM_INFO *pInfo) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IAMStreamControlVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IAMStreamControl *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IAMStreamControl *This);")
cpp_quote("      ULONG (WINAPI *Release)(IAMStreamControl *This);")
cpp_quote("      HRESULT (WINAPI *StartAt)(IAMStreamControl *This,const REFERENCE_TIME *ptStart,DWORD dwCookie);")
cpp_quote("      HRESULT (WINAPI *StopAt)(IAMStreamControl *This,const REFERENCE_TIME *ptStop,WINBOOL bSendExtra,DWORD dwCookie);")
cpp_quote("      HRESULT (WINAPI *GetInfo)(IAMStreamControl *This,AM_STREAM_INFO *pInfo);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IAMStreamControlVtbl;")
cpp_quote("  struct IAMStreamControl {")
cpp_quote("    CONST_VTBL struct IAMStreamControlVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IAMStreamControl_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IAMStreamControl_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IAMStreamControl_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IAMStreamControl_StartAt(This,ptStart,dwCookie) (This)->lpVtbl->StartAt(This,ptStart,dwCookie)")
cpp_quote("#define IAMStreamControl_StopAt(This,ptStop,bSendExtra,dwCookie) (This)->lpVtbl->StopAt(This,ptStop,bSendExtra,dwCookie)")
cpp_quote("#define IAMStreamControl_GetInfo(This,pInfo) (This)->lpVtbl->GetInfo(This,pInfo)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IAMStreamControl_StartAt_Proxy(IAMStreamControl *This,const REFERENCE_TIME *ptStart,DWORD dwCookie);")
cpp_quote("  void __RPC_STUB IAMStreamControl_StartAt_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMStreamControl_StopAt_Proxy(IAMStreamControl *This,const REFERENCE_TIME *ptStop,WINBOOL bSendExtra,DWORD dwCookie);")
cpp_quote("  void __RPC_STUB IAMStreamControl_StopAt_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMStreamControl_GetInfo_Proxy(IAMStreamControl *This,AM_STREAM_INFO *pInfo);")
cpp_quote("  void __RPC_STUB IAMStreamControl_GetInfo_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __ISeekingPassThru_INTERFACE_DEFINED__")
cpp_quote("#define __ISeekingPassThru_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_ISeekingPassThru;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct ISeekingPassThru : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI Init(WINBOOL bSupportRendering,IPin *pPin) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct ISeekingPassThruVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(ISeekingPassThru *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(ISeekingPassThru *This);")
cpp_quote("      ULONG (WINAPI *Release)(ISeekingPassThru *This);")
cpp_quote("      HRESULT (WINAPI *Init)(ISeekingPassThru *This,WINBOOL bSupportRendering,IPin *pPin);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } ISeekingPassThruVtbl;")
cpp_quote("  struct ISeekingPassThru {")
cpp_quote("    CONST_VTBL struct ISeekingPassThruVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define ISeekingPassThru_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define ISeekingPassThru_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define ISeekingPassThru_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define ISeekingPassThru_Init(This,bSupportRendering,pPin) (This)->lpVtbl->Init(This,bSupportRendering,pPin)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI ISeekingPassThru_Init_Proxy(ISeekingPassThru *This,WINBOOL bSupportRendering,IPin *pPin);")
cpp_quote("  void __RPC_STUB ISeekingPassThru_Init_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMStreamConfig_INTERFACE_DEFINED__")
cpp_quote("#define __IAMStreamConfig_INTERFACE_DEFINED__")
cpp_quote("  typedef struct _VIDEO_STREAM_CONFIG_CAPS {")
cpp_quote("    GUID guid;")
cpp_quote("    ULONG VideoStandard;")
cpp_quote("    SIZE InputSize;")
cpp_quote("    SIZE MinCroppingSize;")
cpp_quote("    SIZE MaxCroppingSize;")
cpp_quote("    int CropGranularityX;")
cpp_quote("    int CropGranularityY;")
cpp_quote("    int CropAlignX;")
cpp_quote("    int CropAlignY;")
cpp_quote("    SIZE MinOutputSize;")
cpp_quote("    SIZE MaxOutputSize;")
cpp_quote("    int OutputGranularityX;")
cpp_quote("    int OutputGranularityY;")
cpp_quote("    int StretchTapsX;")
cpp_quote("    int StretchTapsY;")
cpp_quote("    int ShrinkTapsX;")
cpp_quote("    int ShrinkTapsY;")
cpp_quote("    LONGLONG MinFrameInterval;")
cpp_quote("    LONGLONG MaxFrameInterval;")
cpp_quote("    LONG MinBitsPerSecond;")
cpp_quote("    LONG MaxBitsPerSecond;")
cpp_quote("  } VIDEO_STREAM_CONFIG_CAPS;")
cpp_quote("")
cpp_quote("  typedef struct _AUDIO_STREAM_CONFIG_CAPS {")
cpp_quote("    GUID guid;")
cpp_quote("    ULONG MinimumChannels;")
cpp_quote("    ULONG MaximumChannels;")
cpp_quote("    ULONG ChannelsGranularity;")
cpp_quote("    ULONG MinimumBitsPerSample;")
cpp_quote("    ULONG MaximumBitsPerSample;")
cpp_quote("    ULONG BitsPerSampleGranularity;")
cpp_quote("    ULONG MinimumSampleFrequency;")
cpp_quote("    ULONG MaximumSampleFrequency;")
cpp_quote("    ULONG SampleFrequencyGranularity;")
cpp_quote("  } AUDIO_STREAM_CONFIG_CAPS;")
cpp_quote("")
cpp_quote("  EXTERN_C const IID IID_IAMStreamConfig;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IAMStreamConfig : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI SetFormat(AM_MEDIA_TYPE *pmt) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetFormat(AM_MEDIA_TYPE **ppmt) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetNumberOfCapabilities(int *piCount,int *piSize) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetStreamCaps(int iIndex,AM_MEDIA_TYPE **ppmt,BYTE *pSCC) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IAMStreamConfigVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IAMStreamConfig *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IAMStreamConfig *This);")
cpp_quote("      ULONG (WINAPI *Release)(IAMStreamConfig *This);")
cpp_quote("      HRESULT (WINAPI *SetFormat)(IAMStreamConfig *This,AM_MEDIA_TYPE *pmt);")
cpp_quote("      HRESULT (WINAPI *GetFormat)(IAMStreamConfig *This,AM_MEDIA_TYPE **ppmt);")
cpp_quote("      HRESULT (WINAPI *GetNumberOfCapabilities)(IAMStreamConfig *This,int *piCount,int *piSize);")
cpp_quote("      HRESULT (WINAPI *GetStreamCaps)(IAMStreamConfig *This,int iIndex,AM_MEDIA_TYPE **ppmt,BYTE *pSCC);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IAMStreamConfigVtbl;")
cpp_quote("  struct IAMStreamConfig {")
cpp_quote("    CONST_VTBL struct IAMStreamConfigVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IAMStreamConfig_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IAMStreamConfig_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IAMStreamConfig_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IAMStreamConfig_SetFormat(This,pmt) (This)->lpVtbl->SetFormat(This,pmt)")
cpp_quote("#define IAMStreamConfig_GetFormat(This,ppmt) (This)->lpVtbl->GetFormat(This,ppmt)")
cpp_quote("#define IAMStreamConfig_GetNumberOfCapabilities(This,piCount,piSize) (This)->lpVtbl->GetNumberOfCapabilities(This,piCount,piSize)")
cpp_quote("#define IAMStreamConfig_GetStreamCaps(This,iIndex,ppmt,pSCC) (This)->lpVtbl->GetStreamCaps(This,iIndex,ppmt,pSCC)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IAMStreamConfig_SetFormat_Proxy(IAMStreamConfig *This,AM_MEDIA_TYPE *pmt);")
cpp_quote("  void __RPC_STUB IAMStreamConfig_SetFormat_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMStreamConfig_GetFormat_Proxy(IAMStreamConfig *This,AM_MEDIA_TYPE **ppmt);")
cpp_quote("  void __RPC_STUB IAMStreamConfig_GetFormat_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMStreamConfig_GetNumberOfCapabilities_Proxy(IAMStreamConfig *This,int *piCount,int *piSize);")
cpp_quote("  void __RPC_STUB IAMStreamConfig_GetNumberOfCapabilities_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMStreamConfig_GetStreamCaps_Proxy(IAMStreamConfig *This,int iIndex,AM_MEDIA_TYPE **ppmt,BYTE *pSCC);")
cpp_quote("  void __RPC_STUB IAMStreamConfig_GetStreamCaps_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IConfigInterleaving_INTERFACE_DEFINED__")
cpp_quote("#define __IConfigInterleaving_INTERFACE_DEFINED__")
cpp_quote("  typedef enum __MIDL_IConfigInterleaving_0001 {")
cpp_quote("    INTERLEAVE_NONE = 0,")
cpp_quote("    INTERLEAVE_CAPTURE,INTERLEAVE_FULL,INTERLEAVE_NONE_BUFFERED")
cpp_quote("  } InterleavingMode;")
cpp_quote("")
cpp_quote("  EXTERN_C const IID IID_IConfigInterleaving;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IConfigInterleaving : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI put_Mode(InterleavingMode mode) = 0;")
cpp_quote("    virtual HRESULT WINAPI get_Mode(InterleavingMode *pMode) = 0;")
cpp_quote("    virtual HRESULT WINAPI put_Interleaving(const REFERENCE_TIME *prtInterleave,const REFERENCE_TIME *prtPreroll) = 0;")
cpp_quote("    virtual HRESULT WINAPI get_Interleaving(REFERENCE_TIME *prtInterleave,REFERENCE_TIME *prtPreroll) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IConfigInterleavingVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IConfigInterleaving *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IConfigInterleaving *This);")
cpp_quote("      ULONG (WINAPI *Release)(IConfigInterleaving *This);")
cpp_quote("      HRESULT (WINAPI *put_Mode)(IConfigInterleaving *This,InterleavingMode mode);")
cpp_quote("      HRESULT (WINAPI *get_Mode)(IConfigInterleaving *This,InterleavingMode *pMode);")
cpp_quote("      HRESULT (WINAPI *put_Interleaving)(IConfigInterleaving *This,const REFERENCE_TIME *prtInterleave,const REFERENCE_TIME *prtPreroll);")
cpp_quote("      HRESULT (WINAPI *get_Interleaving)(IConfigInterleaving *This,REFERENCE_TIME *prtInterleave,REFERENCE_TIME *prtPreroll);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IConfigInterleavingVtbl;")
cpp_quote("  struct IConfigInterleaving {")
cpp_quote("    CONST_VTBL struct IConfigInterleavingVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IConfigInterleaving_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IConfigInterleaving_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IConfigInterleaving_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IConfigInterleaving_put_Mode(This,mode) (This)->lpVtbl->put_Mode(This,mode)")
cpp_quote("#define IConfigInterleaving_get_Mode(This,pMode) (This)->lpVtbl->get_Mode(This,pMode)")
cpp_quote("#define IConfigInterleaving_put_Interleaving(This,prtInterleave,prtPreroll) (This)->lpVtbl->put_Interleaving(This,prtInterleave,prtPreroll)")
cpp_quote("#define IConfigInterleaving_get_Interleaving(This,prtInterleave,prtPreroll) (This)->lpVtbl->get_Interleaving(This,prtInterleave,prtPreroll)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IConfigInterleaving_put_Mode_Proxy(IConfigInterleaving *This,InterleavingMode mode);")
cpp_quote("  void __RPC_STUB IConfigInterleaving_put_Mode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IConfigInterleaving_get_Mode_Proxy(IConfigInterleaving *This,InterleavingMode *pMode);")
cpp_quote("  void __RPC_STUB IConfigInterleaving_get_Mode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IConfigInterleaving_put_Interleaving_Proxy(IConfigInterleaving *This,const REFERENCE_TIME *prtInterleave,const REFERENCE_TIME *prtPreroll);")
cpp_quote("  void __RPC_STUB IConfigInterleaving_put_Interleaving_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IConfigInterleaving_get_Interleaving_Proxy(IConfigInterleaving *This,REFERENCE_TIME *prtInterleave,REFERENCE_TIME *prtPreroll);")
cpp_quote("  void __RPC_STUB IConfigInterleaving_get_Interleaving_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IConfigAviMux_INTERFACE_DEFINED__")
cpp_quote("#define __IConfigAviMux_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IConfigAviMux;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IConfigAviMux : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI SetMasterStream(LONG iStream) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetMasterStream(LONG *pStream) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetOutputCompatibilityIndex(WINBOOL fOldIndex) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetOutputCompatibilityIndex(WINBOOL *pfOldIndex) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IConfigAviMuxVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IConfigAviMux *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IConfigAviMux *This);")
cpp_quote("      ULONG (WINAPI *Release)(IConfigAviMux *This);")
cpp_quote("      HRESULT (WINAPI *SetMasterStream)(IConfigAviMux *This,LONG iStream);")
cpp_quote("      HRESULT (WINAPI *GetMasterStream)(IConfigAviMux *This,LONG *pStream);")
cpp_quote("      HRESULT (WINAPI *SetOutputCompatibilityIndex)(IConfigAviMux *This,WINBOOL fOldIndex);")
cpp_quote("      HRESULT (WINAPI *GetOutputCompatibilityIndex)(IConfigAviMux *This,WINBOOL *pfOldIndex);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IConfigAviMuxVtbl;")
cpp_quote("  struct IConfigAviMux {")
cpp_quote("    CONST_VTBL struct IConfigAviMuxVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IConfigAviMux_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IConfigAviMux_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IConfigAviMux_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IConfigAviMux_SetMasterStream(This,iStream) (This)->lpVtbl->SetMasterStream(This,iStream)")
cpp_quote("#define IConfigAviMux_GetMasterStream(This,pStream) (This)->lpVtbl->GetMasterStream(This,pStream)")
cpp_quote("#define IConfigAviMux_SetOutputCompatibilityIndex(This,fOldIndex) (This)->lpVtbl->SetOutputCompatibilityIndex(This,fOldIndex)")
cpp_quote("#define IConfigAviMux_GetOutputCompatibilityIndex(This,pfOldIndex) (This)->lpVtbl->GetOutputCompatibilityIndex(This,pfOldIndex)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IConfigAviMux_SetMasterStream_Proxy(IConfigAviMux *This,LONG iStream);")
cpp_quote("  void __RPC_STUB IConfigAviMux_SetMasterStream_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IConfigAviMux_GetMasterStream_Proxy(IConfigAviMux *This,LONG *pStream);")
cpp_quote("  void __RPC_STUB IConfigAviMux_GetMasterStream_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IConfigAviMux_SetOutputCompatibilityIndex_Proxy(IConfigAviMux *This,WINBOOL fOldIndex);")
cpp_quote("  void __RPC_STUB IConfigAviMux_SetOutputCompatibilityIndex_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IConfigAviMux_GetOutputCompatibilityIndex_Proxy(IConfigAviMux *This,WINBOOL *pfOldIndex);")
cpp_quote("  void __RPC_STUB IConfigAviMux_GetOutputCompatibilityIndex_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  typedef enum __MIDL___MIDL_itf_strmif_0167_0001 {")
cpp_quote("    CompressionCaps_CanQuality = 0x1,CompressionCaps_CanCrunch = 0x2,CompressionCaps_CanKeyFrame = 0x4,CompressionCaps_CanBFrame = 0x8,")
cpp_quote("    CompressionCaps_CanWindow = 0x10")
cpp_quote("  } CompressionCaps;")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0167_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0167_v0_0_s_ifspec;")
cpp_quote("#ifndef __IAMVideoCompression_INTERFACE_DEFINED__")
cpp_quote("#define __IAMVideoCompression_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IAMVideoCompression;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IAMVideoCompression : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI put_KeyFrameRate(long KeyFrameRate) = 0;")
cpp_quote("    virtual HRESULT WINAPI get_KeyFrameRate(long *pKeyFrameRate) = 0;")
cpp_quote("    virtual HRESULT WINAPI put_PFramesPerKeyFrame(long PFramesPerKeyFrame) = 0;")
cpp_quote("    virtual HRESULT WINAPI get_PFramesPerKeyFrame(long *pPFramesPerKeyFrame) = 0;")
cpp_quote("    virtual HRESULT WINAPI put_Quality(double Quality) = 0;")
cpp_quote("    virtual HRESULT WINAPI get_Quality(double *pQuality) = 0;")
cpp_quote("    virtual HRESULT WINAPI put_WindowSize(DWORDLONG WindowSize) = 0;")
cpp_quote("    virtual HRESULT WINAPI get_WindowSize(DWORDLONG *pWindowSize) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetInfo(WCHAR *pszVersion,int *pcbVersion,LPWSTR pszDescription,int *pcbDescription,long *pDefaultKeyFrameRate,long *pDefaultPFramesPerKey,double *pDefaultQuality,long *pCapabilities) = 0;")
cpp_quote("    virtual HRESULT WINAPI OverrideKeyFrame(long FrameNumber) = 0;")
cpp_quote("    virtual HRESULT WINAPI OverrideFrameSize(long FrameNumber,long Size) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IAMVideoCompressionVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IAMVideoCompression *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IAMVideoCompression *This);")
cpp_quote("      ULONG (WINAPI *Release)(IAMVideoCompression *This);")
cpp_quote("      HRESULT (WINAPI *put_KeyFrameRate)(IAMVideoCompression *This,long KeyFrameRate);")
cpp_quote("      HRESULT (WINAPI *get_KeyFrameRate)(IAMVideoCompression *This,long *pKeyFrameRate);")
cpp_quote("      HRESULT (WINAPI *put_PFramesPerKeyFrame)(IAMVideoCompression *This,long PFramesPerKeyFrame);")
cpp_quote("      HRESULT (WINAPI *get_PFramesPerKeyFrame)(IAMVideoCompression *This,long *pPFramesPerKeyFrame);")
cpp_quote("      HRESULT (WINAPI *put_Quality)(IAMVideoCompression *This,double Quality);")
cpp_quote("      HRESULT (WINAPI *get_Quality)(IAMVideoCompression *This,double *pQuality);")
cpp_quote("      HRESULT (WINAPI *put_WindowSize)(IAMVideoCompression *This,DWORDLONG WindowSize);")
cpp_quote("      HRESULT (WINAPI *get_WindowSize)(IAMVideoCompression *This,DWORDLONG *pWindowSize);")
cpp_quote("      HRESULT (WINAPI *GetInfo)(IAMVideoCompression *This,WCHAR *pszVersion,int *pcbVersion,LPWSTR pszDescription,int *pcbDescription,long *pDefaultKeyFrameRate,long *pDefaultPFramesPerKey,double *pDefaultQuality,long *pCapabilities);")
cpp_quote("      HRESULT (WINAPI *OverrideKeyFrame)(IAMVideoCompression *This,long FrameNumber);")
cpp_quote("      HRESULT (WINAPI *OverrideFrameSize)(IAMVideoCompression *This,long FrameNumber,long Size);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IAMVideoCompressionVtbl;")
cpp_quote("  struct IAMVideoCompression {")
cpp_quote("    CONST_VTBL struct IAMVideoCompressionVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IAMVideoCompression_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IAMVideoCompression_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IAMVideoCompression_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IAMVideoCompression_put_KeyFrameRate(This,KeyFrameRate) (This)->lpVtbl->put_KeyFrameRate(This,KeyFrameRate)")
cpp_quote("#define IAMVideoCompression_get_KeyFrameRate(This,pKeyFrameRate) (This)->lpVtbl->get_KeyFrameRate(This,pKeyFrameRate)")
cpp_quote("#define IAMVideoCompression_put_PFramesPerKeyFrame(This,PFramesPerKeyFrame) (This)->lpVtbl->put_PFramesPerKeyFrame(This,PFramesPerKeyFrame)")
cpp_quote("#define IAMVideoCompression_get_PFramesPerKeyFrame(This,pPFramesPerKeyFrame) (This)->lpVtbl->get_PFramesPerKeyFrame(This,pPFramesPerKeyFrame)")
cpp_quote("#define IAMVideoCompression_put_Quality(This,Quality) (This)->lpVtbl->put_Quality(This,Quality)")
cpp_quote("#define IAMVideoCompression_get_Quality(This,pQuality) (This)->lpVtbl->get_Quality(This,pQuality)")
cpp_quote("#define IAMVideoCompression_put_WindowSize(This,WindowSize) (This)->lpVtbl->put_WindowSize(This,WindowSize)")
cpp_quote("#define IAMVideoCompression_get_WindowSize(This,pWindowSize) (This)->lpVtbl->get_WindowSize(This,pWindowSize)")
cpp_quote("#define IAMVideoCompression_GetInfo(This,pszVersion,pcbVersion,pszDescription,pcbDescription,pDefaultKeyFrameRate,pDefaultPFramesPerKey,pDefaultQuality,pCapabilities) (This)->lpVtbl->GetInfo(This,pszVersion,pcbVersion,pszDescription,pcbDescription,pDefaultKeyFrameRate,pDefaultPFramesPerKey,pDefaultQuality,pCapabilities)")
cpp_quote("#define IAMVideoCompression_OverrideKeyFrame(This,FrameNumber) (This)->lpVtbl->OverrideKeyFrame(This,FrameNumber)")
cpp_quote("#define IAMVideoCompression_OverrideFrameSize(This,FrameNumber,Size) (This)->lpVtbl->OverrideFrameSize(This,FrameNumber,Size)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IAMVideoCompression_put_KeyFrameRate_Proxy(IAMVideoCompression *This,long KeyFrameRate);")
cpp_quote("  void __RPC_STUB IAMVideoCompression_put_KeyFrameRate_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMVideoCompression_get_KeyFrameRate_Proxy(IAMVideoCompression *This,long *pKeyFrameRate);")
cpp_quote("  void __RPC_STUB IAMVideoCompression_get_KeyFrameRate_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMVideoCompression_put_PFramesPerKeyFrame_Proxy(IAMVideoCompression *This,long PFramesPerKeyFrame);")
cpp_quote("  void __RPC_STUB IAMVideoCompression_put_PFramesPerKeyFrame_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMVideoCompression_get_PFramesPerKeyFrame_Proxy(IAMVideoCompression *This,long *pPFramesPerKeyFrame);")
cpp_quote("  void __RPC_STUB IAMVideoCompression_get_PFramesPerKeyFrame_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMVideoCompression_put_Quality_Proxy(IAMVideoCompression *This,double Quality);")
cpp_quote("  void __RPC_STUB IAMVideoCompression_put_Quality_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMVideoCompression_get_Quality_Proxy(IAMVideoCompression *This,double *pQuality);")
cpp_quote("  void __RPC_STUB IAMVideoCompression_get_Quality_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMVideoCompression_put_WindowSize_Proxy(IAMVideoCompression *This,DWORDLONG WindowSize);")
cpp_quote("  void __RPC_STUB IAMVideoCompression_put_WindowSize_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMVideoCompression_get_WindowSize_Proxy(IAMVideoCompression *This,DWORDLONG *pWindowSize);")
cpp_quote("  void __RPC_STUB IAMVideoCompression_get_WindowSize_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMVideoCompression_GetInfo_Proxy(IAMVideoCompression *This,WCHAR *pszVersion,int *pcbVersion,LPWSTR pszDescription,int *pcbDescription,long *pDefaultKeyFrameRate,long *pDefaultPFramesPerKey,double *pDefaultQuality,long *pCapabilities);")
cpp_quote("  void __RPC_STUB IAMVideoCompression_GetInfo_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMVideoCompression_OverrideKeyFrame_Proxy(IAMVideoCompression *This,long FrameNumber);")
cpp_quote("  void __RPC_STUB IAMVideoCompression_OverrideKeyFrame_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMVideoCompression_OverrideFrameSize_Proxy(IAMVideoCompression *This,long FrameNumber,long Size);")
cpp_quote("  void __RPC_STUB IAMVideoCompression_OverrideFrameSize_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  typedef enum __MIDL___MIDL_itf_strmif_0168_0001 {")
cpp_quote("    VfwCaptureDialog_Source = 0x1,VfwCaptureDialog_Format = 0x2,VfwCaptureDialog_Display = 0x4")
cpp_quote("  } VfwCaptureDialogs;")
cpp_quote("")
cpp_quote("  typedef enum __MIDL___MIDL_itf_strmif_0168_0002 {")
cpp_quote("    VfwCompressDialog_Config = 0x1,VfwCompressDialog_About = 0x2,VfwCompressDialog_QueryConfig = 0x4,VfwCompressDialog_QueryAbout = 0x8")
cpp_quote("  } VfwCompressDialogs;")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0168_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0168_v0_0_s_ifspec;")
cpp_quote("#ifndef __IAMVfwCaptureDialogs_INTERFACE_DEFINED__")
cpp_quote("#define __IAMVfwCaptureDialogs_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IAMVfwCaptureDialogs;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IAMVfwCaptureDialogs : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI HasDialog(int iDialog) = 0;")
cpp_quote("    virtual HRESULT WINAPI ShowDialog(int iDialog,HWND hwnd) = 0;")
cpp_quote("    virtual HRESULT WINAPI SendDriverMessage(int iDialog,int uMsg,long dw1,long dw2) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IAMVfwCaptureDialogsVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IAMVfwCaptureDialogs *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IAMVfwCaptureDialogs *This);")
cpp_quote("      ULONG (WINAPI *Release)(IAMVfwCaptureDialogs *This);")
cpp_quote("      HRESULT (WINAPI *HasDialog)(IAMVfwCaptureDialogs *This,int iDialog);")
cpp_quote("      HRESULT (WINAPI *ShowDialog)(IAMVfwCaptureDialogs *This,int iDialog,HWND hwnd);")
cpp_quote("      HRESULT (WINAPI *SendDriverMessage)(IAMVfwCaptureDialogs *This,int iDialog,int uMsg,long dw1,long dw2);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IAMVfwCaptureDialogsVtbl;")
cpp_quote("  struct IAMVfwCaptureDialogs {")
cpp_quote("    CONST_VTBL struct IAMVfwCaptureDialogsVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IAMVfwCaptureDialogs_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IAMVfwCaptureDialogs_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IAMVfwCaptureDialogs_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IAMVfwCaptureDialogs_HasDialog(This,iDialog) (This)->lpVtbl->HasDialog(This,iDialog)")
cpp_quote("#define IAMVfwCaptureDialogs_ShowDialog(This,iDialog,hwnd) (This)->lpVtbl->ShowDialog(This,iDialog,hwnd)")
cpp_quote("#define IAMVfwCaptureDialogs_SendDriverMessage(This,iDialog,uMsg,dw1,dw2) (This)->lpVtbl->SendDriverMessage(This,iDialog,uMsg,dw1,dw2)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IAMVfwCaptureDialogs_HasDialog_Proxy(IAMVfwCaptureDialogs *This,int iDialog);")
cpp_quote("  void __RPC_STUB IAMVfwCaptureDialogs_HasDialog_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMVfwCaptureDialogs_ShowDialog_Proxy(IAMVfwCaptureDialogs *This,int iDialog,HWND hwnd);")
cpp_quote("  void __RPC_STUB IAMVfwCaptureDialogs_ShowDialog_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMVfwCaptureDialogs_SendDriverMessage_Proxy(IAMVfwCaptureDialogs *This,int iDialog,int uMsg,long dw1,long dw2);")
cpp_quote("  void __RPC_STUB IAMVfwCaptureDialogs_SendDriverMessage_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMVfwCompressDialogs_INTERFACE_DEFINED__")
cpp_quote("#define __IAMVfwCompressDialogs_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IAMVfwCompressDialogs;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IAMVfwCompressDialogs : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI ShowDialog(int iDialog,HWND hwnd) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetState(LPVOID pState,int *pcbState) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetState(LPVOID pState,int cbState) = 0;")
cpp_quote("    virtual HRESULT WINAPI SendDriverMessage(int uMsg,long dw1,long dw2) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IAMVfwCompressDialogsVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IAMVfwCompressDialogs *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IAMVfwCompressDialogs *This);")
cpp_quote("      ULONG (WINAPI *Release)(IAMVfwCompressDialogs *This);")
cpp_quote("      HRESULT (WINAPI *ShowDialog)(IAMVfwCompressDialogs *This,int iDialog,HWND hwnd);")
cpp_quote("      HRESULT (WINAPI *GetState)(IAMVfwCompressDialogs *This,LPVOID pState,int *pcbState);")
cpp_quote("      HRESULT (WINAPI *SetState)(IAMVfwCompressDialogs *This,LPVOID pState,int cbState);")
cpp_quote("      HRESULT (WINAPI *SendDriverMessage)(IAMVfwCompressDialogs *This,int uMsg,long dw1,long dw2);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IAMVfwCompressDialogsVtbl;")
cpp_quote("  struct IAMVfwCompressDialogs {")
cpp_quote("    CONST_VTBL struct IAMVfwCompressDialogsVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IAMVfwCompressDialogs_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IAMVfwCompressDialogs_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IAMVfwCompressDialogs_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IAMVfwCompressDialogs_ShowDialog(This,iDialog,hwnd) (This)->lpVtbl->ShowDialog(This,iDialog,hwnd)")
cpp_quote("#define IAMVfwCompressDialogs_GetState(This,pState,pcbState) (This)->lpVtbl->GetState(This,pState,pcbState)")
cpp_quote("#define IAMVfwCompressDialogs_SetState(This,pState,cbState) (This)->lpVtbl->SetState(This,pState,cbState)")
cpp_quote("#define IAMVfwCompressDialogs_SendDriverMessage(This,uMsg,dw1,dw2) (This)->lpVtbl->SendDriverMessage(This,uMsg,dw1,dw2)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IAMVfwCompressDialogs_ShowDialog_Proxy(IAMVfwCompressDialogs *This,int iDialog,HWND hwnd);")
cpp_quote("  void __RPC_STUB IAMVfwCompressDialogs_ShowDialog_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMVfwCompressDialogs_GetState_Proxy(IAMVfwCompressDialogs *This,LPVOID pState,int *pcbState);")
cpp_quote("  void __RPC_STUB IAMVfwCompressDialogs_GetState_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMVfwCompressDialogs_SetState_Proxy(IAMVfwCompressDialogs *This,LPVOID pState,int cbState);")
cpp_quote("  void __RPC_STUB IAMVfwCompressDialogs_SetState_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMVfwCompressDialogs_SendDriverMessage_Proxy(IAMVfwCompressDialogs *This,int uMsg,long dw1,long dw2);")
cpp_quote("  void __RPC_STUB IAMVfwCompressDialogs_SendDriverMessage_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMDroppedFrames_INTERFACE_DEFINED__")
cpp_quote("#define __IAMDroppedFrames_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IAMDroppedFrames;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IAMDroppedFrames : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI GetNumDropped(long *plDropped) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetNumNotDropped(long *plNotDropped) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetDroppedInfo(long lSize,long *plArray,long *plNumCopied) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetAverageFrameSize(long *plAverageSize) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IAMDroppedFramesVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IAMDroppedFrames *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IAMDroppedFrames *This);")
cpp_quote("      ULONG (WINAPI *Release)(IAMDroppedFrames *This);")
cpp_quote("      HRESULT (WINAPI *GetNumDropped)(IAMDroppedFrames *This,long *plDropped);")
cpp_quote("      HRESULT (WINAPI *GetNumNotDropped)(IAMDroppedFrames *This,long *plNotDropped);")
cpp_quote("      HRESULT (WINAPI *GetDroppedInfo)(IAMDroppedFrames *This,long lSize,long *plArray,long *plNumCopied);")
cpp_quote("      HRESULT (WINAPI *GetAverageFrameSize)(IAMDroppedFrames *This,long *plAverageSize);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IAMDroppedFramesVtbl;")
cpp_quote("  struct IAMDroppedFrames {")
cpp_quote("    CONST_VTBL struct IAMDroppedFramesVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IAMDroppedFrames_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IAMDroppedFrames_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IAMDroppedFrames_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IAMDroppedFrames_GetNumDropped(This,plDropped) (This)->lpVtbl->GetNumDropped(This,plDropped)")
cpp_quote("#define IAMDroppedFrames_GetNumNotDropped(This,plNotDropped) (This)->lpVtbl->GetNumNotDropped(This,plNotDropped)")
cpp_quote("#define IAMDroppedFrames_GetDroppedInfo(This,lSize,plArray,plNumCopied) (This)->lpVtbl->GetDroppedInfo(This,lSize,plArray,plNumCopied)")
cpp_quote("#define IAMDroppedFrames_GetAverageFrameSize(This,plAverageSize) (This)->lpVtbl->GetAverageFrameSize(This,plAverageSize)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IAMDroppedFrames_GetNumDropped_Proxy(IAMDroppedFrames *This,long *plDropped);")
cpp_quote("  void __RPC_STUB IAMDroppedFrames_GetNumDropped_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMDroppedFrames_GetNumNotDropped_Proxy(IAMDroppedFrames *This,long *plNotDropped);")
cpp_quote("  void __RPC_STUB IAMDroppedFrames_GetNumNotDropped_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMDroppedFrames_GetDroppedInfo_Proxy(IAMDroppedFrames *This,long lSize,long *plArray,long *plNumCopied);")
cpp_quote("  void __RPC_STUB IAMDroppedFrames_GetDroppedInfo_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMDroppedFrames_GetAverageFrameSize_Proxy(IAMDroppedFrames *This,long *plAverageSize);")
cpp_quote("  void __RPC_STUB IAMDroppedFrames_GetAverageFrameSize_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#define AMF_AUTOMATICGAIN -1.0")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0171_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0171_v0_0_s_ifspec;")
cpp_quote("#ifndef __IAMAudioInputMixer_INTERFACE_DEFINED__")
cpp_quote("#define __IAMAudioInputMixer_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IAMAudioInputMixer;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IAMAudioInputMixer : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI put_Enable(WINBOOL fEnable) = 0;")
cpp_quote("    virtual HRESULT WINAPI get_Enable(WINBOOL *pfEnable) = 0;")
cpp_quote("    virtual HRESULT WINAPI put_Mono(WINBOOL fMono) = 0;")
cpp_quote("    virtual HRESULT WINAPI get_Mono(WINBOOL *pfMono) = 0;")
cpp_quote("    virtual HRESULT WINAPI put_MixLevel(double Level) = 0;")
cpp_quote("    virtual HRESULT WINAPI get_MixLevel(double *pLevel) = 0;")
cpp_quote("    virtual HRESULT WINAPI put_Pan(double Pan) = 0;")
cpp_quote("    virtual HRESULT WINAPI get_Pan(double *pPan) = 0;")
cpp_quote("    virtual HRESULT WINAPI put_Loudness(WINBOOL fLoudness) = 0;")
cpp_quote("    virtual HRESULT WINAPI get_Loudness(WINBOOL *pfLoudness) = 0;")
cpp_quote("    virtual HRESULT WINAPI put_Treble(double Treble) = 0;")
cpp_quote("    virtual HRESULT WINAPI get_Treble(double *pTreble) = 0;")
cpp_quote("    virtual HRESULT WINAPI get_TrebleRange(double *pRange) = 0;")
cpp_quote("    virtual HRESULT WINAPI put_Bass(double Bass) = 0;")
cpp_quote("    virtual HRESULT WINAPI get_Bass(double *pBass) = 0;")
cpp_quote("    virtual HRESULT WINAPI get_BassRange(double *pRange) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IAMAudioInputMixerVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IAMAudioInputMixer *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IAMAudioInputMixer *This);")
cpp_quote("      ULONG (WINAPI *Release)(IAMAudioInputMixer *This);")
cpp_quote("      HRESULT (WINAPI *put_Enable)(IAMAudioInputMixer *This,WINBOOL fEnable);")
cpp_quote("      HRESULT (WINAPI *get_Enable)(IAMAudioInputMixer *This,WINBOOL *pfEnable);")
cpp_quote("      HRESULT (WINAPI *put_Mono)(IAMAudioInputMixer *This,WINBOOL fMono);")
cpp_quote("      HRESULT (WINAPI *get_Mono)(IAMAudioInputMixer *This,WINBOOL *pfMono);")
cpp_quote("      HRESULT (WINAPI *put_MixLevel)(IAMAudioInputMixer *This,double Level);")
cpp_quote("      HRESULT (WINAPI *get_MixLevel)(IAMAudioInputMixer *This,double *pLevel);")
cpp_quote("      HRESULT (WINAPI *put_Pan)(IAMAudioInputMixer *This,double Pan);")
cpp_quote("      HRESULT (WINAPI *get_Pan)(IAMAudioInputMixer *This,double *pPan);")
cpp_quote("      HRESULT (WINAPI *put_Loudness)(IAMAudioInputMixer *This,WINBOOL fLoudness);")
cpp_quote("      HRESULT (WINAPI *get_Loudness)(IAMAudioInputMixer *This,WINBOOL *pfLoudness);")
cpp_quote("      HRESULT (WINAPI *put_Treble)(IAMAudioInputMixer *This,double Treble);")
cpp_quote("      HRESULT (WINAPI *get_Treble)(IAMAudioInputMixer *This,double *pTreble);")
cpp_quote("      HRESULT (WINAPI *get_TrebleRange)(IAMAudioInputMixer *This,double *pRange);")
cpp_quote("      HRESULT (WINAPI *put_Bass)(IAMAudioInputMixer *This,double Bass);")
cpp_quote("      HRESULT (WINAPI *get_Bass)(IAMAudioInputMixer *This,double *pBass);")
cpp_quote("      HRESULT (WINAPI *get_BassRange)(IAMAudioInputMixer *This,double *pRange);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IAMAudioInputMixerVtbl;")
cpp_quote("  struct IAMAudioInputMixer {")
cpp_quote("    CONST_VTBL struct IAMAudioInputMixerVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IAMAudioInputMixer_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IAMAudioInputMixer_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IAMAudioInputMixer_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IAMAudioInputMixer_put_Enable(This,fEnable) (This)->lpVtbl->put_Enable(This,fEnable)")
cpp_quote("#define IAMAudioInputMixer_get_Enable(This,pfEnable) (This)->lpVtbl->get_Enable(This,pfEnable)")
cpp_quote("#define IAMAudioInputMixer_put_Mono(This,fMono) (This)->lpVtbl->put_Mono(This,fMono)")
cpp_quote("#define IAMAudioInputMixer_get_Mono(This,pfMono) (This)->lpVtbl->get_Mono(This,pfMono)")
cpp_quote("#define IAMAudioInputMixer_put_MixLevel(This,Level) (This)->lpVtbl->put_MixLevel(This,Level)")
cpp_quote("#define IAMAudioInputMixer_get_MixLevel(This,pLevel) (This)->lpVtbl->get_MixLevel(This,pLevel)")
cpp_quote("#define IAMAudioInputMixer_put_Pan(This,Pan) (This)->lpVtbl->put_Pan(This,Pan)")
cpp_quote("#define IAMAudioInputMixer_get_Pan(This,pPan) (This)->lpVtbl->get_Pan(This,pPan)")
cpp_quote("#define IAMAudioInputMixer_put_Loudness(This,fLoudness) (This)->lpVtbl->put_Loudness(This,fLoudness)")
cpp_quote("#define IAMAudioInputMixer_get_Loudness(This,pfLoudness) (This)->lpVtbl->get_Loudness(This,pfLoudness)")
cpp_quote("#define IAMAudioInputMixer_put_Treble(This,Treble) (This)->lpVtbl->put_Treble(This,Treble)")
cpp_quote("#define IAMAudioInputMixer_get_Treble(This,pTreble) (This)->lpVtbl->get_Treble(This,pTreble)")
cpp_quote("#define IAMAudioInputMixer_get_TrebleRange(This,pRange) (This)->lpVtbl->get_TrebleRange(This,pRange)")
cpp_quote("#define IAMAudioInputMixer_put_Bass(This,Bass) (This)->lpVtbl->put_Bass(This,Bass)")
cpp_quote("#define IAMAudioInputMixer_get_Bass(This,pBass) (This)->lpVtbl->get_Bass(This,pBass)")
cpp_quote("#define IAMAudioInputMixer_get_BassRange(This,pRange) (This)->lpVtbl->get_BassRange(This,pRange)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IAMAudioInputMixer_put_Enable_Proxy(IAMAudioInputMixer *This,WINBOOL fEnable);")
cpp_quote("  void __RPC_STUB IAMAudioInputMixer_put_Enable_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMAudioInputMixer_get_Enable_Proxy(IAMAudioInputMixer *This,WINBOOL *pfEnable);")
cpp_quote("  void __RPC_STUB IAMAudioInputMixer_get_Enable_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMAudioInputMixer_put_Mono_Proxy(IAMAudioInputMixer *This,WINBOOL fMono);")
cpp_quote("  void __RPC_STUB IAMAudioInputMixer_put_Mono_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMAudioInputMixer_get_Mono_Proxy(IAMAudioInputMixer *This,WINBOOL *pfMono);")
cpp_quote("  void __RPC_STUB IAMAudioInputMixer_get_Mono_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMAudioInputMixer_put_MixLevel_Proxy(IAMAudioInputMixer *This,double Level);")
cpp_quote("  void __RPC_STUB IAMAudioInputMixer_put_MixLevel_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMAudioInputMixer_get_MixLevel_Proxy(IAMAudioInputMixer *This,double *pLevel);")
cpp_quote("  void __RPC_STUB IAMAudioInputMixer_get_MixLevel_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMAudioInputMixer_put_Pan_Proxy(IAMAudioInputMixer *This,double Pan);")
cpp_quote("  void __RPC_STUB IAMAudioInputMixer_put_Pan_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMAudioInputMixer_get_Pan_Proxy(IAMAudioInputMixer *This,double *pPan);")
cpp_quote("  void __RPC_STUB IAMAudioInputMixer_get_Pan_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMAudioInputMixer_put_Loudness_Proxy(IAMAudioInputMixer *This,WINBOOL fLoudness);")
cpp_quote("  void __RPC_STUB IAMAudioInputMixer_put_Loudness_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMAudioInputMixer_get_Loudness_Proxy(IAMAudioInputMixer *This,WINBOOL *pfLoudness);")
cpp_quote("  void __RPC_STUB IAMAudioInputMixer_get_Loudness_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMAudioInputMixer_put_Treble_Proxy(IAMAudioInputMixer *This,double Treble);")
cpp_quote("  void __RPC_STUB IAMAudioInputMixer_put_Treble_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMAudioInputMixer_get_Treble_Proxy(IAMAudioInputMixer *This,double *pTreble);")
cpp_quote("  void __RPC_STUB IAMAudioInputMixer_get_Treble_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMAudioInputMixer_get_TrebleRange_Proxy(IAMAudioInputMixer *This,double *pRange);")
cpp_quote("  void __RPC_STUB IAMAudioInputMixer_get_TrebleRange_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMAudioInputMixer_put_Bass_Proxy(IAMAudioInputMixer *This,double Bass);")
cpp_quote("  void __RPC_STUB IAMAudioInputMixer_put_Bass_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMAudioInputMixer_get_Bass_Proxy(IAMAudioInputMixer *This,double *pBass);")
cpp_quote("  void __RPC_STUB IAMAudioInputMixer_get_Bass_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMAudioInputMixer_get_BassRange_Proxy(IAMAudioInputMixer *This,double *pRange);")
cpp_quote("  void __RPC_STUB IAMAudioInputMixer_get_BassRange_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMBufferNegotiation_INTERFACE_DEFINED__")
cpp_quote("#define __IAMBufferNegotiation_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IAMBufferNegotiation;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IAMBufferNegotiation : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI SuggestAllocatorProperties(const ALLOCATOR_PROPERTIES *pprop) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetAllocatorProperties(ALLOCATOR_PROPERTIES *pprop) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IAMBufferNegotiationVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IAMBufferNegotiation *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IAMBufferNegotiation *This);")
cpp_quote("      ULONG (WINAPI *Release)(IAMBufferNegotiation *This);")
cpp_quote("      HRESULT (WINAPI *SuggestAllocatorProperties)(IAMBufferNegotiation *This,const ALLOCATOR_PROPERTIES *pprop);")
cpp_quote("      HRESULT (WINAPI *GetAllocatorProperties)(IAMBufferNegotiation *This,ALLOCATOR_PROPERTIES *pprop);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IAMBufferNegotiationVtbl;")
cpp_quote("  struct IAMBufferNegotiation {")
cpp_quote("    CONST_VTBL struct IAMBufferNegotiationVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IAMBufferNegotiation_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IAMBufferNegotiation_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IAMBufferNegotiation_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IAMBufferNegotiation_SuggestAllocatorProperties(This,pprop) (This)->lpVtbl->SuggestAllocatorProperties(This,pprop)")
cpp_quote("#define IAMBufferNegotiation_GetAllocatorProperties(This,pprop) (This)->lpVtbl->GetAllocatorProperties(This,pprop)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IAMBufferNegotiation_SuggestAllocatorProperties_Proxy(IAMBufferNegotiation *This,const ALLOCATOR_PROPERTIES *pprop);")
cpp_quote("  void __RPC_STUB IAMBufferNegotiation_SuggestAllocatorProperties_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMBufferNegotiation_GetAllocatorProperties_Proxy(IAMBufferNegotiation *This,ALLOCATOR_PROPERTIES *pprop);")
cpp_quote("  void __RPC_STUB IAMBufferNegotiation_GetAllocatorProperties_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  typedef enum tagAnalogVideoStandard {")
cpp_quote("    AnalogVideo_None = 0,AnalogVideo_NTSC_M = 0x1,AnalogVideo_NTSC_M_J = 0x2,AnalogVideo_NTSC_433 = 0x4,AnalogVideo_PAL_B = 0x10,")
cpp_quote("    AnalogVideo_PAL_D = 0x20,AnalogVideo_PAL_G = 0x40,AnalogVideo_PAL_H = 0x80,AnalogVideo_PAL_I = 0x100,AnalogVideo_PAL_M = 0x200,")
cpp_quote("    AnalogVideo_PAL_N = 0x400,AnalogVideo_PAL_60 = 0x800,AnalogVideo_SECAM_B = 0x1000,AnalogVideo_SECAM_D = 0x2000,AnalogVideo_SECAM_G = 0x4000,")
cpp_quote("    AnalogVideo_SECAM_H = 0x8000,AnalogVideo_SECAM_K = 0x10000,AnalogVideo_SECAM_K1 = 0x20000,AnalogVideo_SECAM_L = 0x40000,AnalogVideo_SECAM_L1 = 0x80000,")
cpp_quote("    AnalogVideo_PAL_N_COMBO = 0x100000,AnalogVideoMask_MCE_NTSC = AnalogVideo_NTSC_M | AnalogVideo_NTSC_M_J | AnalogVideo_NTSC_433 | AnalogVideo_PAL_M | AnalogVideo_PAL_N | AnalogVideo_PAL_60 | AnalogVideo_PAL_N_COMBO,AnalogVideoMask_MCE_PAL = AnalogVideo_PAL_B | AnalogVideo_PAL_D | AnalogVideo_PAL_G | AnalogVideo_PAL_H | AnalogVideo_PAL_I,AnalogVideoMask_MCE_SECAM = AnalogVideo_SECAM_B | AnalogVideo_SECAM_D | AnalogVideo_SECAM_G | AnalogVideo_SECAM_H | AnalogVideo_SECAM_K | AnalogVideo_SECAM_K1 | AnalogVideo_SECAM_L | AnalogVideo_SECAM_L1")
cpp_quote("  } AnalogVideoStandard;")
cpp_quote("")
cpp_quote("  typedef enum tagTunerInputType {")
cpp_quote("    TunerInputCable = 0,TunerInputAntenna = TunerInputCable + 1")
cpp_quote("  } TunerInputType;")
cpp_quote("")
cpp_quote("#define AnalogVideo_NTSC_Mask 0x00000007")
cpp_quote("#define AnalogVideo_PAL_Mask 0x00100FF0")
cpp_quote("#define AnalogVideo_SECAM_Mask 0x000FF000")
cpp_quote("")
cpp_quote("  typedef enum __MIDL___MIDL_itf_strmif_0173_0001 {")
cpp_quote("    VideoCopyProtectionMacrovisionBasic = 0,VideoCopyProtectionMacrovisionCBI = VideoCopyProtectionMacrovisionBasic + 1")
cpp_quote("  } VideoCopyProtectionType;")
cpp_quote("")
cpp_quote("  typedef enum tagPhysicalConnectorType {")
cpp_quote("    PhysConn_Video_Tuner = 1,")
cpp_quote("    PhysConn_Video_Composite,PhysConn_Video_SVideo,PhysConn_Video_RGB,")
cpp_quote("    PhysConn_Video_YRYBY,PhysConn_Video_SerialDigital,PhysConn_Video_ParallelDigital,")
cpp_quote("    PhysConn_Video_SCSI,PhysConn_Video_AUX,PhysConn_Video_1394,PhysConn_Video_USB,")
cpp_quote("    PhysConn_Video_VideoDecoder,PhysConn_Video_VideoEncoder,PhysConn_Video_SCART,PhysConn_Video_Black,")
cpp_quote("    PhysConn_Audio_Tuner = 0x1000,PhysConn_Audio_Line = 0x1001,PhysConn_Audio_Mic = 0x1002,")
cpp_quote("    PhysConn_Audio_AESDigital = 0x1003,PhysConn_Audio_SPDIFDigital = 0x1004,")
cpp_quote("    PhysConn_Audio_SCSI = 0x1005,PhysConn_Audio_AUX = 0x1006,PhysConn_Audio_1394 = 0x1007,")
cpp_quote("    PhysConn_Audio_USB = 0x1008,PhysConn_Audio_AudioDecoder = 0x1009")
cpp_quote("  } PhysicalConnectorType;")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0173_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0173_v0_0_s_ifspec;")
cpp_quote("#ifndef __IAMAnalogVideoDecoder_INTERFACE_DEFINED__")
cpp_quote("#define __IAMAnalogVideoDecoder_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IAMAnalogVideoDecoder;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IAMAnalogVideoDecoder : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI get_AvailableTVFormats(long *lAnalogVideoStandard) = 0;")
cpp_quote("    virtual HRESULT WINAPI put_TVFormat(long lAnalogVideoStandard) = 0;")
cpp_quote("    virtual HRESULT WINAPI get_TVFormat(long *plAnalogVideoStandard) = 0;")
cpp_quote("    virtual HRESULT WINAPI get_HorizontalLocked(long *plLocked) = 0;")
cpp_quote("    virtual HRESULT WINAPI put_VCRHorizontalLocking(long lVCRHorizontalLocking) = 0;")
cpp_quote("    virtual HRESULT WINAPI get_VCRHorizontalLocking(long *plVCRHorizontalLocking) = 0;")
cpp_quote("    virtual HRESULT WINAPI get_NumberOfLines(long *plNumberOfLines) = 0;")
cpp_quote("    virtual HRESULT WINAPI put_OutputEnable(long lOutputEnable) = 0;")
cpp_quote("    virtual HRESULT WINAPI get_OutputEnable(long *plOutputEnable) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IAMAnalogVideoDecoderVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IAMAnalogVideoDecoder *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IAMAnalogVideoDecoder *This);")
cpp_quote("      ULONG (WINAPI *Release)(IAMAnalogVideoDecoder *This);")
cpp_quote("      HRESULT (WINAPI *get_AvailableTVFormats)(IAMAnalogVideoDecoder *This,long *lAnalogVideoStandard);")
cpp_quote("      HRESULT (WINAPI *put_TVFormat)(IAMAnalogVideoDecoder *This,long lAnalogVideoStandard);")
cpp_quote("      HRESULT (WINAPI *get_TVFormat)(IAMAnalogVideoDecoder *This,long *plAnalogVideoStandard);")
cpp_quote("      HRESULT (WINAPI *get_HorizontalLocked)(IAMAnalogVideoDecoder *This,long *plLocked);")
cpp_quote("      HRESULT (WINAPI *put_VCRHorizontalLocking)(IAMAnalogVideoDecoder *This,long lVCRHorizontalLocking);")
cpp_quote("      HRESULT (WINAPI *get_VCRHorizontalLocking)(IAMAnalogVideoDecoder *This,long *plVCRHorizontalLocking);")
cpp_quote("      HRESULT (WINAPI *get_NumberOfLines)(IAMAnalogVideoDecoder *This,long *plNumberOfLines);")
cpp_quote("      HRESULT (WINAPI *put_OutputEnable)(IAMAnalogVideoDecoder *This,long lOutputEnable);")
cpp_quote("      HRESULT (WINAPI *get_OutputEnable)(IAMAnalogVideoDecoder *This,long *plOutputEnable);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IAMAnalogVideoDecoderVtbl;")
cpp_quote("  struct IAMAnalogVideoDecoder {")
cpp_quote("    CONST_VTBL struct IAMAnalogVideoDecoderVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IAMAnalogVideoDecoder_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IAMAnalogVideoDecoder_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IAMAnalogVideoDecoder_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IAMAnalogVideoDecoder_get_AvailableTVFormats(This,lAnalogVideoStandard) (This)->lpVtbl->get_AvailableTVFormats(This,lAnalogVideoStandard)")
cpp_quote("#define IAMAnalogVideoDecoder_put_TVFormat(This,lAnalogVideoStandard) (This)->lpVtbl->put_TVFormat(This,lAnalogVideoStandard)")
cpp_quote("#define IAMAnalogVideoDecoder_get_TVFormat(This,plAnalogVideoStandard) (This)->lpVtbl->get_TVFormat(This,plAnalogVideoStandard)")
cpp_quote("#define IAMAnalogVideoDecoder_get_HorizontalLocked(This,plLocked) (This)->lpVtbl->get_HorizontalLocked(This,plLocked)")
cpp_quote("#define IAMAnalogVideoDecoder_put_VCRHorizontalLocking(This,lVCRHorizontalLocking) (This)->lpVtbl->put_VCRHorizontalLocking(This,lVCRHorizontalLocking)")
cpp_quote("#define IAMAnalogVideoDecoder_get_VCRHorizontalLocking(This,plVCRHorizontalLocking) (This)->lpVtbl->get_VCRHorizontalLocking(This,plVCRHorizontalLocking)")
cpp_quote("#define IAMAnalogVideoDecoder_get_NumberOfLines(This,plNumberOfLines) (This)->lpVtbl->get_NumberOfLines(This,plNumberOfLines)")
cpp_quote("#define IAMAnalogVideoDecoder_put_OutputEnable(This,lOutputEnable) (This)->lpVtbl->put_OutputEnable(This,lOutputEnable)")
cpp_quote("#define IAMAnalogVideoDecoder_get_OutputEnable(This,plOutputEnable) (This)->lpVtbl->get_OutputEnable(This,plOutputEnable)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IAMAnalogVideoDecoder_get_AvailableTVFormats_Proxy(IAMAnalogVideoDecoder *This,long *lAnalogVideoStandard);")
cpp_quote("  void __RPC_STUB IAMAnalogVideoDecoder_get_AvailableTVFormats_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMAnalogVideoDecoder_put_TVFormat_Proxy(IAMAnalogVideoDecoder *This,long lAnalogVideoStandard);")
cpp_quote("  void __RPC_STUB IAMAnalogVideoDecoder_put_TVFormat_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMAnalogVideoDecoder_get_TVFormat_Proxy(IAMAnalogVideoDecoder *This,long *plAnalogVideoStandard);")
cpp_quote("  void __RPC_STUB IAMAnalogVideoDecoder_get_TVFormat_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMAnalogVideoDecoder_get_HorizontalLocked_Proxy(IAMAnalogVideoDecoder *This,long *plLocked);")
cpp_quote("  void __RPC_STUB IAMAnalogVideoDecoder_get_HorizontalLocked_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMAnalogVideoDecoder_put_VCRHorizontalLocking_Proxy(IAMAnalogVideoDecoder *This,long lVCRHorizontalLocking);")
cpp_quote("  void __RPC_STUB IAMAnalogVideoDecoder_put_VCRHorizontalLocking_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMAnalogVideoDecoder_get_VCRHorizontalLocking_Proxy(IAMAnalogVideoDecoder *This,long *plVCRHorizontalLocking);")
cpp_quote("  void __RPC_STUB IAMAnalogVideoDecoder_get_VCRHorizontalLocking_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMAnalogVideoDecoder_get_NumberOfLines_Proxy(IAMAnalogVideoDecoder *This,long *plNumberOfLines);")
cpp_quote("  void __RPC_STUB IAMAnalogVideoDecoder_get_NumberOfLines_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMAnalogVideoDecoder_put_OutputEnable_Proxy(IAMAnalogVideoDecoder *This,long lOutputEnable);")
cpp_quote("  void __RPC_STUB IAMAnalogVideoDecoder_put_OutputEnable_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMAnalogVideoDecoder_get_OutputEnable_Proxy(IAMAnalogVideoDecoder *This,long *plOutputEnable);")
cpp_quote("  void __RPC_STUB IAMAnalogVideoDecoder_get_OutputEnable_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  typedef enum tagVideoProcAmpProperty {")
cpp_quote("    VideoProcAmp_Brightness = 0,")
cpp_quote("    VideoProcAmp_Contrast,VideoProcAmp_Hue,VideoProcAmp_Saturation,VideoProcAmp_Sharpness,")
cpp_quote("    VideoProcAmp_Gamma,VideoProcAmp_ColorEnable,VideoProcAmp_WhiteBalance,")
cpp_quote("    VideoProcAmp_BacklightCompensation,VideoProcAmp_Gain")
cpp_quote("  } VideoProcAmpProperty;")
cpp_quote("")
cpp_quote("  typedef enum tagVideoProcAmpFlags {")
cpp_quote("    VideoProcAmp_Flags_Auto = 0x1,VideoProcAmp_Flags_Manual = 0x2")
cpp_quote("  } VideoProcAmpFlags;")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0174_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0174_v0_0_s_ifspec;")
cpp_quote("#ifndef __IAMVideoProcAmp_INTERFACE_DEFINED__")
cpp_quote("#define __IAMVideoProcAmp_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IAMVideoProcAmp;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IAMVideoProcAmp : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI GetRange(long Property,long *pMin,long *pMax,long *pSteppingDelta,long *pDefault,long *pCapsFlags) = 0;")
cpp_quote("    virtual HRESULT WINAPI Set(long Property,long lValue,long Flags) = 0;")
cpp_quote("    virtual HRESULT WINAPI Get(long Property,long *lValue,long *Flags) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IAMVideoProcAmpVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IAMVideoProcAmp *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IAMVideoProcAmp *This);")
cpp_quote("      ULONG (WINAPI *Release)(IAMVideoProcAmp *This);")
cpp_quote("      HRESULT (WINAPI *GetRange)(IAMVideoProcAmp *This,long Property,long *pMin,long *pMax,long *pSteppingDelta,long *pDefault,long *pCapsFlags);")
cpp_quote("      HRESULT (WINAPI *Set)(IAMVideoProcAmp *This,long Property,long lValue,long Flags);")
cpp_quote("      HRESULT (WINAPI *Get)(IAMVideoProcAmp *This,long Property,long *lValue,long *Flags);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IAMVideoProcAmpVtbl;")
cpp_quote("  struct IAMVideoProcAmp {")
cpp_quote("    CONST_VTBL struct IAMVideoProcAmpVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IAMVideoProcAmp_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IAMVideoProcAmp_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IAMVideoProcAmp_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IAMVideoProcAmp_GetRange(This,Property,pMin,pMax,pSteppingDelta,pDefault,pCapsFlags) (This)->lpVtbl->GetRange(This,Property,pMin,pMax,pSteppingDelta,pDefault,pCapsFlags)")
cpp_quote("#define IAMVideoProcAmp_Set(This,Property,lValue,Flags) (This)->lpVtbl->Set(This,Property,lValue,Flags)")
cpp_quote("#define IAMVideoProcAmp_Get(This,Property,lValue,Flags) (This)->lpVtbl->Get(This,Property,lValue,Flags)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IAMVideoProcAmp_GetRange_Proxy(IAMVideoProcAmp *This,long Property,long *pMin,long *pMax,long *pSteppingDelta,long *pDefault,long *pCapsFlags);")
cpp_quote("  void __RPC_STUB IAMVideoProcAmp_GetRange_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMVideoProcAmp_Set_Proxy(IAMVideoProcAmp *This,long Property,long lValue,long Flags);")
cpp_quote("  void __RPC_STUB IAMVideoProcAmp_Set_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMVideoProcAmp_Get_Proxy(IAMVideoProcAmp *This,long Property,long *lValue,long *Flags);")
cpp_quote("  void __RPC_STUB IAMVideoProcAmp_Get_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  typedef enum tagCameraControlProperty {")
cpp_quote("    CameraControl_Pan = 0,")
cpp_quote("    CameraControl_Tilt,CameraControl_Roll,CameraControl_Zoom,CameraControl_Exposure,")
cpp_quote("    CameraControl_Iris,CameraControl_Focus")
cpp_quote("  } CameraControlProperty;")
cpp_quote("")
cpp_quote("  typedef enum tagCameraControlFlags {")
cpp_quote("    CameraControl_Flags_Auto = 0x1,CameraControl_Flags_Manual = 0x2")
cpp_quote("  } CameraControlFlags;")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0175_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0175_v0_0_s_ifspec;")
cpp_quote("#ifndef __IAMCameraControl_INTERFACE_DEFINED__")
cpp_quote("#define __IAMCameraControl_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IAMCameraControl;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IAMCameraControl : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI GetRange(long Property,long *pMin,long *pMax,long *pSteppingDelta,long *pDefault,long *pCapsFlags) = 0;")
cpp_quote("    virtual HRESULT WINAPI Set(long Property,long lValue,long Flags) = 0;")
cpp_quote("    virtual HRESULT WINAPI Get(long Property,long *lValue,long *Flags) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IAMCameraControlVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IAMCameraControl *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IAMCameraControl *This);")
cpp_quote("      ULONG (WINAPI *Release)(IAMCameraControl *This);")
cpp_quote("      HRESULT (WINAPI *GetRange)(IAMCameraControl *This,long Property,long *pMin,long *pMax,long *pSteppingDelta,long *pDefault,long *pCapsFlags);")
cpp_quote("      HRESULT (WINAPI *Set)(IAMCameraControl *This,long Property,long lValue,long Flags);")
cpp_quote("      HRESULT (WINAPI *Get)(IAMCameraControl *This,long Property,long *lValue,long *Flags);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IAMCameraControlVtbl;")
cpp_quote("  struct IAMCameraControl {")
cpp_quote("    CONST_VTBL struct IAMCameraControlVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IAMCameraControl_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IAMCameraControl_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IAMCameraControl_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IAMCameraControl_GetRange(This,Property,pMin,pMax,pSteppingDelta,pDefault,pCapsFlags) (This)->lpVtbl->GetRange(This,Property,pMin,pMax,pSteppingDelta,pDefault,pCapsFlags)")
cpp_quote("#define IAMCameraControl_Set(This,Property,lValue,Flags) (This)->lpVtbl->Set(This,Property,lValue,Flags)")
cpp_quote("#define IAMCameraControl_Get(This,Property,lValue,Flags) (This)->lpVtbl->Get(This,Property,lValue,Flags)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IAMCameraControl_GetRange_Proxy(IAMCameraControl *This,long Property,long *pMin,long *pMax,long *pSteppingDelta,long *pDefault,long *pCapsFlags);")
cpp_quote("  void __RPC_STUB IAMCameraControl_GetRange_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMCameraControl_Set_Proxy(IAMCameraControl *This,long Property,long lValue,long Flags);")
cpp_quote("  void __RPC_STUB IAMCameraControl_Set_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMCameraControl_Get_Proxy(IAMCameraControl *This,long Property,long *lValue,long *Flags);")
cpp_quote("  void __RPC_STUB IAMCameraControl_Get_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  typedef enum tagVideoControlFlags {")
cpp_quote("    VideoControlFlag_FlipHorizontal = 0x1,VideoControlFlag_FlipVertical = 0x2,VideoControlFlag_ExternalTriggerEnable = 0x4,VideoControlFlag_Trigger = 0x8")
cpp_quote("  } VideoControlFlags;")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0176_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0176_v0_0_s_ifspec;")
cpp_quote("#ifndef __IAMVideoControl_INTERFACE_DEFINED__")
cpp_quote("#define __IAMVideoControl_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IAMVideoControl;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IAMVideoControl : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI GetCaps(IPin *pPin,long *pCapsFlags) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetMode(IPin *pPin,long Mode) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetMode(IPin *pPin,long *Mode) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetCurrentActualFrameRate(IPin *pPin,LONGLONG *ActualFrameRate) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetMaxAvailableFrameRate(IPin *pPin,long iIndex,SIZE Dimensions,LONGLONG *MaxAvailableFrameRate) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetFrameRateList(IPin *pPin,long iIndex,SIZE Dimensions,long *ListSize,LONGLONG **FrameRates) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IAMVideoControlVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IAMVideoControl *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IAMVideoControl *This);")
cpp_quote("      ULONG (WINAPI *Release)(IAMVideoControl *This);")
cpp_quote("      HRESULT (WINAPI *GetCaps)(IAMVideoControl *This,IPin *pPin,long *pCapsFlags);")
cpp_quote("      HRESULT (WINAPI *SetMode)(IAMVideoControl *This,IPin *pPin,long Mode);")
cpp_quote("      HRESULT (WINAPI *GetMode)(IAMVideoControl *This,IPin *pPin,long *Mode);")
cpp_quote("      HRESULT (WINAPI *GetCurrentActualFrameRate)(IAMVideoControl *This,IPin *pPin,LONGLONG *ActualFrameRate);")
cpp_quote("      HRESULT (WINAPI *GetMaxAvailableFrameRate)(IAMVideoControl *This,IPin *pPin,long iIndex,SIZE Dimensions,LONGLONG *MaxAvailableFrameRate);")
cpp_quote("      HRESULT (WINAPI *GetFrameRateList)(IAMVideoControl *This,IPin *pPin,long iIndex,SIZE Dimensions,long *ListSize,LONGLONG **FrameRates);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IAMVideoControlVtbl;")
cpp_quote("  struct IAMVideoControl {")
cpp_quote("    CONST_VTBL struct IAMVideoControlVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IAMVideoControl_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IAMVideoControl_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IAMVideoControl_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IAMVideoControl_GetCaps(This,pPin,pCapsFlags) (This)->lpVtbl->GetCaps(This,pPin,pCapsFlags)")
cpp_quote("#define IAMVideoControl_SetMode(This,pPin,Mode) (This)->lpVtbl->SetMode(This,pPin,Mode)")
cpp_quote("#define IAMVideoControl_GetMode(This,pPin,Mode) (This)->lpVtbl->GetMode(This,pPin,Mode)")
cpp_quote("#define IAMVideoControl_GetCurrentActualFrameRate(This,pPin,ActualFrameRate) (This)->lpVtbl->GetCurrentActualFrameRate(This,pPin,ActualFrameRate)")
cpp_quote("#define IAMVideoControl_GetMaxAvailableFrameRate(This,pPin,iIndex,Dimensions,MaxAvailableFrameRate) (This)->lpVtbl->GetMaxAvailableFrameRate(This,pPin,iIndex,Dimensions,MaxAvailableFrameRate)")
cpp_quote("#define IAMVideoControl_GetFrameRateList(This,pPin,iIndex,Dimensions,ListSize,FrameRates) (This)->lpVtbl->GetFrameRateList(This,pPin,iIndex,Dimensions,ListSize,FrameRates)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IAMVideoControl_GetCaps_Proxy(IAMVideoControl *This,IPin *pPin,long *pCapsFlags);")
cpp_quote("  void __RPC_STUB IAMVideoControl_GetCaps_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMVideoControl_SetMode_Proxy(IAMVideoControl *This,IPin *pPin,long Mode);")
cpp_quote("  void __RPC_STUB IAMVideoControl_SetMode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMVideoControl_GetMode_Proxy(IAMVideoControl *This,IPin *pPin,long *Mode);")
cpp_quote("  void __RPC_STUB IAMVideoControl_GetMode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMVideoControl_GetCurrentActualFrameRate_Proxy(IAMVideoControl *This,IPin *pPin,LONGLONG *ActualFrameRate);")
cpp_quote("  void __RPC_STUB IAMVideoControl_GetCurrentActualFrameRate_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMVideoControl_GetMaxAvailableFrameRate_Proxy(IAMVideoControl *This,IPin *pPin,long iIndex,SIZE Dimensions,LONGLONG *MaxAvailableFrameRate);")
cpp_quote("  void __RPC_STUB IAMVideoControl_GetMaxAvailableFrameRate_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMVideoControl_GetFrameRateList_Proxy(IAMVideoControl *This,IPin *pPin,long iIndex,SIZE Dimensions,long *ListSize,LONGLONG **FrameRates);")
cpp_quote("  void __RPC_STUB IAMVideoControl_GetFrameRateList_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMCrossbar_INTERFACE_DEFINED__")
cpp_quote("#define __IAMCrossbar_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IAMCrossbar;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IAMCrossbar : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI get_PinCounts(long *OutputPinCount,long *InputPinCount) = 0;")
cpp_quote("    virtual HRESULT WINAPI CanRoute(long OutputPinIndex,long InputPinIndex) = 0;")
cpp_quote("    virtual HRESULT WINAPI Route(long OutputPinIndex,long InputPinIndex) = 0;")
cpp_quote("    virtual HRESULT WINAPI get_IsRoutedTo(long OutputPinIndex,long *InputPinIndex) = 0;")
cpp_quote("    virtual HRESULT WINAPI get_CrossbarPinInfo(WINBOOL IsInputPin,long PinIndex,long *PinIndexRelated,long *PhysicalType) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IAMCrossbarVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IAMCrossbar *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IAMCrossbar *This);")
cpp_quote("      ULONG (WINAPI *Release)(IAMCrossbar *This);")
cpp_quote("      HRESULT (WINAPI *get_PinCounts)(IAMCrossbar *This,long *OutputPinCount,long *InputPinCount);")
cpp_quote("      HRESULT (WINAPI *CanRoute)(IAMCrossbar *This,long OutputPinIndex,long InputPinIndex);")
cpp_quote("      HRESULT (WINAPI *Route)(IAMCrossbar *This,long OutputPinIndex,long InputPinIndex);")
cpp_quote("      HRESULT (WINAPI *get_IsRoutedTo)(IAMCrossbar *This,long OutputPinIndex,long *InputPinIndex);")
cpp_quote("      HRESULT (WINAPI *get_CrossbarPinInfo)(IAMCrossbar *This,WINBOOL IsInputPin,long PinIndex,long *PinIndexRelated,long *PhysicalType);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IAMCrossbarVtbl;")
cpp_quote("  struct IAMCrossbar {")
cpp_quote("    CONST_VTBL struct IAMCrossbarVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IAMCrossbar_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IAMCrossbar_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IAMCrossbar_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IAMCrossbar_get_PinCounts(This,OutputPinCount,InputPinCount) (This)->lpVtbl->get_PinCounts(This,OutputPinCount,InputPinCount)")
cpp_quote("#define IAMCrossbar_CanRoute(This,OutputPinIndex,InputPinIndex) (This)->lpVtbl->CanRoute(This,OutputPinIndex,InputPinIndex)")
cpp_quote("#define IAMCrossbar_Route(This,OutputPinIndex,InputPinIndex) (This)->lpVtbl->Route(This,OutputPinIndex,InputPinIndex)")
cpp_quote("#define IAMCrossbar_get_IsRoutedTo(This,OutputPinIndex,InputPinIndex) (This)->lpVtbl->get_IsRoutedTo(This,OutputPinIndex,InputPinIndex)")
cpp_quote("#define IAMCrossbar_get_CrossbarPinInfo(This,IsInputPin,PinIndex,PinIndexRelated,PhysicalType) (This)->lpVtbl->get_CrossbarPinInfo(This,IsInputPin,PinIndex,PinIndexRelated,PhysicalType)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IAMCrossbar_get_PinCounts_Proxy(IAMCrossbar *This,long *OutputPinCount,long *InputPinCount);")
cpp_quote("  void __RPC_STUB IAMCrossbar_get_PinCounts_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMCrossbar_CanRoute_Proxy(IAMCrossbar *This,long OutputPinIndex,long InputPinIndex);")
cpp_quote("  void __RPC_STUB IAMCrossbar_CanRoute_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMCrossbar_Route_Proxy(IAMCrossbar *This,long OutputPinIndex,long InputPinIndex);")
cpp_quote("  void __RPC_STUB IAMCrossbar_Route_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMCrossbar_get_IsRoutedTo_Proxy(IAMCrossbar *This,long OutputPinIndex,long *InputPinIndex);")
cpp_quote("  void __RPC_STUB IAMCrossbar_get_IsRoutedTo_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMCrossbar_get_CrossbarPinInfo_Proxy(IAMCrossbar *This,WINBOOL IsInputPin,long PinIndex,long *PinIndexRelated,long *PhysicalType);")
cpp_quote("  void __RPC_STUB IAMCrossbar_get_CrossbarPinInfo_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  typedef enum tagAMTunerSubChannel {")
cpp_quote("    AMTUNER_SUBCHAN_NO_TUNE = -2,AMTUNER_SUBCHAN_DEFAULT = -1")
cpp_quote("  } AMTunerSubChannel;")
cpp_quote("")
cpp_quote("  typedef enum tagAMTunerSignalStrength {")
cpp_quote("    AMTUNER_HASNOSIGNALSTRENGTH = -1,AMTUNER_NOSIGNAL = 0,AMTUNER_SIGNALPRESENT = 1")
cpp_quote("  } AMTunerSignalStrength;")
cpp_quote("")
cpp_quote("  typedef enum tagAMTunerModeType {")
cpp_quote("    AMTUNER_MODE_DEFAULT = 0,AMTUNER_MODE_TV = 0x1,AMTUNER_MODE_FM_RADIO = 0x2,AMTUNER_MODE_AM_RADIO = 0x4,AMTUNER_MODE_DSS = 0x8")
cpp_quote("  } AMTunerModeType;")
cpp_quote("")
cpp_quote("  typedef enum tagAMTunerEventType {")
cpp_quote("    AMTUNER_EVENT_CHANGED = 0x1")
cpp_quote("  } AMTunerEventType;")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0178_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0178_v0_0_s_ifspec;")
cpp_quote("#ifndef __IAMTuner_INTERFACE_DEFINED__")
cpp_quote("#define __IAMTuner_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IAMTuner;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IAMTuner : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI put_Channel(long lChannel,long lVideoSubChannel,long lAudioSubChannel) = 0;")
cpp_quote("    virtual HRESULT WINAPI get_Channel(long *plChannel,long *plVideoSubChannel,long *plAudioSubChannel) = 0;")
cpp_quote("    virtual HRESULT WINAPI ChannelMinMax(long *lChannelMin,long *lChannelMax) = 0;")
cpp_quote("    virtual HRESULT WINAPI put_CountryCode(long lCountryCode) = 0;")
cpp_quote("    virtual HRESULT WINAPI get_CountryCode(long *plCountryCode) = 0;")
cpp_quote("    virtual HRESULT WINAPI put_TuningSpace(long lTuningSpace) = 0;")
cpp_quote("    virtual HRESULT WINAPI get_TuningSpace(long *plTuningSpace) = 0;")
cpp_quote("    virtual HRESULT WINAPI Logon(HANDLE hCurrentUser) = 0;")
cpp_quote("    virtual HRESULT WINAPI Logout(void) = 0;")
cpp_quote("    virtual HRESULT WINAPI SignalPresent(long *plSignalStrength) = 0;")
cpp_quote("    virtual HRESULT WINAPI put_Mode(AMTunerModeType lMode) = 0;")
cpp_quote("    virtual HRESULT WINAPI get_Mode(AMTunerModeType *plMode) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetAvailableModes(long *plModes) = 0;")
cpp_quote("    virtual HRESULT WINAPI RegisterNotificationCallBack(IAMTunerNotification *pNotify,long lEvents) = 0;")
cpp_quote("    virtual HRESULT WINAPI UnRegisterNotificationCallBack(IAMTunerNotification *pNotify) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IAMTunerVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IAMTuner *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IAMTuner *This);")
cpp_quote("      ULONG (WINAPI *Release)(IAMTuner *This);")
cpp_quote("      HRESULT (WINAPI *put_Channel)(IAMTuner *This,long lChannel,long lVideoSubChannel,long lAudioSubChannel);")
cpp_quote("      HRESULT (WINAPI *get_Channel)(IAMTuner *This,long *plChannel,long *plVideoSubChannel,long *plAudioSubChannel);")
cpp_quote("      HRESULT (WINAPI *ChannelMinMax)(IAMTuner *This,long *lChannelMin,long *lChannelMax);")
cpp_quote("      HRESULT (WINAPI *put_CountryCode)(IAMTuner *This,long lCountryCode);")
cpp_quote("      HRESULT (WINAPI *get_CountryCode)(IAMTuner *This,long *plCountryCode);")
cpp_quote("      HRESULT (WINAPI *put_TuningSpace)(IAMTuner *This,long lTuningSpace);")
cpp_quote("      HRESULT (WINAPI *get_TuningSpace)(IAMTuner *This,long *plTuningSpace);")
cpp_quote("      HRESULT (WINAPI *Logon)(IAMTuner *This,HANDLE hCurrentUser);")
cpp_quote("      HRESULT (WINAPI *Logout)(IAMTuner *This);")
cpp_quote("      HRESULT (WINAPI *SignalPresent)(IAMTuner *This,long *plSignalStrength);")
cpp_quote("      HRESULT (WINAPI *put_Mode)(IAMTuner *This,AMTunerModeType lMode);")
cpp_quote("      HRESULT (WINAPI *get_Mode)(IAMTuner *This,AMTunerModeType *plMode);")
cpp_quote("      HRESULT (WINAPI *GetAvailableModes)(IAMTuner *This,long *plModes);")
cpp_quote("      HRESULT (WINAPI *RegisterNotificationCallBack)(IAMTuner *This,IAMTunerNotification *pNotify,long lEvents);")
cpp_quote("      HRESULT (WINAPI *UnRegisterNotificationCallBack)(IAMTuner *This,IAMTunerNotification *pNotify);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IAMTunerVtbl;")
cpp_quote("  struct IAMTuner {")
cpp_quote("    CONST_VTBL struct IAMTunerVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IAMTuner_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IAMTuner_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IAMTuner_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IAMTuner_put_Channel(This,lChannel,lVideoSubChannel,lAudioSubChannel) (This)->lpVtbl->put_Channel(This,lChannel,lVideoSubChannel,lAudioSubChannel)")
cpp_quote("#define IAMTuner_get_Channel(This,plChannel,plVideoSubChannel,plAudioSubChannel) (This)->lpVtbl->get_Channel(This,plChannel,plVideoSubChannel,plAudioSubChannel)")
cpp_quote("#define IAMTuner_ChannelMinMax(This,lChannelMin,lChannelMax) (This)->lpVtbl->ChannelMinMax(This,lChannelMin,lChannelMax)")
cpp_quote("#define IAMTuner_put_CountryCode(This,lCountryCode) (This)->lpVtbl->put_CountryCode(This,lCountryCode)")
cpp_quote("#define IAMTuner_get_CountryCode(This,plCountryCode) (This)->lpVtbl->get_CountryCode(This,plCountryCode)")
cpp_quote("#define IAMTuner_put_TuningSpace(This,lTuningSpace) (This)->lpVtbl->put_TuningSpace(This,lTuningSpace)")
cpp_quote("#define IAMTuner_get_TuningSpace(This,plTuningSpace) (This)->lpVtbl->get_TuningSpace(This,plTuningSpace)")
cpp_quote("#define IAMTuner_Logon(This,hCurrentUser) (This)->lpVtbl->Logon(This,hCurrentUser)")
cpp_quote("#define IAMTuner_Logout(This) (This)->lpVtbl->Logout(This)")
cpp_quote("#define IAMTuner_SignalPresent(This,plSignalStrength) (This)->lpVtbl->SignalPresent(This,plSignalStrength)")
cpp_quote("#define IAMTuner_put_Mode(This,lMode) (This)->lpVtbl->put_Mode(This,lMode)")
cpp_quote("#define IAMTuner_get_Mode(This,plMode) (This)->lpVtbl->get_Mode(This,plMode)")
cpp_quote("#define IAMTuner_GetAvailableModes(This,plModes) (This)->lpVtbl->GetAvailableModes(This,plModes)")
cpp_quote("#define IAMTuner_RegisterNotificationCallBack(This,pNotify,lEvents) (This)->lpVtbl->RegisterNotificationCallBack(This,pNotify,lEvents)")
cpp_quote("#define IAMTuner_UnRegisterNotificationCallBack(This,pNotify) (This)->lpVtbl->UnRegisterNotificationCallBack(This,pNotify)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IAMTuner_put_Channel_Proxy(IAMTuner *This,long lChannel,long lVideoSubChannel,long lAudioSubChannel);")
cpp_quote("  void __RPC_STUB IAMTuner_put_Channel_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMTuner_get_Channel_Proxy(IAMTuner *This,long *plChannel,long *plVideoSubChannel,long *plAudioSubChannel);")
cpp_quote("  void __RPC_STUB IAMTuner_get_Channel_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMTuner_ChannelMinMax_Proxy(IAMTuner *This,long *lChannelMin,long *lChannelMax);")
cpp_quote("  void __RPC_STUB IAMTuner_ChannelMinMax_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMTuner_put_CountryCode_Proxy(IAMTuner *This,long lCountryCode);")
cpp_quote("  void __RPC_STUB IAMTuner_put_CountryCode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMTuner_get_CountryCode_Proxy(IAMTuner *This,long *plCountryCode);")
cpp_quote("  void __RPC_STUB IAMTuner_get_CountryCode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMTuner_put_TuningSpace_Proxy(IAMTuner *This,long lTuningSpace);")
cpp_quote("  void __RPC_STUB IAMTuner_put_TuningSpace_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMTuner_get_TuningSpace_Proxy(IAMTuner *This,long *plTuningSpace);")
cpp_quote("  void __RPC_STUB IAMTuner_get_TuningSpace_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMTuner_Logon_Proxy(IAMTuner *This,HANDLE hCurrentUser);")
cpp_quote("  void __RPC_STUB IAMTuner_Logon_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMTuner_Logout_Proxy(IAMTuner *This);")
cpp_quote("  void __RPC_STUB IAMTuner_Logout_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMTuner_SignalPresent_Proxy(IAMTuner *This,long *plSignalStrength);")
cpp_quote("  void __RPC_STUB IAMTuner_SignalPresent_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMTuner_put_Mode_Proxy(IAMTuner *This,AMTunerModeType lMode);")
cpp_quote("  void __RPC_STUB IAMTuner_put_Mode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMTuner_get_Mode_Proxy(IAMTuner *This,AMTunerModeType *plMode);")
cpp_quote("  void __RPC_STUB IAMTuner_get_Mode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMTuner_GetAvailableModes_Proxy(IAMTuner *This,long *plModes);")
cpp_quote("  void __RPC_STUB IAMTuner_GetAvailableModes_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMTuner_RegisterNotificationCallBack_Proxy(IAMTuner *This,IAMTunerNotification *pNotify,long lEvents);")
cpp_quote("  void __RPC_STUB IAMTuner_RegisterNotificationCallBack_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMTuner_UnRegisterNotificationCallBack_Proxy(IAMTuner *This,IAMTunerNotification *pNotify);")
cpp_quote("  void __RPC_STUB IAMTuner_UnRegisterNotificationCallBack_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMTunerNotification_INTERFACE_DEFINED__")
cpp_quote("#define __IAMTunerNotification_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IAMTunerNotification;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IAMTunerNotification : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI OnEvent(AMTunerEventType Event) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IAMTunerNotificationVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IAMTunerNotification *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IAMTunerNotification *This);")
cpp_quote("      ULONG (WINAPI *Release)(IAMTunerNotification *This);")
cpp_quote("      HRESULT (WINAPI *OnEvent)(IAMTunerNotification *This,AMTunerEventType Event);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IAMTunerNotificationVtbl;")
cpp_quote("  struct IAMTunerNotification {")
cpp_quote("    CONST_VTBL struct IAMTunerNotificationVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IAMTunerNotification_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IAMTunerNotification_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IAMTunerNotification_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IAMTunerNotification_OnEvent(This,Event) (This)->lpVtbl->OnEvent(This,Event)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IAMTunerNotification_OnEvent_Proxy(IAMTunerNotification *This,AMTunerEventType Event);")
cpp_quote("  void __RPC_STUB IAMTunerNotification_OnEvent_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMTVTuner_INTERFACE_DEFINED__")
cpp_quote("#define __IAMTVTuner_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IAMTVTuner;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IAMTVTuner : public IAMTuner {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI get_AvailableTVFormats(long *lAnalogVideoStandard) = 0;")
cpp_quote("    virtual HRESULT WINAPI get_TVFormat(long *plAnalogVideoStandard) = 0;")
cpp_quote("    virtual HRESULT WINAPI AutoTune(long lChannel,long *plFoundSignal) = 0;")
cpp_quote("    virtual HRESULT WINAPI StoreAutoTune(void) = 0;")
cpp_quote("    virtual HRESULT WINAPI get_NumInputConnections(long *plNumInputConnections) = 0;")
cpp_quote("    virtual HRESULT WINAPI put_InputType(long lIndex,TunerInputType InputType) = 0;")
cpp_quote("    virtual HRESULT WINAPI get_InputType(long lIndex,TunerInputType *pInputType) = 0;")
cpp_quote("    virtual HRESULT WINAPI put_ConnectInput(long lIndex) = 0;")
cpp_quote("    virtual HRESULT WINAPI get_ConnectInput(long *plIndex) = 0;")
cpp_quote("    virtual HRESULT WINAPI get_VideoFrequency(long *lFreq) = 0;")
cpp_quote("    virtual HRESULT WINAPI get_AudioFrequency(long *lFreq) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IAMTVTunerVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IAMTVTuner *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IAMTVTuner *This);")
cpp_quote("      ULONG (WINAPI *Release)(IAMTVTuner *This);")
cpp_quote("      HRESULT (WINAPI *put_Channel)(IAMTVTuner *This,long lChannel,long lVideoSubChannel,long lAudioSubChannel);")
cpp_quote("      HRESULT (WINAPI *get_Channel)(IAMTVTuner *This,long *plChannel,long *plVideoSubChannel,long *plAudioSubChannel);")
cpp_quote("      HRESULT (WINAPI *ChannelMinMax)(IAMTVTuner *This,long *lChannelMin,long *lChannelMax);")
cpp_quote("      HRESULT (WINAPI *put_CountryCode)(IAMTVTuner *This,long lCountryCode);")
cpp_quote("      HRESULT (WINAPI *get_CountryCode)(IAMTVTuner *This,long *plCountryCode);")
cpp_quote("      HRESULT (WINAPI *put_TuningSpace)(IAMTVTuner *This,long lTuningSpace);")
cpp_quote("      HRESULT (WINAPI *get_TuningSpace)(IAMTVTuner *This,long *plTuningSpace);")
cpp_quote("      HRESULT (WINAPI *Logon)(IAMTVTuner *This,HANDLE hCurrentUser);")
cpp_quote("      HRESULT (WINAPI *Logout)(IAMTVTuner *This);")
cpp_quote("      HRESULT (WINAPI *SignalPresent)(IAMTVTuner *This,long *plSignalStrength);")
cpp_quote("      HRESULT (WINAPI *put_Mode)(IAMTVTuner *This,AMTunerModeType lMode);")
cpp_quote("      HRESULT (WINAPI *get_Mode)(IAMTVTuner *This,AMTunerModeType *plMode);")
cpp_quote("      HRESULT (WINAPI *GetAvailableModes)(IAMTVTuner *This,long *plModes);")
cpp_quote("      HRESULT (WINAPI *RegisterNotificationCallBack)(IAMTVTuner *This,IAMTunerNotification *pNotify,long lEvents);")
cpp_quote("      HRESULT (WINAPI *UnRegisterNotificationCallBack)(IAMTVTuner *This,IAMTunerNotification *pNotify);")
cpp_quote("      HRESULT (WINAPI *get_AvailableTVFormats)(IAMTVTuner *This,long *lAnalogVideoStandard);")
cpp_quote("      HRESULT (WINAPI *get_TVFormat)(IAMTVTuner *This,long *plAnalogVideoStandard);")
cpp_quote("      HRESULT (WINAPI *AutoTune)(IAMTVTuner *This,long lChannel,long *plFoundSignal);")
cpp_quote("      HRESULT (WINAPI *StoreAutoTune)(IAMTVTuner *This);")
cpp_quote("      HRESULT (WINAPI *get_NumInputConnections)(IAMTVTuner *This,long *plNumInputConnections);")
cpp_quote("      HRESULT (WINAPI *put_InputType)(IAMTVTuner *This,long lIndex,TunerInputType InputType);")
cpp_quote("      HRESULT (WINAPI *get_InputType)(IAMTVTuner *This,long lIndex,TunerInputType *pInputType);")
cpp_quote("      HRESULT (WINAPI *put_ConnectInput)(IAMTVTuner *This,long lIndex);")
cpp_quote("      HRESULT (WINAPI *get_ConnectInput)(IAMTVTuner *This,long *plIndex);")
cpp_quote("      HRESULT (WINAPI *get_VideoFrequency)(IAMTVTuner *This,long *lFreq);")
cpp_quote("      HRESULT (WINAPI *get_AudioFrequency)(IAMTVTuner *This,long *lFreq);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IAMTVTunerVtbl;")
cpp_quote("  struct IAMTVTuner {")
cpp_quote("    CONST_VTBL struct IAMTVTunerVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IAMTVTuner_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IAMTVTuner_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IAMTVTuner_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IAMTVTuner_put_Channel(This,lChannel,lVideoSubChannel,lAudioSubChannel) (This)->lpVtbl->put_Channel(This,lChannel,lVideoSubChannel,lAudioSubChannel)")
cpp_quote("#define IAMTVTuner_get_Channel(This,plChannel,plVideoSubChannel,plAudioSubChannel) (This)->lpVtbl->get_Channel(This,plChannel,plVideoSubChannel,plAudioSubChannel)")
cpp_quote("#define IAMTVTuner_ChannelMinMax(This,lChannelMin,lChannelMax) (This)->lpVtbl->ChannelMinMax(This,lChannelMin,lChannelMax)")
cpp_quote("#define IAMTVTuner_put_CountryCode(This,lCountryCode) (This)->lpVtbl->put_CountryCode(This,lCountryCode)")
cpp_quote("#define IAMTVTuner_get_CountryCode(This,plCountryCode) (This)->lpVtbl->get_CountryCode(This,plCountryCode)")
cpp_quote("#define IAMTVTuner_put_TuningSpace(This,lTuningSpace) (This)->lpVtbl->put_TuningSpace(This,lTuningSpace)")
cpp_quote("#define IAMTVTuner_get_TuningSpace(This,plTuningSpace) (This)->lpVtbl->get_TuningSpace(This,plTuningSpace)")
cpp_quote("#define IAMTVTuner_Logon(This,hCurrentUser) (This)->lpVtbl->Logon(This,hCurrentUser)")
cpp_quote("#define IAMTVTuner_Logout(This) (This)->lpVtbl->Logout(This)")
cpp_quote("#define IAMTVTuner_SignalPresent(This,plSignalStrength) (This)->lpVtbl->SignalPresent(This,plSignalStrength)")
cpp_quote("#define IAMTVTuner_put_Mode(This,lMode) (This)->lpVtbl->put_Mode(This,lMode)")
cpp_quote("#define IAMTVTuner_get_Mode(This,plMode) (This)->lpVtbl->get_Mode(This,plMode)")
cpp_quote("#define IAMTVTuner_GetAvailableModes(This,plModes) (This)->lpVtbl->GetAvailableModes(This,plModes)")
cpp_quote("#define IAMTVTuner_RegisterNotificationCallBack(This,pNotify,lEvents) (This)->lpVtbl->RegisterNotificationCallBack(This,pNotify,lEvents)")
cpp_quote("#define IAMTVTuner_UnRegisterNotificationCallBack(This,pNotify) (This)->lpVtbl->UnRegisterNotificationCallBack(This,pNotify)")
cpp_quote("#define IAMTVTuner_get_AvailableTVFormats(This,lAnalogVideoStandard) (This)->lpVtbl->get_AvailableTVFormats(This,lAnalogVideoStandard)")
cpp_quote("#define IAMTVTuner_get_TVFormat(This,plAnalogVideoStandard) (This)->lpVtbl->get_TVFormat(This,plAnalogVideoStandard)")
cpp_quote("#define IAMTVTuner_AutoTune(This,lChannel,plFoundSignal) (This)->lpVtbl->AutoTune(This,lChannel,plFoundSignal)")
cpp_quote("#define IAMTVTuner_StoreAutoTune(This) (This)->lpVtbl->StoreAutoTune(This)")
cpp_quote("#define IAMTVTuner_get_NumInputConnections(This,plNumInputConnections) (This)->lpVtbl->get_NumInputConnections(This,plNumInputConnections)")
cpp_quote("#define IAMTVTuner_put_InputType(This,lIndex,InputType) (This)->lpVtbl->put_InputType(This,lIndex,InputType)")
cpp_quote("#define IAMTVTuner_get_InputType(This,lIndex,pInputType) (This)->lpVtbl->get_InputType(This,lIndex,pInputType)")
cpp_quote("#define IAMTVTuner_put_ConnectInput(This,lIndex) (This)->lpVtbl->put_ConnectInput(This,lIndex)")
cpp_quote("#define IAMTVTuner_get_ConnectInput(This,plIndex) (This)->lpVtbl->get_ConnectInput(This,plIndex)")
cpp_quote("#define IAMTVTuner_get_VideoFrequency(This,lFreq) (This)->lpVtbl->get_VideoFrequency(This,lFreq)")
cpp_quote("#define IAMTVTuner_get_AudioFrequency(This,lFreq) (This)->lpVtbl->get_AudioFrequency(This,lFreq)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IAMTVTuner_get_AvailableTVFormats_Proxy(IAMTVTuner *This,long *lAnalogVideoStandard);")
cpp_quote("  void __RPC_STUB IAMTVTuner_get_AvailableTVFormats_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMTVTuner_get_TVFormat_Proxy(IAMTVTuner *This,long *plAnalogVideoStandard);")
cpp_quote("  void __RPC_STUB IAMTVTuner_get_TVFormat_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMTVTuner_AutoTune_Proxy(IAMTVTuner *This,long lChannel,long *plFoundSignal);")
cpp_quote("  void __RPC_STUB IAMTVTuner_AutoTune_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMTVTuner_StoreAutoTune_Proxy(IAMTVTuner *This);")
cpp_quote("  void __RPC_STUB IAMTVTuner_StoreAutoTune_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMTVTuner_get_NumInputConnections_Proxy(IAMTVTuner *This,long *plNumInputConnections);")
cpp_quote("  void __RPC_STUB IAMTVTuner_get_NumInputConnections_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMTVTuner_put_InputType_Proxy(IAMTVTuner *This,long lIndex,TunerInputType InputType);")
cpp_quote("  void __RPC_STUB IAMTVTuner_put_InputType_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMTVTuner_get_InputType_Proxy(IAMTVTuner *This,long lIndex,TunerInputType *pInputType);")
cpp_quote("  void __RPC_STUB IAMTVTuner_get_InputType_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMTVTuner_put_ConnectInput_Proxy(IAMTVTuner *This,long lIndex);")
cpp_quote("  void __RPC_STUB IAMTVTuner_put_ConnectInput_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMTVTuner_get_ConnectInput_Proxy(IAMTVTuner *This,long *plIndex);")
cpp_quote("  void __RPC_STUB IAMTVTuner_get_ConnectInput_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMTVTuner_get_VideoFrequency_Proxy(IAMTVTuner *This,long *lFreq);")
cpp_quote("  void __RPC_STUB IAMTVTuner_get_VideoFrequency_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMTVTuner_get_AudioFrequency_Proxy(IAMTVTuner *This,long *lFreq);")
cpp_quote("  void __RPC_STUB IAMTVTuner_get_AudioFrequency_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IBPCSatelliteTuner_INTERFACE_DEFINED__")
cpp_quote("#define __IBPCSatelliteTuner_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IBPCSatelliteTuner;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IBPCSatelliteTuner : public IAMTuner {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI get_DefaultSubChannelTypes(long *plDefaultVideoType,long *plDefaultAudioType) = 0;")
cpp_quote("    virtual HRESULT WINAPI put_DefaultSubChannelTypes(long lDefaultVideoType,long lDefaultAudioType) = 0;")
cpp_quote("    virtual HRESULT WINAPI IsTapingPermitted(void) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IBPCSatelliteTunerVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IBPCSatelliteTuner *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IBPCSatelliteTuner *This);")
cpp_quote("      ULONG (WINAPI *Release)(IBPCSatelliteTuner *This);")
cpp_quote("      HRESULT (WINAPI *put_Channel)(IBPCSatelliteTuner *This,long lChannel,long lVideoSubChannel,long lAudioSubChannel);")
cpp_quote("      HRESULT (WINAPI *get_Channel)(IBPCSatelliteTuner *This,long *plChannel,long *plVideoSubChannel,long *plAudioSubChannel);")
cpp_quote("      HRESULT (WINAPI *ChannelMinMax)(IBPCSatelliteTuner *This,long *lChannelMin,long *lChannelMax);")
cpp_quote("      HRESULT (WINAPI *put_CountryCode)(IBPCSatelliteTuner *This,long lCountryCode);")
cpp_quote("      HRESULT (WINAPI *get_CountryCode)(IBPCSatelliteTuner *This,long *plCountryCode);")
cpp_quote("      HRESULT (WINAPI *put_TuningSpace)(IBPCSatelliteTuner *This,long lTuningSpace);")
cpp_quote("      HRESULT (WINAPI *get_TuningSpace)(IBPCSatelliteTuner *This,long *plTuningSpace);")
cpp_quote("      HRESULT (WINAPI *Logon)(IBPCSatelliteTuner *This,HANDLE hCurrentUser);")
cpp_quote("      HRESULT (WINAPI *Logout)(IBPCSatelliteTuner *This);")
cpp_quote("      HRESULT (WINAPI *SignalPresent)(IBPCSatelliteTuner *This,long *plSignalStrength);")
cpp_quote("      HRESULT (WINAPI *put_Mode)(IBPCSatelliteTuner *This,AMTunerModeType lMode);")
cpp_quote("      HRESULT (WINAPI *get_Mode)(IBPCSatelliteTuner *This,AMTunerModeType *plMode);")
cpp_quote("      HRESULT (WINAPI *GetAvailableModes)(IBPCSatelliteTuner *This,long *plModes);")
cpp_quote("      HRESULT (WINAPI *RegisterNotificationCallBack)(IBPCSatelliteTuner *This,IAMTunerNotification *pNotify,long lEvents);")
cpp_quote("      HRESULT (WINAPI *UnRegisterNotificationCallBack)(IBPCSatelliteTuner *This,IAMTunerNotification *pNotify);")
cpp_quote("      HRESULT (WINAPI *get_DefaultSubChannelTypes)(IBPCSatelliteTuner *This,long *plDefaultVideoType,long *plDefaultAudioType);")
cpp_quote("      HRESULT (WINAPI *put_DefaultSubChannelTypes)(IBPCSatelliteTuner *This,long lDefaultVideoType,long lDefaultAudioType);")
cpp_quote("      HRESULT (WINAPI *IsTapingPermitted)(IBPCSatelliteTuner *This);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IBPCSatelliteTunerVtbl;")
cpp_quote("  struct IBPCSatelliteTuner {")
cpp_quote("    CONST_VTBL struct IBPCSatelliteTunerVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IBPCSatelliteTuner_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IBPCSatelliteTuner_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IBPCSatelliteTuner_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IBPCSatelliteTuner_put_Channel(This,lChannel,lVideoSubChannel,lAudioSubChannel) (This)->lpVtbl->put_Channel(This,lChannel,lVideoSubChannel,lAudioSubChannel)")
cpp_quote("#define IBPCSatelliteTuner_get_Channel(This,plChannel,plVideoSubChannel,plAudioSubChannel) (This)->lpVtbl->get_Channel(This,plChannel,plVideoSubChannel,plAudioSubChannel)")
cpp_quote("#define IBPCSatelliteTuner_ChannelMinMax(This,lChannelMin,lChannelMax) (This)->lpVtbl->ChannelMinMax(This,lChannelMin,lChannelMax)")
cpp_quote("#define IBPCSatelliteTuner_put_CountryCode(This,lCountryCode) (This)->lpVtbl->put_CountryCode(This,lCountryCode)")
cpp_quote("#define IBPCSatelliteTuner_get_CountryCode(This,plCountryCode) (This)->lpVtbl->get_CountryCode(This,plCountryCode)")
cpp_quote("#define IBPCSatelliteTuner_put_TuningSpace(This,lTuningSpace) (This)->lpVtbl->put_TuningSpace(This,lTuningSpace)")
cpp_quote("#define IBPCSatelliteTuner_get_TuningSpace(This,plTuningSpace) (This)->lpVtbl->get_TuningSpace(This,plTuningSpace)")
cpp_quote("#define IBPCSatelliteTuner_Logon(This,hCurrentUser) (This)->lpVtbl->Logon(This,hCurrentUser)")
cpp_quote("#define IBPCSatelliteTuner_Logout(This) (This)->lpVtbl->Logout(This)")
cpp_quote("#define IBPCSatelliteTuner_SignalPresent(This,plSignalStrength) (This)->lpVtbl->SignalPresent(This,plSignalStrength)")
cpp_quote("#define IBPCSatelliteTuner_put_Mode(This,lMode) (This)->lpVtbl->put_Mode(This,lMode)")
cpp_quote("#define IBPCSatelliteTuner_get_Mode(This,plMode) (This)->lpVtbl->get_Mode(This,plMode)")
cpp_quote("#define IBPCSatelliteTuner_GetAvailableModes(This,plModes) (This)->lpVtbl->GetAvailableModes(This,plModes)")
cpp_quote("#define IBPCSatelliteTuner_RegisterNotificationCallBack(This,pNotify,lEvents) (This)->lpVtbl->RegisterNotificationCallBack(This,pNotify,lEvents)")
cpp_quote("#define IBPCSatelliteTuner_UnRegisterNotificationCallBack(This,pNotify) (This)->lpVtbl->UnRegisterNotificationCallBack(This,pNotify)")
cpp_quote("#define IBPCSatelliteTuner_get_DefaultSubChannelTypes(This,plDefaultVideoType,plDefaultAudioType) (This)->lpVtbl->get_DefaultSubChannelTypes(This,plDefaultVideoType,plDefaultAudioType)")
cpp_quote("#define IBPCSatelliteTuner_put_DefaultSubChannelTypes(This,lDefaultVideoType,lDefaultAudioType) (This)->lpVtbl->put_DefaultSubChannelTypes(This,lDefaultVideoType,lDefaultAudioType)")
cpp_quote("#define IBPCSatelliteTuner_IsTapingPermitted(This) (This)->lpVtbl->IsTapingPermitted(This)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IBPCSatelliteTuner_get_DefaultSubChannelTypes_Proxy(IBPCSatelliteTuner *This,long *plDefaultVideoType,long *plDefaultAudioType);")
cpp_quote("  void __RPC_STUB IBPCSatelliteTuner_get_DefaultSubChannelTypes_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IBPCSatelliteTuner_put_DefaultSubChannelTypes_Proxy(IBPCSatelliteTuner *This,long lDefaultVideoType,long lDefaultAudioType);")
cpp_quote("  void __RPC_STUB IBPCSatelliteTuner_put_DefaultSubChannelTypes_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IBPCSatelliteTuner_IsTapingPermitted_Proxy(IBPCSatelliteTuner *This);")
cpp_quote("  void __RPC_STUB IBPCSatelliteTuner_IsTapingPermitted_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  typedef enum tagTVAudioMode {")
cpp_quote("    AMTVAUDIO_MODE_MONO = 0x1,AMTVAUDIO_MODE_STEREO = 0x2,AMTVAUDIO_MODE_LANG_A = 0x10,AMTVAUDIO_MODE_LANG_B = 0x20,AMTVAUDIO_MODE_LANG_C = 0x40")
cpp_quote("  } TVAudioMode;")
cpp_quote("")
cpp_quote("  typedef enum tagAMTVAudioEventType {")
cpp_quote("    AMTVAUDIO_EVENT_CHANGED = 0x1")
cpp_quote("  } AMTVAudioEventType;")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0182_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0182_v0_0_s_ifspec;")
cpp_quote("#ifndef __IAMTVAudio_INTERFACE_DEFINED__")
cpp_quote("#define __IAMTVAudio_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IAMTVAudio;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IAMTVAudio : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI GetHardwareSupportedTVAudioModes(long *plModes) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetAvailableTVAudioModes(long *plModes) = 0;")
cpp_quote("    virtual HRESULT WINAPI get_TVAudioMode(long *plMode) = 0;")
cpp_quote("    virtual HRESULT WINAPI put_TVAudioMode(long lMode) = 0;")
cpp_quote("    virtual HRESULT WINAPI RegisterNotificationCallBack(IAMTunerNotification *pNotify,long lEvents) = 0;")
cpp_quote("    virtual HRESULT WINAPI UnRegisterNotificationCallBack(IAMTunerNotification *pNotify) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IAMTVAudioVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IAMTVAudio *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IAMTVAudio *This);")
cpp_quote("      ULONG (WINAPI *Release)(IAMTVAudio *This);")
cpp_quote("      HRESULT (WINAPI *GetHardwareSupportedTVAudioModes)(IAMTVAudio *This,long *plModes);")
cpp_quote("      HRESULT (WINAPI *GetAvailableTVAudioModes)(IAMTVAudio *This,long *plModes);")
cpp_quote("      HRESULT (WINAPI *get_TVAudioMode)(IAMTVAudio *This,long *plMode);")
cpp_quote("      HRESULT (WINAPI *put_TVAudioMode)(IAMTVAudio *This,long lMode);")
cpp_quote("      HRESULT (WINAPI *RegisterNotificationCallBack)(IAMTVAudio *This,IAMTunerNotification *pNotify,long lEvents);")
cpp_quote("      HRESULT (WINAPI *UnRegisterNotificationCallBack)(IAMTVAudio *This,IAMTunerNotification *pNotify);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IAMTVAudioVtbl;")
cpp_quote("  struct IAMTVAudio {")
cpp_quote("    CONST_VTBL struct IAMTVAudioVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IAMTVAudio_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IAMTVAudio_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IAMTVAudio_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IAMTVAudio_GetHardwareSupportedTVAudioModes(This,plModes) (This)->lpVtbl->GetHardwareSupportedTVAudioModes(This,plModes)")
cpp_quote("#define IAMTVAudio_GetAvailableTVAudioModes(This,plModes) (This)->lpVtbl->GetAvailableTVAudioModes(This,plModes)")
cpp_quote("#define IAMTVAudio_get_TVAudioMode(This,plMode) (This)->lpVtbl->get_TVAudioMode(This,plMode)")
cpp_quote("#define IAMTVAudio_put_TVAudioMode(This,lMode) (This)->lpVtbl->put_TVAudioMode(This,lMode)")
cpp_quote("#define IAMTVAudio_RegisterNotificationCallBack(This,pNotify,lEvents) (This)->lpVtbl->RegisterNotificationCallBack(This,pNotify,lEvents)")
cpp_quote("#define IAMTVAudio_UnRegisterNotificationCallBack(This,pNotify) (This)->lpVtbl->UnRegisterNotificationCallBack(This,pNotify)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IAMTVAudio_GetHardwareSupportedTVAudioModes_Proxy(IAMTVAudio *This,long *plModes);")
cpp_quote("  void __RPC_STUB IAMTVAudio_GetHardwareSupportedTVAudioModes_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMTVAudio_GetAvailableTVAudioModes_Proxy(IAMTVAudio *This,long *plModes);")
cpp_quote("  void __RPC_STUB IAMTVAudio_GetAvailableTVAudioModes_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMTVAudio_get_TVAudioMode_Proxy(IAMTVAudio *This,long *plMode);")
cpp_quote("  void __RPC_STUB IAMTVAudio_get_TVAudioMode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMTVAudio_put_TVAudioMode_Proxy(IAMTVAudio *This,long lMode);")
cpp_quote("  void __RPC_STUB IAMTVAudio_put_TVAudioMode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMTVAudio_RegisterNotificationCallBack_Proxy(IAMTVAudio *This,IAMTunerNotification *pNotify,long lEvents);")
cpp_quote("  void __RPC_STUB IAMTVAudio_RegisterNotificationCallBack_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMTVAudio_UnRegisterNotificationCallBack_Proxy(IAMTVAudio *This,IAMTunerNotification *pNotify);")
cpp_quote("  void __RPC_STUB IAMTVAudio_UnRegisterNotificationCallBack_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMTVAudioNotification_INTERFACE_DEFINED__")
cpp_quote("#define __IAMTVAudioNotification_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IAMTVAudioNotification;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IAMTVAudioNotification : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI OnEvent(AMTVAudioEventType Event) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IAMTVAudioNotificationVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IAMTVAudioNotification *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IAMTVAudioNotification *This);")
cpp_quote("      ULONG (WINAPI *Release)(IAMTVAudioNotification *This);")
cpp_quote("      HRESULT (WINAPI *OnEvent)(IAMTVAudioNotification *This,AMTVAudioEventType Event);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IAMTVAudioNotificationVtbl;")
cpp_quote("  struct IAMTVAudioNotification {")
cpp_quote("    CONST_VTBL struct IAMTVAudioNotificationVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IAMTVAudioNotification_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IAMTVAudioNotification_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IAMTVAudioNotification_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IAMTVAudioNotification_OnEvent(This,Event) (This)->lpVtbl->OnEvent(This,Event)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IAMTVAudioNotification_OnEvent_Proxy(IAMTVAudioNotification *This,AMTVAudioEventType Event);")
cpp_quote("  void __RPC_STUB IAMTVAudioNotification_OnEvent_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMAnalogVideoEncoder_INTERFACE_DEFINED__")
cpp_quote("#define __IAMAnalogVideoEncoder_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IAMAnalogVideoEncoder;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IAMAnalogVideoEncoder : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI get_AvailableTVFormats(long *lAnalogVideoStandard) = 0;")
cpp_quote("    virtual HRESULT WINAPI put_TVFormat(long lAnalogVideoStandard) = 0;")
cpp_quote("    virtual HRESULT WINAPI get_TVFormat(long *plAnalogVideoStandard) = 0;")
cpp_quote("    virtual HRESULT WINAPI put_CopyProtection(long lVideoCopyProtection) = 0;")
cpp_quote("    virtual HRESULT WINAPI get_CopyProtection(long *lVideoCopyProtection) = 0;")
cpp_quote("    virtual HRESULT WINAPI put_CCEnable(long lCCEnable) = 0;")
cpp_quote("    virtual HRESULT WINAPI get_CCEnable(long *lCCEnable) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IAMAnalogVideoEncoderVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IAMAnalogVideoEncoder *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IAMAnalogVideoEncoder *This);")
cpp_quote("      ULONG (WINAPI *Release)(IAMAnalogVideoEncoder *This);")
cpp_quote("      HRESULT (WINAPI *get_AvailableTVFormats)(IAMAnalogVideoEncoder *This,long *lAnalogVideoStandard);")
cpp_quote("      HRESULT (WINAPI *put_TVFormat)(IAMAnalogVideoEncoder *This,long lAnalogVideoStandard);")
cpp_quote("      HRESULT (WINAPI *get_TVFormat)(IAMAnalogVideoEncoder *This,long *plAnalogVideoStandard);")
cpp_quote("      HRESULT (WINAPI *put_CopyProtection)(IAMAnalogVideoEncoder *This,long lVideoCopyProtection);")
cpp_quote("      HRESULT (WINAPI *get_CopyProtection)(IAMAnalogVideoEncoder *This,long *lVideoCopyProtection);")
cpp_quote("      HRESULT (WINAPI *put_CCEnable)(IAMAnalogVideoEncoder *This,long lCCEnable);")
cpp_quote("      HRESULT (WINAPI *get_CCEnable)(IAMAnalogVideoEncoder *This,long *lCCEnable);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IAMAnalogVideoEncoderVtbl;")
cpp_quote("  struct IAMAnalogVideoEncoder {")
cpp_quote("    CONST_VTBL struct IAMAnalogVideoEncoderVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IAMAnalogVideoEncoder_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IAMAnalogVideoEncoder_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IAMAnalogVideoEncoder_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IAMAnalogVideoEncoder_get_AvailableTVFormats(This,lAnalogVideoStandard) (This)->lpVtbl->get_AvailableTVFormats(This,lAnalogVideoStandard)")
cpp_quote("#define IAMAnalogVideoEncoder_put_TVFormat(This,lAnalogVideoStandard) (This)->lpVtbl->put_TVFormat(This,lAnalogVideoStandard)")
cpp_quote("#define IAMAnalogVideoEncoder_get_TVFormat(This,plAnalogVideoStandard) (This)->lpVtbl->get_TVFormat(This,plAnalogVideoStandard)")
cpp_quote("#define IAMAnalogVideoEncoder_put_CopyProtection(This,lVideoCopyProtection) (This)->lpVtbl->put_CopyProtection(This,lVideoCopyProtection)")
cpp_quote("#define IAMAnalogVideoEncoder_get_CopyProtection(This,lVideoCopyProtection) (This)->lpVtbl->get_CopyProtection(This,lVideoCopyProtection)")
cpp_quote("#define IAMAnalogVideoEncoder_put_CCEnable(This,lCCEnable) (This)->lpVtbl->put_CCEnable(This,lCCEnable)")
cpp_quote("#define IAMAnalogVideoEncoder_get_CCEnable(This,lCCEnable) (This)->lpVtbl->get_CCEnable(This,lCCEnable)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IAMAnalogVideoEncoder_get_AvailableTVFormats_Proxy(IAMAnalogVideoEncoder *This,long *lAnalogVideoStandard);")
cpp_quote("  void __RPC_STUB IAMAnalogVideoEncoder_get_AvailableTVFormats_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMAnalogVideoEncoder_put_TVFormat_Proxy(IAMAnalogVideoEncoder *This,long lAnalogVideoStandard);")
cpp_quote("  void __RPC_STUB IAMAnalogVideoEncoder_put_TVFormat_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMAnalogVideoEncoder_get_TVFormat_Proxy(IAMAnalogVideoEncoder *This,long *plAnalogVideoStandard);")
cpp_quote("  void __RPC_STUB IAMAnalogVideoEncoder_get_TVFormat_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMAnalogVideoEncoder_put_CopyProtection_Proxy(IAMAnalogVideoEncoder *This,long lVideoCopyProtection);")
cpp_quote("  void __RPC_STUB IAMAnalogVideoEncoder_put_CopyProtection_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMAnalogVideoEncoder_get_CopyProtection_Proxy(IAMAnalogVideoEncoder *This,long *lVideoCopyProtection);")
cpp_quote("  void __RPC_STUB IAMAnalogVideoEncoder_get_CopyProtection_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMAnalogVideoEncoder_put_CCEnable_Proxy(IAMAnalogVideoEncoder *This,long lCCEnable);")
cpp_quote("  void __RPC_STUB IAMAnalogVideoEncoder_put_CCEnable_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMAnalogVideoEncoder_get_CCEnable_Proxy(IAMAnalogVideoEncoder *This,long *lCCEnable);")
cpp_quote("  void __RPC_STUB IAMAnalogVideoEncoder_get_CCEnable_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  typedef enum __MIDL___MIDL_itf_strmif_0185_0001 {")
cpp_quote("    AMPROPERTY_PIN_CATEGORY = 0,AMPROPERTY_PIN_MEDIUM = AMPROPERTY_PIN_CATEGORY + 1")
cpp_quote("  } AMPROPERTY_PIN;")
cpp_quote("")
cpp_quote("#ifndef _IKsPropertySet_")
cpp_quote("#define _IKsPropertySet_")
cpp_quote("#define KSPROPERTY_SUPPORT_GET 1")
cpp_quote("#define KSPROPERTY_SUPPORT_SET 2")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0185_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0185_v0_0_s_ifspec;")
cpp_quote("#ifndef __IKsPropertySet_INTERFACE_DEFINED__")
cpp_quote("#define __IKsPropertySet_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IKsPropertySet;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IKsPropertySet : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI Set(REFGUID guidPropSet,DWORD dwPropID,LPVOID pInstanceData,DWORD cbInstanceData,LPVOID pPropData,DWORD cbPropData) = 0;")
cpp_quote("    virtual HRESULT WINAPI Get(REFGUID guidPropSet,DWORD dwPropID,LPVOID pInstanceData,DWORD cbInstanceData,LPVOID pPropData,DWORD cbPropData,DWORD *pcbReturned) = 0;")
cpp_quote("    virtual HRESULT WINAPI QuerySupported(REFGUID guidPropSet,DWORD dwPropID,DWORD *pTypeSupport) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IKsPropertySetVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IKsPropertySet *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IKsPropertySet *This);")
cpp_quote("      ULONG (WINAPI *Release)(IKsPropertySet *This);")
cpp_quote("      HRESULT (WINAPI *Set)(IKsPropertySet *This,REFGUID guidPropSet,DWORD dwPropID,LPVOID pInstanceData,DWORD cbInstanceData,LPVOID pPropData,DWORD cbPropData);")
cpp_quote("      HRESULT (WINAPI *Get)(IKsPropertySet *This,REFGUID guidPropSet,DWORD dwPropID,LPVOID pInstanceData,DWORD cbInstanceData,LPVOID pPropData,DWORD cbPropData,DWORD *pcbReturned);")
cpp_quote("      HRESULT (WINAPI *QuerySupported)(IKsPropertySet *This,REFGUID guidPropSet,DWORD dwPropID,DWORD *pTypeSupport);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IKsPropertySetVtbl;")
cpp_quote("  struct IKsPropertySet {")
cpp_quote("    CONST_VTBL struct IKsPropertySetVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IKsPropertySet_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IKsPropertySet_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IKsPropertySet_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IKsPropertySet_Set(This,guidPropSet,dwPropID,pInstanceData,cbInstanceData,pPropData,cbPropData) (This)->lpVtbl->Set(This,guidPropSet,dwPropID,pInstanceData,cbInstanceData,pPropData,cbPropData)")
cpp_quote("#define IKsPropertySet_Get(This,guidPropSet,dwPropID,pInstanceData,cbInstanceData,pPropData,cbPropData,pcbReturned) (This)->lpVtbl->Get(This,guidPropSet,dwPropID,pInstanceData,cbInstanceData,pPropData,cbPropData,pcbReturned)")
cpp_quote("#define IKsPropertySet_QuerySupported(This,guidPropSet,dwPropID,pTypeSupport) (This)->lpVtbl->QuerySupported(This,guidPropSet,dwPropID,pTypeSupport)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IKsPropertySet_RemoteSet_Proxy(IKsPropertySet *This,REFGUID guidPropSet,DWORD dwPropID,byte *pInstanceData,DWORD cbInstanceData,byte *pPropData,DWORD cbPropData);")
cpp_quote("  void __RPC_STUB IKsPropertySet_RemoteSet_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IKsPropertySet_RemoteGet_Proxy(IKsPropertySet *This,REFGUID guidPropSet,DWORD dwPropID,byte *pInstanceData,DWORD cbInstanceData,byte *pPropData,DWORD cbPropData,DWORD *pcbReturned);")
cpp_quote("  void __RPC_STUB IKsPropertySet_RemoteGet_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IKsPropertySet_QuerySupported_Proxy(IKsPropertySet *This,REFGUID guidPropSet,DWORD dwPropID,DWORD *pTypeSupport);")
cpp_quote("  void __RPC_STUB IKsPropertySet_QuerySupported_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0186_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0186_v0_0_s_ifspec;")
cpp_quote("#ifndef __IMediaPropertyBag_INTERFACE_DEFINED__")
cpp_quote("#define __IMediaPropertyBag_INTERFACE_DEFINED__")
cpp_quote("  typedef IMediaPropertyBag *LPMEDIAPROPERTYBAG;")
cpp_quote("")
cpp_quote("  EXTERN_C const IID IID_IMediaPropertyBag;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IMediaPropertyBag : public IPropertyBag {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI EnumProperty(ULONG iProperty,VARIANT *pvarPropertyName,VARIANT *pvarPropertyValue) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IMediaPropertyBagVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IMediaPropertyBag *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IMediaPropertyBag *This);")
cpp_quote("      ULONG (WINAPI *Release)(IMediaPropertyBag *This);")
cpp_quote("      HRESULT (WINAPI *Read)(IMediaPropertyBag *This,LPCOLESTR pszPropName,VARIANT *pVar,IErrorLog *pErrorLog);")
cpp_quote("      HRESULT (WINAPI *Write)(IMediaPropertyBag *This,LPCOLESTR pszPropName,VARIANT *pVar);")
cpp_quote("      HRESULT (WINAPI *EnumProperty)(IMediaPropertyBag *This,ULONG iProperty,VARIANT *pvarPropertyName,VARIANT *pvarPropertyValue);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IMediaPropertyBagVtbl;")
cpp_quote("  struct IMediaPropertyBag {")
cpp_quote("    CONST_VTBL struct IMediaPropertyBagVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IMediaPropertyBag_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IMediaPropertyBag_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IMediaPropertyBag_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IMediaPropertyBag_Read(This,pszPropName,pVar,pErrorLog) (This)->lpVtbl->Read(This,pszPropName,pVar,pErrorLog)")
cpp_quote("#define IMediaPropertyBag_Write(This,pszPropName,pVar) (This)->lpVtbl->Write(This,pszPropName,pVar)")
cpp_quote("#define IMediaPropertyBag_EnumProperty(This,iProperty,pvarPropertyName,pvarPropertyValue) (This)->lpVtbl->EnumProperty(This,iProperty,pvarPropertyName,pvarPropertyValue)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IMediaPropertyBag_EnumProperty_Proxy(IMediaPropertyBag *This,ULONG iProperty,VARIANT *pvarPropertyName,VARIANT *pvarPropertyValue);")
cpp_quote("  void __RPC_STUB IMediaPropertyBag_EnumProperty_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IPersistMediaPropertyBag_INTERFACE_DEFINED__")
cpp_quote("#define __IPersistMediaPropertyBag_INTERFACE_DEFINED__")
cpp_quote("  typedef IPersistMediaPropertyBag *LPPERSISTMEDIAPROPERTYBAG;")
cpp_quote("")
cpp_quote("  EXTERN_C const IID IID_IPersistMediaPropertyBag;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IPersistMediaPropertyBag : public IPersist {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI InitNew(void) = 0;")
cpp_quote("    virtual HRESULT WINAPI Load(IMediaPropertyBag *pPropBag,IErrorLog *pErrorLog) = 0;")
cpp_quote("    virtual HRESULT WINAPI Save(IMediaPropertyBag *pPropBag,WINBOOL fClearDirty,WINBOOL fSaveAllProperties) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IPersistMediaPropertyBagVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IPersistMediaPropertyBag *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IPersistMediaPropertyBag *This);")
cpp_quote("      ULONG (WINAPI *Release)(IPersistMediaPropertyBag *This);")
cpp_quote("      HRESULT (WINAPI *GetClassID)(IPersistMediaPropertyBag *This,CLSID *pClassID);")
cpp_quote("      HRESULT (WINAPI *InitNew)(IPersistMediaPropertyBag *This);")
cpp_quote("      HRESULT (WINAPI *Load)(IPersistMediaPropertyBag *This,IMediaPropertyBag *pPropBag,IErrorLog *pErrorLog);")
cpp_quote("      HRESULT (WINAPI *Save)(IPersistMediaPropertyBag *This,IMediaPropertyBag *pPropBag,WINBOOL fClearDirty,WINBOOL fSaveAllProperties);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IPersistMediaPropertyBagVtbl;")
cpp_quote("  struct IPersistMediaPropertyBag {")
cpp_quote("    CONST_VTBL struct IPersistMediaPropertyBagVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IPersistMediaPropertyBag_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IPersistMediaPropertyBag_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IPersistMediaPropertyBag_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IPersistMediaPropertyBag_GetClassID(This,pClassID) (This)->lpVtbl->GetClassID(This,pClassID)")
cpp_quote("#define IPersistMediaPropertyBag_InitNew(This) (This)->lpVtbl->InitNew(This)")
cpp_quote("#define IPersistMediaPropertyBag_Load(This,pPropBag,pErrorLog) (This)->lpVtbl->Load(This,pPropBag,pErrorLog)")
cpp_quote("#define IPersistMediaPropertyBag_Save(This,pPropBag,fClearDirty,fSaveAllProperties) (This)->lpVtbl->Save(This,pPropBag,fClearDirty,fSaveAllProperties)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IPersistMediaPropertyBag_InitNew_Proxy(IPersistMediaPropertyBag *This);")
cpp_quote("  void __RPC_STUB IPersistMediaPropertyBag_InitNew_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IPersistMediaPropertyBag_Load_Proxy(IPersistMediaPropertyBag *This,IMediaPropertyBag *pPropBag,IErrorLog *pErrorLog);")
cpp_quote("  void __RPC_STUB IPersistMediaPropertyBag_Load_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IPersistMediaPropertyBag_Save_Proxy(IPersistMediaPropertyBag *This,IMediaPropertyBag *pPropBag,WINBOOL fClearDirty,WINBOOL fSaveAllProperties);")
cpp_quote("  void __RPC_STUB IPersistMediaPropertyBag_Save_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMPhysicalPinInfo_INTERFACE_DEFINED__")
cpp_quote("#define __IAMPhysicalPinInfo_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IAMPhysicalPinInfo;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IAMPhysicalPinInfo : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI GetPhysicalType(long *pType,LPOLESTR *ppszType) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IAMPhysicalPinInfoVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IAMPhysicalPinInfo *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IAMPhysicalPinInfo *This);")
cpp_quote("      ULONG (WINAPI *Release)(IAMPhysicalPinInfo *This);")
cpp_quote("      HRESULT (WINAPI *GetPhysicalType)(IAMPhysicalPinInfo *This,long *pType,LPOLESTR *ppszType);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IAMPhysicalPinInfoVtbl;")
cpp_quote("  struct IAMPhysicalPinInfo {")
cpp_quote("    CONST_VTBL struct IAMPhysicalPinInfoVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IAMPhysicalPinInfo_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IAMPhysicalPinInfo_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IAMPhysicalPinInfo_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IAMPhysicalPinInfo_GetPhysicalType(This,pType,ppszType) (This)->lpVtbl->GetPhysicalType(This,pType,ppszType)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IAMPhysicalPinInfo_GetPhysicalType_Proxy(IAMPhysicalPinInfo *This,long *pType,LPOLESTR *ppszType);")
cpp_quote("  void __RPC_STUB IAMPhysicalPinInfo_GetPhysicalType_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  typedef IAMPhysicalPinInfo *PAMPHYSICALPININFO;")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0338_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0338_v0_0_s_ifspec;")
cpp_quote("#ifndef __IAMExtDevice_INTERFACE_DEFINED__")
cpp_quote("#define __IAMExtDevice_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IAMExtDevice;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IAMExtDevice : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI GetCapability(long Capability,long *pValue,double *pdblValue) = 0;")
cpp_quote("    virtual HRESULT WINAPI get_ExternalDeviceID(LPOLESTR *ppszData) = 0;")
cpp_quote("    virtual HRESULT WINAPI get_ExternalDeviceVersion(LPOLESTR *ppszData) = 0;")
cpp_quote("    virtual HRESULT WINAPI put_DevicePower(long PowerMode) = 0;")
cpp_quote("    virtual HRESULT WINAPI get_DevicePower(long *pPowerMode) = 0;")
cpp_quote("    virtual HRESULT WINAPI Calibrate(HEVENT hEvent,long Mode,long *pStatus) = 0;")
cpp_quote("    virtual HRESULT WINAPI put_DevicePort(long DevicePort) = 0;")
cpp_quote("    virtual HRESULT WINAPI get_DevicePort(long *pDevicePort) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IAMExtDeviceVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IAMExtDevice *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IAMExtDevice *This);")
cpp_quote("      ULONG (WINAPI *Release)(IAMExtDevice *This);")
cpp_quote("      HRESULT (WINAPI *GetCapability)(IAMExtDevice *This,long Capability,long *pValue,double *pdblValue);")
cpp_quote("      HRESULT (WINAPI *get_ExternalDeviceID)(IAMExtDevice *This,LPOLESTR *ppszData);")
cpp_quote("      HRESULT (WINAPI *get_ExternalDeviceVersion)(IAMExtDevice *This,LPOLESTR *ppszData);")
cpp_quote("      HRESULT (WINAPI *put_DevicePower)(IAMExtDevice *This,long PowerMode);")
cpp_quote("      HRESULT (WINAPI *get_DevicePower)(IAMExtDevice *This,long *pPowerMode);")
cpp_quote("      HRESULT (WINAPI *Calibrate)(IAMExtDevice *This,HEVENT hEvent,long Mode,long *pStatus);")
cpp_quote("      HRESULT (WINAPI *put_DevicePort)(IAMExtDevice *This,long DevicePort);")
cpp_quote("      HRESULT (WINAPI *get_DevicePort)(IAMExtDevice *This,long *pDevicePort);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IAMExtDeviceVtbl;")
cpp_quote("  struct IAMExtDevice {")
cpp_quote("    CONST_VTBL struct IAMExtDeviceVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IAMExtDevice_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IAMExtDevice_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IAMExtDevice_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IAMExtDevice_GetCapability(This,Capability,pValue,pdblValue) (This)->lpVtbl->GetCapability(This,Capability,pValue,pdblValue)")
cpp_quote("#define IAMExtDevice_get_ExternalDeviceID(This,ppszData) (This)->lpVtbl->get_ExternalDeviceID(This,ppszData)")
cpp_quote("#define IAMExtDevice_get_ExternalDeviceVersion(This,ppszData) (This)->lpVtbl->get_ExternalDeviceVersion(This,ppszData)")
cpp_quote("#define IAMExtDevice_put_DevicePower(This,PowerMode) (This)->lpVtbl->put_DevicePower(This,PowerMode)")
cpp_quote("#define IAMExtDevice_get_DevicePower(This,pPowerMode) (This)->lpVtbl->get_DevicePower(This,pPowerMode)")
cpp_quote("#define IAMExtDevice_Calibrate(This,hEvent,Mode,pStatus) (This)->lpVtbl->Calibrate(This,hEvent,Mode,pStatus)")
cpp_quote("#define IAMExtDevice_put_DevicePort(This,DevicePort) (This)->lpVtbl->put_DevicePort(This,DevicePort)")
cpp_quote("#define IAMExtDevice_get_DevicePort(This,pDevicePort) (This)->lpVtbl->get_DevicePort(This,pDevicePort)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IAMExtDevice_GetCapability_Proxy(IAMExtDevice *This,long Capability,long *pValue,double *pdblValue);")
cpp_quote("  void __RPC_STUB IAMExtDevice_GetCapability_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMExtDevice_get_ExternalDeviceID_Proxy(IAMExtDevice *This,LPOLESTR *ppszData);")
cpp_quote("  void __RPC_STUB IAMExtDevice_get_ExternalDeviceID_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMExtDevice_get_ExternalDeviceVersion_Proxy(IAMExtDevice *This,LPOLESTR *ppszData);")
cpp_quote("  void __RPC_STUB IAMExtDevice_get_ExternalDeviceVersion_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMExtDevice_put_DevicePower_Proxy(IAMExtDevice *This,long PowerMode);")
cpp_quote("  void __RPC_STUB IAMExtDevice_put_DevicePower_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMExtDevice_get_DevicePower_Proxy(IAMExtDevice *This,long *pPowerMode);")
cpp_quote("  void __RPC_STUB IAMExtDevice_get_DevicePower_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMExtDevice_Calibrate_Proxy(IAMExtDevice *This,HEVENT hEvent,long Mode,long *pStatus);")
cpp_quote("  void __RPC_STUB IAMExtDevice_Calibrate_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMExtDevice_put_DevicePort_Proxy(IAMExtDevice *This,long DevicePort);")
cpp_quote("  void __RPC_STUB IAMExtDevice_put_DevicePort_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMExtDevice_get_DevicePort_Proxy(IAMExtDevice *This,long *pDevicePort);")
cpp_quote("  void __RPC_STUB IAMExtDevice_get_DevicePort_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  typedef IAMExtDevice *PEXTDEVICE;")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0339_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0339_v0_0_s_ifspec;")
cpp_quote("#ifndef __IAMExtTransport_INTERFACE_DEFINED__")
cpp_quote("#define __IAMExtTransport_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IAMExtTransport;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IAMExtTransport : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI GetCapability(long Capability,long *pValue,double *pdblValue) = 0;")
cpp_quote("    virtual HRESULT WINAPI put_MediaState(long State) = 0;")
cpp_quote("    virtual HRESULT WINAPI get_MediaState(long *pState) = 0;")
cpp_quote("    virtual HRESULT WINAPI put_LocalControl(long State) = 0;")
cpp_quote("    virtual HRESULT WINAPI get_LocalControl(long *pState) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetStatus(long StatusItem,long *pValue) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetTransportBasicParameters(long Param,long *pValue,LPOLESTR *ppszData) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetTransportBasicParameters(long Param,long Value,LPCOLESTR pszData) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetTransportVideoParameters(long Param,long *pValue) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetTransportVideoParameters(long Param,long Value) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetTransportAudioParameters(long Param,long *pValue) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetTransportAudioParameters(long Param,long Value) = 0;")
cpp_quote("    virtual HRESULT WINAPI put_Mode(long Mode) = 0;")
cpp_quote("    virtual HRESULT WINAPI get_Mode(long *pMode) = 0;")
cpp_quote("    virtual HRESULT WINAPI put_Rate(double dblRate) = 0;")
cpp_quote("    virtual HRESULT WINAPI get_Rate(double *pdblRate) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetChase(long *pEnabled,long *pOffset,HEVENT *phEvent) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetChase(long Enable,long Offset,HEVENT hEvent) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetBump(long *pSpeed,long *pDuration) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetBump(long Speed,long Duration) = 0;")
cpp_quote("    virtual HRESULT WINAPI get_AntiClogControl(long *pEnabled) = 0;")
cpp_quote("    virtual HRESULT WINAPI put_AntiClogControl(long Enable) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetEditPropertySet(long EditID,long *pState) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetEditPropertySet(long *pEditID,long State) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetEditProperty(long EditID,long Param,long *pValue) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetEditProperty(long EditID,long Param,long Value) = 0;")
cpp_quote("    virtual HRESULT WINAPI get_EditStart(long *pValue) = 0;")
cpp_quote("    virtual HRESULT WINAPI put_EditStart(long Value) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IAMExtTransportVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IAMExtTransport *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IAMExtTransport *This);")
cpp_quote("      ULONG (WINAPI *Release)(IAMExtTransport *This);")
cpp_quote("      HRESULT (WINAPI *GetCapability)(IAMExtTransport *This,long Capability,long *pValue,double *pdblValue);")
cpp_quote("      HRESULT (WINAPI *put_MediaState)(IAMExtTransport *This,long State);")
cpp_quote("      HRESULT (WINAPI *get_MediaState)(IAMExtTransport *This,long *pState);")
cpp_quote("      HRESULT (WINAPI *put_LocalControl)(IAMExtTransport *This,long State);")
cpp_quote("      HRESULT (WINAPI *get_LocalControl)(IAMExtTransport *This,long *pState);")
cpp_quote("      HRESULT (WINAPI *GetStatus)(IAMExtTransport *This,long StatusItem,long *pValue);")
cpp_quote("      HRESULT (WINAPI *GetTransportBasicParameters)(IAMExtTransport *This,long Param,long *pValue,LPOLESTR *ppszData);")
cpp_quote("      HRESULT (WINAPI *SetTransportBasicParameters)(IAMExtTransport *This,long Param,long Value,LPCOLESTR pszData);")
cpp_quote("      HRESULT (WINAPI *GetTransportVideoParameters)(IAMExtTransport *This,long Param,long *pValue);")
cpp_quote("      HRESULT (WINAPI *SetTransportVideoParameters)(IAMExtTransport *This,long Param,long Value);")
cpp_quote("      HRESULT (WINAPI *GetTransportAudioParameters)(IAMExtTransport *This,long Param,long *pValue);")
cpp_quote("      HRESULT (WINAPI *SetTransportAudioParameters)(IAMExtTransport *This,long Param,long Value);")
cpp_quote("      HRESULT (WINAPI *put_Mode)(IAMExtTransport *This,long Mode);")
cpp_quote("      HRESULT (WINAPI *get_Mode)(IAMExtTransport *This,long *pMode);")
cpp_quote("      HRESULT (WINAPI *put_Rate)(IAMExtTransport *This,double dblRate);")
cpp_quote("      HRESULT (WINAPI *get_Rate)(IAMExtTransport *This,double *pdblRate);")
cpp_quote("      HRESULT (WINAPI *GetChase)(IAMExtTransport *This,long *pEnabled,long *pOffset,HEVENT *phEvent);")
cpp_quote("      HRESULT (WINAPI *SetChase)(IAMExtTransport *This,long Enable,long Offset,HEVENT hEvent);")
cpp_quote("      HRESULT (WINAPI *GetBump)(IAMExtTransport *This,long *pSpeed,long *pDuration);")
cpp_quote("      HRESULT (WINAPI *SetBump)(IAMExtTransport *This,long Speed,long Duration);")
cpp_quote("      HRESULT (WINAPI *get_AntiClogControl)(IAMExtTransport *This,long *pEnabled);")
cpp_quote("      HRESULT (WINAPI *put_AntiClogControl)(IAMExtTransport *This,long Enable);")
cpp_quote("      HRESULT (WINAPI *GetEditPropertySet)(IAMExtTransport *This,long EditID,long *pState);")
cpp_quote("      HRESULT (WINAPI *SetEditPropertySet)(IAMExtTransport *This,long *pEditID,long State);")
cpp_quote("      HRESULT (WINAPI *GetEditProperty)(IAMExtTransport *This,long EditID,long Param,long *pValue);")
cpp_quote("      HRESULT (WINAPI *SetEditProperty)(IAMExtTransport *This,long EditID,long Param,long Value);")
cpp_quote("      HRESULT (WINAPI *get_EditStart)(IAMExtTransport *This,long *pValue);")
cpp_quote("      HRESULT (WINAPI *put_EditStart)(IAMExtTransport *This,long Value);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IAMExtTransportVtbl;")
cpp_quote("  struct IAMExtTransport {")
cpp_quote("    CONST_VTBL struct IAMExtTransportVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IAMExtTransport_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IAMExtTransport_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IAMExtTransport_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IAMExtTransport_GetCapability(This,Capability,pValue,pdblValue) (This)->lpVtbl->GetCapability(This,Capability,pValue,pdblValue)")
cpp_quote("#define IAMExtTransport_put_MediaState(This,State) (This)->lpVtbl->put_MediaState(This,State)")
cpp_quote("#define IAMExtTransport_get_MediaState(This,pState) (This)->lpVtbl->get_MediaState(This,pState)")
cpp_quote("#define IAMExtTransport_put_LocalControl(This,State) (This)->lpVtbl->put_LocalControl(This,State)")
cpp_quote("#define IAMExtTransport_get_LocalControl(This,pState) (This)->lpVtbl->get_LocalControl(This,pState)")
cpp_quote("#define IAMExtTransport_GetStatus(This,StatusItem,pValue) (This)->lpVtbl->GetStatus(This,StatusItem,pValue)")
cpp_quote("#define IAMExtTransport_GetTransportBasicParameters(This,Param,pValue,ppszData) (This)->lpVtbl->GetTransportBasicParameters(This,Param,pValue,ppszData)")
cpp_quote("#define IAMExtTransport_SetTransportBasicParameters(This,Param,Value,pszData) (This)->lpVtbl->SetTransportBasicParameters(This,Param,Value,pszData)")
cpp_quote("#define IAMExtTransport_GetTransportVideoParameters(This,Param,pValue) (This)->lpVtbl->GetTransportVideoParameters(This,Param,pValue)")
cpp_quote("#define IAMExtTransport_SetTransportVideoParameters(This,Param,Value) (This)->lpVtbl->SetTransportVideoParameters(This,Param,Value)")
cpp_quote("#define IAMExtTransport_GetTransportAudioParameters(This,Param,pValue) (This)->lpVtbl->GetTransportAudioParameters(This,Param,pValue)")
cpp_quote("#define IAMExtTransport_SetTransportAudioParameters(This,Param,Value) (This)->lpVtbl->SetTransportAudioParameters(This,Param,Value)")
cpp_quote("#define IAMExtTransport_put_Mode(This,Mode) (This)->lpVtbl->put_Mode(This,Mode)")
cpp_quote("#define IAMExtTransport_get_Mode(This,pMode) (This)->lpVtbl->get_Mode(This,pMode)")
cpp_quote("#define IAMExtTransport_put_Rate(This,dblRate) (This)->lpVtbl->put_Rate(This,dblRate)")
cpp_quote("#define IAMExtTransport_get_Rate(This,pdblRate) (This)->lpVtbl->get_Rate(This,pdblRate)")
cpp_quote("#define IAMExtTransport_GetChase(This,pEnabled,pOffset,phEvent) (This)->lpVtbl->GetChase(This,pEnabled,pOffset,phEvent)")
cpp_quote("#define IAMExtTransport_SetChase(This,Enable,Offset,hEvent) (This)->lpVtbl->SetChase(This,Enable,Offset,hEvent)")
cpp_quote("#define IAMExtTransport_GetBump(This,pSpeed,pDuration) (This)->lpVtbl->GetBump(This,pSpeed,pDuration)")
cpp_quote("#define IAMExtTransport_SetBump(This,Speed,Duration) (This)->lpVtbl->SetBump(This,Speed,Duration)")
cpp_quote("#define IAMExtTransport_get_AntiClogControl(This,pEnabled) (This)->lpVtbl->get_AntiClogControl(This,pEnabled)")
cpp_quote("#define IAMExtTransport_put_AntiClogControl(This,Enable) (This)->lpVtbl->put_AntiClogControl(This,Enable)")
cpp_quote("#define IAMExtTransport_GetEditPropertySet(This,EditID,pState) (This)->lpVtbl->GetEditPropertySet(This,EditID,pState)")
cpp_quote("#define IAMExtTransport_SetEditPropertySet(This,pEditID,State) (This)->lpVtbl->SetEditPropertySet(This,pEditID,State)")
cpp_quote("#define IAMExtTransport_GetEditProperty(This,EditID,Param,pValue) (This)->lpVtbl->GetEditProperty(This,EditID,Param,pValue)")
cpp_quote("#define IAMExtTransport_SetEditProperty(This,EditID,Param,Value) (This)->lpVtbl->SetEditProperty(This,EditID,Param,Value)")
cpp_quote("#define IAMExtTransport_get_EditStart(This,pValue) (This)->lpVtbl->get_EditStart(This,pValue)")
cpp_quote("#define IAMExtTransport_put_EditStart(This,Value) (This)->lpVtbl->put_EditStart(This,Value)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IAMExtTransport_GetCapability_Proxy(IAMExtTransport *This,long Capability,long *pValue,double *pdblValue);")
cpp_quote("  void __RPC_STUB IAMExtTransport_GetCapability_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMExtTransport_put_MediaState_Proxy(IAMExtTransport *This,long State);")
cpp_quote("  void __RPC_STUB IAMExtTransport_put_MediaState_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMExtTransport_get_MediaState_Proxy(IAMExtTransport *This,long *pState);")
cpp_quote("  void __RPC_STUB IAMExtTransport_get_MediaState_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMExtTransport_put_LocalControl_Proxy(IAMExtTransport *This,long State);")
cpp_quote("  void __RPC_STUB IAMExtTransport_put_LocalControl_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMExtTransport_get_LocalControl_Proxy(IAMExtTransport *This,long *pState);")
cpp_quote("  void __RPC_STUB IAMExtTransport_get_LocalControl_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMExtTransport_GetStatus_Proxy(IAMExtTransport *This,long StatusItem,long *pValue);")
cpp_quote("  void __RPC_STUB IAMExtTransport_GetStatus_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMExtTransport_GetTransportBasicParameters_Proxy(IAMExtTransport *This,long Param,long *pValue,LPOLESTR *ppszData);")
cpp_quote("  void __RPC_STUB IAMExtTransport_GetTransportBasicParameters_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMExtTransport_SetTransportBasicParameters_Proxy(IAMExtTransport *This,long Param,long Value,LPCOLESTR pszData);")
cpp_quote("  void __RPC_STUB IAMExtTransport_SetTransportBasicParameters_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMExtTransport_GetTransportVideoParameters_Proxy(IAMExtTransport *This,long Param,long *pValue);")
cpp_quote("  void __RPC_STUB IAMExtTransport_GetTransportVideoParameters_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMExtTransport_SetTransportVideoParameters_Proxy(IAMExtTransport *This,long Param,long Value);")
cpp_quote("  void __RPC_STUB IAMExtTransport_SetTransportVideoParameters_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMExtTransport_GetTransportAudioParameters_Proxy(IAMExtTransport *This,long Param,long *pValue);")
cpp_quote("  void __RPC_STUB IAMExtTransport_GetTransportAudioParameters_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMExtTransport_SetTransportAudioParameters_Proxy(IAMExtTransport *This,long Param,long Value);")
cpp_quote("  void __RPC_STUB IAMExtTransport_SetTransportAudioParameters_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMExtTransport_put_Mode_Proxy(IAMExtTransport *This,long Mode);")
cpp_quote("  void __RPC_STUB IAMExtTransport_put_Mode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMExtTransport_get_Mode_Proxy(IAMExtTransport *This,long *pMode);")
cpp_quote("  void __RPC_STUB IAMExtTransport_get_Mode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMExtTransport_put_Rate_Proxy(IAMExtTransport *This,double dblRate);")
cpp_quote("  void __RPC_STUB IAMExtTransport_put_Rate_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMExtTransport_get_Rate_Proxy(IAMExtTransport *This,double *pdblRate);")
cpp_quote("  void __RPC_STUB IAMExtTransport_get_Rate_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMExtTransport_GetChase_Proxy(IAMExtTransport *This,long *pEnabled,long *pOffset,HEVENT *phEvent);")
cpp_quote("  void __RPC_STUB IAMExtTransport_GetChase_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMExtTransport_SetChase_Proxy(IAMExtTransport *This,long Enable,long Offset,HEVENT hEvent);")
cpp_quote("  void __RPC_STUB IAMExtTransport_SetChase_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMExtTransport_GetBump_Proxy(IAMExtTransport *This,long *pSpeed,long *pDuration);")
cpp_quote("  void __RPC_STUB IAMExtTransport_GetBump_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMExtTransport_SetBump_Proxy(IAMExtTransport *This,long Speed,long Duration);")
cpp_quote("  void __RPC_STUB IAMExtTransport_SetBump_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMExtTransport_get_AntiClogControl_Proxy(IAMExtTransport *This,long *pEnabled);")
cpp_quote("  void __RPC_STUB IAMExtTransport_get_AntiClogControl_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMExtTransport_put_AntiClogControl_Proxy(IAMExtTransport *This,long Enable);")
cpp_quote("  void __RPC_STUB IAMExtTransport_put_AntiClogControl_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMExtTransport_GetEditPropertySet_Proxy(IAMExtTransport *This,long EditID,long *pState);")
cpp_quote("  void __RPC_STUB IAMExtTransport_GetEditPropertySet_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMExtTransport_SetEditPropertySet_Proxy(IAMExtTransport *This,long *pEditID,long State);")
cpp_quote("  void __RPC_STUB IAMExtTransport_SetEditPropertySet_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMExtTransport_GetEditProperty_Proxy(IAMExtTransport *This,long EditID,long Param,long *pValue);")
cpp_quote("  void __RPC_STUB IAMExtTransport_GetEditProperty_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMExtTransport_SetEditProperty_Proxy(IAMExtTransport *This,long EditID,long Param,long Value);")
cpp_quote("  void __RPC_STUB IAMExtTransport_SetEditProperty_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMExtTransport_get_EditStart_Proxy(IAMExtTransport *This,long *pValue);")
cpp_quote("  void __RPC_STUB IAMExtTransport_get_EditStart_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMExtTransport_put_EditStart_Proxy(IAMExtTransport *This,long Value);")
cpp_quote("  void __RPC_STUB IAMExtTransport_put_EditStart_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  typedef IAMExtTransport *PIAMEXTTRANSPORT;")
cpp_quote("")
cpp_quote("#ifndef TIMECODE_DEFINED")
cpp_quote("#define TIMECODE_DEFINED")
cpp_quote("  typedef union _timecode {")
cpp_quote("    __C89_NAMELESS struct {")
cpp_quote("      WORD wFrameRate;")
cpp_quote("      WORD wFrameFract;")
cpp_quote("      DWORD dwFrames;")
cpp_quote("    };")
cpp_quote("    DWORDLONG qw;")
cpp_quote("  } TIMECODE;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  typedef TIMECODE *PTIMECODE;")
cpp_quote("")
cpp_quote("  typedef struct tagTIMECODE_SAMPLE {")
cpp_quote("    LONGLONG qwTick;")
cpp_quote("    TIMECODE timecode;")
cpp_quote("    DWORD dwUser;")
cpp_quote("    DWORD dwFlags;")
cpp_quote("  } TIMECODE_SAMPLE;")
cpp_quote("")
cpp_quote("  typedef TIMECODE_SAMPLE *PTIMECODE_SAMPLE;")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0340_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0340_v0_0_s_ifspec;")
cpp_quote("#ifndef __IAMTimecodeReader_INTERFACE_DEFINED__")
cpp_quote("#define __IAMTimecodeReader_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IAMTimecodeReader;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IAMTimecodeReader : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI GetTCRMode(long Param,long *pValue) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetTCRMode(long Param,long Value) = 0;")
cpp_quote("    virtual HRESULT WINAPI put_VITCLine(long Line) = 0;")
cpp_quote("    virtual HRESULT WINAPI get_VITCLine(long *pLine) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetTimecode(PTIMECODE_SAMPLE pTimecodeSample) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IAMTimecodeReaderVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IAMTimecodeReader *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IAMTimecodeReader *This);")
cpp_quote("      ULONG (WINAPI *Release)(IAMTimecodeReader *This);")
cpp_quote("      HRESULT (WINAPI *GetTCRMode)(IAMTimecodeReader *This,long Param,long *pValue);")
cpp_quote("      HRESULT (WINAPI *SetTCRMode)(IAMTimecodeReader *This,long Param,long Value);")
cpp_quote("      HRESULT (WINAPI *put_VITCLine)(IAMTimecodeReader *This,long Line);")
cpp_quote("      HRESULT (WINAPI *get_VITCLine)(IAMTimecodeReader *This,long *pLine);")
cpp_quote("      HRESULT (WINAPI *GetTimecode)(IAMTimecodeReader *This,PTIMECODE_SAMPLE pTimecodeSample);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IAMTimecodeReaderVtbl;")
cpp_quote("  struct IAMTimecodeReader {")
cpp_quote("    CONST_VTBL struct IAMTimecodeReaderVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IAMTimecodeReader_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IAMTimecodeReader_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IAMTimecodeReader_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IAMTimecodeReader_GetTCRMode(This,Param,pValue) (This)->lpVtbl->GetTCRMode(This,Param,pValue)")
cpp_quote("#define IAMTimecodeReader_SetTCRMode(This,Param,Value) (This)->lpVtbl->SetTCRMode(This,Param,Value)")
cpp_quote("#define IAMTimecodeReader_put_VITCLine(This,Line) (This)->lpVtbl->put_VITCLine(This,Line)")
cpp_quote("#define IAMTimecodeReader_get_VITCLine(This,pLine) (This)->lpVtbl->get_VITCLine(This,pLine)")
cpp_quote("#define IAMTimecodeReader_GetTimecode(This,pTimecodeSample) (This)->lpVtbl->GetTimecode(This,pTimecodeSample)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IAMTimecodeReader_GetTCRMode_Proxy(IAMTimecodeReader *This,long Param,long *pValue);")
cpp_quote("  void __RPC_STUB IAMTimecodeReader_GetTCRMode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMTimecodeReader_SetTCRMode_Proxy(IAMTimecodeReader *This,long Param,long Value);")
cpp_quote("  void __RPC_STUB IAMTimecodeReader_SetTCRMode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMTimecodeReader_put_VITCLine_Proxy(IAMTimecodeReader *This,long Line);")
cpp_quote("  void __RPC_STUB IAMTimecodeReader_put_VITCLine_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMTimecodeReader_get_VITCLine_Proxy(IAMTimecodeReader *This,long *pLine);")
cpp_quote("  void __RPC_STUB IAMTimecodeReader_get_VITCLine_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMTimecodeReader_GetTimecode_Proxy(IAMTimecodeReader *This,PTIMECODE_SAMPLE pTimecodeSample);")
cpp_quote("  void __RPC_STUB IAMTimecodeReader_GetTimecode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  typedef IAMTimecodeReader *PIAMTIMECODEREADER;")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0341_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0341_v0_0_s_ifspec;")
cpp_quote("#ifndef __IAMTimecodeGenerator_INTERFACE_DEFINED__")
cpp_quote("#define __IAMTimecodeGenerator_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IAMTimecodeGenerator;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IAMTimecodeGenerator : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI GetTCGMode(long Param,long *pValue) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetTCGMode(long Param,long Value) = 0;")
cpp_quote("    virtual HRESULT WINAPI put_VITCLine(long Line) = 0;")
cpp_quote("    virtual HRESULT WINAPI get_VITCLine(long *pLine) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetTimecode(PTIMECODE_SAMPLE pTimecodeSample) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetTimecode(PTIMECODE_SAMPLE pTimecodeSample) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IAMTimecodeGeneratorVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IAMTimecodeGenerator *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IAMTimecodeGenerator *This);")
cpp_quote("      ULONG (WINAPI *Release)(IAMTimecodeGenerator *This);")
cpp_quote("      HRESULT (WINAPI *GetTCGMode)(IAMTimecodeGenerator *This,long Param,long *pValue);")
cpp_quote("      HRESULT (WINAPI *SetTCGMode)(IAMTimecodeGenerator *This,long Param,long Value);")
cpp_quote("      HRESULT (WINAPI *put_VITCLine)(IAMTimecodeGenerator *This,long Line);")
cpp_quote("      HRESULT (WINAPI *get_VITCLine)(IAMTimecodeGenerator *This,long *pLine);")
cpp_quote("      HRESULT (WINAPI *SetTimecode)(IAMTimecodeGenerator *This,PTIMECODE_SAMPLE pTimecodeSample);")
cpp_quote("      HRESULT (WINAPI *GetTimecode)(IAMTimecodeGenerator *This,PTIMECODE_SAMPLE pTimecodeSample);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IAMTimecodeGeneratorVtbl;")
cpp_quote("  struct IAMTimecodeGenerator {")
cpp_quote("    CONST_VTBL struct IAMTimecodeGeneratorVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IAMTimecodeGenerator_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IAMTimecodeGenerator_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IAMTimecodeGenerator_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IAMTimecodeGenerator_GetTCGMode(This,Param,pValue) (This)->lpVtbl->GetTCGMode(This,Param,pValue)")
cpp_quote("#define IAMTimecodeGenerator_SetTCGMode(This,Param,Value) (This)->lpVtbl->SetTCGMode(This,Param,Value)")
cpp_quote("#define IAMTimecodeGenerator_put_VITCLine(This,Line) (This)->lpVtbl->put_VITCLine(This,Line)")
cpp_quote("#define IAMTimecodeGenerator_get_VITCLine(This,pLine) (This)->lpVtbl->get_VITCLine(This,pLine)")
cpp_quote("#define IAMTimecodeGenerator_SetTimecode(This,pTimecodeSample) (This)->lpVtbl->SetTimecode(This,pTimecodeSample)")
cpp_quote("#define IAMTimecodeGenerator_GetTimecode(This,pTimecodeSample) (This)->lpVtbl->GetTimecode(This,pTimecodeSample)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IAMTimecodeGenerator_GetTCGMode_Proxy(IAMTimecodeGenerator *This,long Param,long *pValue);")
cpp_quote("  void __RPC_STUB IAMTimecodeGenerator_GetTCGMode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMTimecodeGenerator_SetTCGMode_Proxy(IAMTimecodeGenerator *This,long Param,long Value);")
cpp_quote("  void __RPC_STUB IAMTimecodeGenerator_SetTCGMode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMTimecodeGenerator_put_VITCLine_Proxy(IAMTimecodeGenerator *This,long Line);")
cpp_quote("  void __RPC_STUB IAMTimecodeGenerator_put_VITCLine_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMTimecodeGenerator_get_VITCLine_Proxy(IAMTimecodeGenerator *This,long *pLine);")
cpp_quote("  void __RPC_STUB IAMTimecodeGenerator_get_VITCLine_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMTimecodeGenerator_SetTimecode_Proxy(IAMTimecodeGenerator *This,PTIMECODE_SAMPLE pTimecodeSample);")
cpp_quote("  void __RPC_STUB IAMTimecodeGenerator_SetTimecode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMTimecodeGenerator_GetTimecode_Proxy(IAMTimecodeGenerator *This,PTIMECODE_SAMPLE pTimecodeSample);")
cpp_quote("  void __RPC_STUB IAMTimecodeGenerator_GetTimecode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  typedef IAMTimecodeGenerator *PIAMTIMECODEGENERATOR;")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0342_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0342_v0_0_s_ifspec;")
cpp_quote("#ifndef __IAMTimecodeDisplay_INTERFACE_DEFINED__")
cpp_quote("#define __IAMTimecodeDisplay_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IAMTimecodeDisplay;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IAMTimecodeDisplay : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI GetTCDisplayEnable(long *pState) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetTCDisplayEnable(long State) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetTCDisplay(long Param,long *pValue) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetTCDisplay(long Param,long Value) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IAMTimecodeDisplayVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IAMTimecodeDisplay *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IAMTimecodeDisplay *This);")
cpp_quote("      ULONG (WINAPI *Release)(IAMTimecodeDisplay *This);")
cpp_quote("      HRESULT (WINAPI *GetTCDisplayEnable)(IAMTimecodeDisplay *This,long *pState);")
cpp_quote("      HRESULT (WINAPI *SetTCDisplayEnable)(IAMTimecodeDisplay *This,long State);")
cpp_quote("      HRESULT (WINAPI *GetTCDisplay)(IAMTimecodeDisplay *This,long Param,long *pValue);")
cpp_quote("      HRESULT (WINAPI *SetTCDisplay)(IAMTimecodeDisplay *This,long Param,long Value);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IAMTimecodeDisplayVtbl;")
cpp_quote("  struct IAMTimecodeDisplay {")
cpp_quote("    CONST_VTBL struct IAMTimecodeDisplayVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IAMTimecodeDisplay_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IAMTimecodeDisplay_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IAMTimecodeDisplay_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IAMTimecodeDisplay_GetTCDisplayEnable(This,pState) (This)->lpVtbl->GetTCDisplayEnable(This,pState)")
cpp_quote("#define IAMTimecodeDisplay_SetTCDisplayEnable(This,State) (This)->lpVtbl->SetTCDisplayEnable(This,State)")
cpp_quote("#define IAMTimecodeDisplay_GetTCDisplay(This,Param,pValue) (This)->lpVtbl->GetTCDisplay(This,Param,pValue)")
cpp_quote("#define IAMTimecodeDisplay_SetTCDisplay(This,Param,Value) (This)->lpVtbl->SetTCDisplay(This,Param,Value)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IAMTimecodeDisplay_GetTCDisplayEnable_Proxy(IAMTimecodeDisplay *This,long *pState);")
cpp_quote("  void __RPC_STUB IAMTimecodeDisplay_GetTCDisplayEnable_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMTimecodeDisplay_SetTCDisplayEnable_Proxy(IAMTimecodeDisplay *This,long State);")
cpp_quote("  void __RPC_STUB IAMTimecodeDisplay_SetTCDisplayEnable_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMTimecodeDisplay_GetTCDisplay_Proxy(IAMTimecodeDisplay *This,long Param,long *pValue);")
cpp_quote("  void __RPC_STUB IAMTimecodeDisplay_GetTCDisplay_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMTimecodeDisplay_SetTCDisplay_Proxy(IAMTimecodeDisplay *This,long Param,long Value);")
cpp_quote("  void __RPC_STUB IAMTimecodeDisplay_SetTCDisplay_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  typedef IAMTimecodeDisplay *PIAMTIMECODEDISPLAY;")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0343_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0343_v0_0_s_ifspec;")
cpp_quote("#ifndef __IAMDevMemoryAllocator_INTERFACE_DEFINED__")
cpp_quote("#define __IAMDevMemoryAllocator_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IAMDevMemoryAllocator;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IAMDevMemoryAllocator : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI GetInfo(DWORD *pdwcbTotalFree,DWORD *pdwcbLargestFree,DWORD *pdwcbTotalMemory,DWORD *pdwcbMinimumChunk) = 0;")
cpp_quote("    virtual HRESULT WINAPI CheckMemory(const BYTE *pBuffer) = 0;")
cpp_quote("    virtual HRESULT WINAPI Alloc(BYTE **ppBuffer,DWORD *pdwcbBuffer) = 0;")
cpp_quote("    virtual HRESULT WINAPI Free(BYTE *pBuffer) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetDevMemoryObject(IUnknown **ppUnkInnner,IUnknown *pUnkOuter) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IAMDevMemoryAllocatorVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IAMDevMemoryAllocator *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IAMDevMemoryAllocator *This);")
cpp_quote("      ULONG (WINAPI *Release)(IAMDevMemoryAllocator *This);")
cpp_quote("      HRESULT (WINAPI *GetInfo)(IAMDevMemoryAllocator *This,DWORD *pdwcbTotalFree,DWORD *pdwcbLargestFree,DWORD *pdwcbTotalMemory,DWORD *pdwcbMinimumChunk);")
cpp_quote("      HRESULT (WINAPI *CheckMemory)(IAMDevMemoryAllocator *This,const BYTE *pBuffer);")
cpp_quote("      HRESULT (WINAPI *Alloc)(IAMDevMemoryAllocator *This,BYTE **ppBuffer,DWORD *pdwcbBuffer);")
cpp_quote("      HRESULT (WINAPI *Free)(IAMDevMemoryAllocator *This,BYTE *pBuffer);")
cpp_quote("      HRESULT (WINAPI *GetDevMemoryObject)(IAMDevMemoryAllocator *This,IUnknown **ppUnkInnner,IUnknown *pUnkOuter);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IAMDevMemoryAllocatorVtbl;")
cpp_quote("  struct IAMDevMemoryAllocator {")
cpp_quote("    CONST_VTBL struct IAMDevMemoryAllocatorVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IAMDevMemoryAllocator_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IAMDevMemoryAllocator_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IAMDevMemoryAllocator_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IAMDevMemoryAllocator_GetInfo(This,pdwcbTotalFree,pdwcbLargestFree,pdwcbTotalMemory,pdwcbMinimumChunk) (This)->lpVtbl->GetInfo(This,pdwcbTotalFree,pdwcbLargestFree,pdwcbTotalMemory,pdwcbMinimumChunk)")
cpp_quote("#define IAMDevMemoryAllocator_CheckMemory(This,pBuffer) (This)->lpVtbl->CheckMemory(This,pBuffer)")
cpp_quote("#define IAMDevMemoryAllocator_Alloc(This,ppBuffer,pdwcbBuffer) (This)->lpVtbl->Alloc(This,ppBuffer,pdwcbBuffer)")
cpp_quote("#define IAMDevMemoryAllocator_Free(This,pBuffer) (This)->lpVtbl->Free(This,pBuffer)")
cpp_quote("#define IAMDevMemoryAllocator_GetDevMemoryObject(This,ppUnkInnner,pUnkOuter) (This)->lpVtbl->GetDevMemoryObject(This,ppUnkInnner,pUnkOuter)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IAMDevMemoryAllocator_GetInfo_Proxy(IAMDevMemoryAllocator *This,DWORD *pdwcbTotalFree,DWORD *pdwcbLargestFree,DWORD *pdwcbTotalMemory,DWORD *pdwcbMinimumChunk);")
cpp_quote("  void __RPC_STUB IAMDevMemoryAllocator_GetInfo_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMDevMemoryAllocator_CheckMemory_Proxy(IAMDevMemoryAllocator *This,const BYTE *pBuffer);")
cpp_quote("  void __RPC_STUB IAMDevMemoryAllocator_CheckMemory_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMDevMemoryAllocator_Alloc_Proxy(IAMDevMemoryAllocator *This,BYTE **ppBuffer,DWORD *pdwcbBuffer);")
cpp_quote("  void __RPC_STUB IAMDevMemoryAllocator_Alloc_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMDevMemoryAllocator_Free_Proxy(IAMDevMemoryAllocator *This,BYTE *pBuffer);")
cpp_quote("  void __RPC_STUB IAMDevMemoryAllocator_Free_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMDevMemoryAllocator_GetDevMemoryObject_Proxy(IAMDevMemoryAllocator *This,IUnknown **ppUnkInnner,IUnknown *pUnkOuter);")
cpp_quote("  void __RPC_STUB IAMDevMemoryAllocator_GetDevMemoryObject_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  typedef IAMDevMemoryAllocator *PAMDEVMEMORYALLOCATOR;")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0344_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0344_v0_0_s_ifspec;")
cpp_quote("#ifndef __IAMDevMemoryControl_INTERFACE_DEFINED__")
cpp_quote("#define __IAMDevMemoryControl_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IAMDevMemoryControl;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IAMDevMemoryControl : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI QueryWriteSync(void) = 0;")
cpp_quote("    virtual HRESULT WINAPI WriteSync(void) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetDevId(DWORD *pdwDevId) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IAMDevMemoryControlVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IAMDevMemoryControl *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IAMDevMemoryControl *This);")
cpp_quote("      ULONG (WINAPI *Release)(IAMDevMemoryControl *This);")
cpp_quote("      HRESULT (WINAPI *QueryWriteSync)(IAMDevMemoryControl *This);")
cpp_quote("      HRESULT (WINAPI *WriteSync)(IAMDevMemoryControl *This);")
cpp_quote("      HRESULT (WINAPI *GetDevId)(IAMDevMemoryControl *This,DWORD *pdwDevId);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IAMDevMemoryControlVtbl;")
cpp_quote("  struct IAMDevMemoryControl {")
cpp_quote("    CONST_VTBL struct IAMDevMemoryControlVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IAMDevMemoryControl_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IAMDevMemoryControl_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IAMDevMemoryControl_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IAMDevMemoryControl_QueryWriteSync(This) (This)->lpVtbl->QueryWriteSync(This)")
cpp_quote("#define IAMDevMemoryControl_WriteSync(This) (This)->lpVtbl->WriteSync(This)")
cpp_quote("#define IAMDevMemoryControl_GetDevId(This,pdwDevId) (This)->lpVtbl->GetDevId(This,pdwDevId)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IAMDevMemoryControl_QueryWriteSync_Proxy(IAMDevMemoryControl *This);")
cpp_quote("  void __RPC_STUB IAMDevMemoryControl_QueryWriteSync_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMDevMemoryControl_WriteSync_Proxy(IAMDevMemoryControl *This);")
cpp_quote("  void __RPC_STUB IAMDevMemoryControl_WriteSync_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMDevMemoryControl_GetDevId_Proxy(IAMDevMemoryControl *This,DWORD *pdwDevId);")
cpp_quote("  void __RPC_STUB IAMDevMemoryControl_GetDevId_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  typedef IAMDevMemoryControl *PAMDEVMEMORYCONTROL;")
cpp_quote("")
cpp_quote("  enum _AMSTREAMSELECTINFOFLAGS {")
cpp_quote("    AMSTREAMSELECTINFO_ENABLED = 0x1,AMSTREAMSELECTINFO_EXCLUSIVE = 0x2")
cpp_quote("  };")
cpp_quote("")
cpp_quote("  enum _AMSTREAMSELECTENABLEFLAGS {")
cpp_quote("    AMSTREAMSELECTENABLE_ENABLE = 0x1,AMSTREAMSELECTENABLE_ENABLEALL = 0x2")
cpp_quote("  };")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0345_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0345_v0_0_s_ifspec;")
cpp_quote("#ifndef __IAMStreamSelect_INTERFACE_DEFINED__")
cpp_quote("#define __IAMStreamSelect_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IAMStreamSelect;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IAMStreamSelect : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI Count(DWORD *pcStreams) = 0;")
cpp_quote("    virtual HRESULT WINAPI Info(long lIndex,AM_MEDIA_TYPE **ppmt,DWORD *pdwFlags,LCID *plcid,DWORD *pdwGroup,WCHAR **ppszName,IUnknown **ppObject,IUnknown **ppUnk) = 0;")
cpp_quote("    virtual HRESULT WINAPI Enable(long lIndex,DWORD dwFlags) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IAMStreamSelectVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IAMStreamSelect *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IAMStreamSelect *This);")
cpp_quote("      ULONG (WINAPI *Release)(IAMStreamSelect *This);")
cpp_quote("      HRESULT (WINAPI *Count)(IAMStreamSelect *This,DWORD *pcStreams);")
cpp_quote("      HRESULT (WINAPI *Info)(IAMStreamSelect *This,long lIndex,AM_MEDIA_TYPE **ppmt,DWORD *pdwFlags,LCID *plcid,DWORD *pdwGroup,WCHAR **ppszName,IUnknown **ppObject,IUnknown **ppUnk);")
cpp_quote("      HRESULT (WINAPI *Enable)(IAMStreamSelect *This,long lIndex,DWORD dwFlags);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IAMStreamSelectVtbl;")
cpp_quote("  struct IAMStreamSelect {")
cpp_quote("    CONST_VTBL struct IAMStreamSelectVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IAMStreamSelect_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IAMStreamSelect_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IAMStreamSelect_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IAMStreamSelect_Count(This,pcStreams) (This)->lpVtbl->Count(This,pcStreams)")
cpp_quote("#define IAMStreamSelect_Info(This,lIndex,ppmt,pdwFlags,plcid,pdwGroup,ppszName,ppObject,ppUnk) (This)->lpVtbl->Info(This,lIndex,ppmt,pdwFlags,plcid,pdwGroup,ppszName,ppObject,ppUnk)")
cpp_quote("#define IAMStreamSelect_Enable(This,lIndex,dwFlags) (This)->lpVtbl->Enable(This,lIndex,dwFlags)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IAMStreamSelect_Count_Proxy(IAMStreamSelect *This,DWORD *pcStreams);")
cpp_quote("  void __RPC_STUB IAMStreamSelect_Count_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMStreamSelect_Info_Proxy(IAMStreamSelect *This,long lIndex,AM_MEDIA_TYPE **ppmt,DWORD *pdwFlags,LCID *plcid,DWORD *pdwGroup,WCHAR **ppszName,IUnknown **ppObject,IUnknown **ppUnk);")
cpp_quote("  void __RPC_STUB IAMStreamSelect_Info_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMStreamSelect_Enable_Proxy(IAMStreamSelect *This,long lIndex,DWORD dwFlags);")
cpp_quote("  void __RPC_STUB IAMStreamSelect_Enable_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  typedef IAMStreamSelect *PAMSTREAMSELECT;")
cpp_quote("")
cpp_quote("  enum _AMRESCTL_RESERVEFLAGS {")
cpp_quote("    AMRESCTL_RESERVEFLAGS_RESERVE = 0,AMRESCTL_RESERVEFLAGS_UNRESERVE = 0x1")
cpp_quote("  };")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0346_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0346_v0_0_s_ifspec;")
cpp_quote("#ifndef __IAMResourceControl_INTERFACE_DEFINED__")
cpp_quote("#define __IAMResourceControl_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IAMResourceControl;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IAMResourceControl : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI Reserve(DWORD dwFlags,PVOID pvReserved) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IAMResourceControlVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IAMResourceControl *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IAMResourceControl *This);")
cpp_quote("      ULONG (WINAPI *Release)(IAMResourceControl *This);")
cpp_quote("      HRESULT (WINAPI *Reserve)(IAMResourceControl *This,DWORD dwFlags,PVOID pvReserved);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IAMResourceControlVtbl;")
cpp_quote("  struct IAMResourceControl {")
cpp_quote("    CONST_VTBL struct IAMResourceControlVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IAMResourceControl_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IAMResourceControl_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IAMResourceControl_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IAMResourceControl_Reserve(This,dwFlags,pvReserved) (This)->lpVtbl->Reserve(This,dwFlags,pvReserved)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IAMResourceControl_Reserve_Proxy(IAMResourceControl *This,DWORD dwFlags,PVOID pvReserved);")
cpp_quote("  void __RPC_STUB IAMResourceControl_Reserve_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMClockAdjust_INTERFACE_DEFINED__")
cpp_quote("#define __IAMClockAdjust_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IAMClockAdjust;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IAMClockAdjust : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI SetClockDelta(REFERENCE_TIME rtDelta) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IAMClockAdjustVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IAMClockAdjust *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IAMClockAdjust *This);")
cpp_quote("      ULONG (WINAPI *Release)(IAMClockAdjust *This);")
cpp_quote("      HRESULT (WINAPI *SetClockDelta)(IAMClockAdjust *This,REFERENCE_TIME rtDelta);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IAMClockAdjustVtbl;")
cpp_quote("  struct IAMClockAdjust {")
cpp_quote("    CONST_VTBL struct IAMClockAdjustVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IAMClockAdjust_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IAMClockAdjust_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IAMClockAdjust_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IAMClockAdjust_SetClockDelta(This,rtDelta) (This)->lpVtbl->SetClockDelta(This,rtDelta)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IAMClockAdjust_SetClockDelta_Proxy(IAMClockAdjust *This,REFERENCE_TIME rtDelta);")
cpp_quote("  void __RPC_STUB IAMClockAdjust_SetClockDelta_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  enum _AM_FILTER_MISC_FLAGS {")
cpp_quote("    AM_FILTER_MISC_FLAGS_IS_RENDERER = 0x1,AM_FILTER_MISC_FLAGS_IS_SOURCE = 0x2")
cpp_quote("  };")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0348_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0348_v0_0_s_ifspec;")
cpp_quote("#ifndef __IAMFilterMiscFlags_INTERFACE_DEFINED__")
cpp_quote("#define __IAMFilterMiscFlags_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IAMFilterMiscFlags;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IAMFilterMiscFlags : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual ULONG WINAPI GetMiscFlags(void) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IAMFilterMiscFlagsVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IAMFilterMiscFlags *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IAMFilterMiscFlags *This);")
cpp_quote("      ULONG (WINAPI *Release)(IAMFilterMiscFlags *This);")
cpp_quote("      ULONG (WINAPI *GetMiscFlags)(IAMFilterMiscFlags *This);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IAMFilterMiscFlagsVtbl;")
cpp_quote("  struct IAMFilterMiscFlags {")
cpp_quote("    CONST_VTBL struct IAMFilterMiscFlagsVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IAMFilterMiscFlags_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IAMFilterMiscFlags_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IAMFilterMiscFlags_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IAMFilterMiscFlags_GetMiscFlags(This) (This)->lpVtbl->GetMiscFlags(This)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  ULONG WINAPI IAMFilterMiscFlags_GetMiscFlags_Proxy(IAMFilterMiscFlags *This);")
cpp_quote("  void __RPC_STUB IAMFilterMiscFlags_GetMiscFlags_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IDrawVideoImage_INTERFACE_DEFINED__")
cpp_quote("#define __IDrawVideoImage_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IDrawVideoImage;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IDrawVideoImage : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI DrawVideoImageBegin(void) = 0;")
cpp_quote("    virtual HRESULT WINAPI DrawVideoImageEnd(void) = 0;")
cpp_quote("    virtual HRESULT WINAPI DrawVideoImageDraw(HDC hdc,LPRECT lprcSrc,LPRECT lprcDst) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IDrawVideoImageVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IDrawVideoImage *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IDrawVideoImage *This);")
cpp_quote("      ULONG (WINAPI *Release)(IDrawVideoImage *This);")
cpp_quote("      HRESULT (WINAPI *DrawVideoImageBegin)(IDrawVideoImage *This);")
cpp_quote("      HRESULT (WINAPI *DrawVideoImageEnd)(IDrawVideoImage *This);")
cpp_quote("      HRESULT (WINAPI *DrawVideoImageDraw)(IDrawVideoImage *This,HDC hdc,LPRECT lprcSrc,LPRECT lprcDst);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IDrawVideoImageVtbl;")
cpp_quote("  struct IDrawVideoImage {")
cpp_quote("    CONST_VTBL struct IDrawVideoImageVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IDrawVideoImage_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IDrawVideoImage_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IDrawVideoImage_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IDrawVideoImage_DrawVideoImageBegin(This) (This)->lpVtbl->DrawVideoImageBegin(This)")
cpp_quote("#define IDrawVideoImage_DrawVideoImageEnd(This) (This)->lpVtbl->DrawVideoImageEnd(This)")
cpp_quote("#define IDrawVideoImage_DrawVideoImageDraw(This,hdc,lprcSrc,lprcDst) (This)->lpVtbl->DrawVideoImageDraw(This,hdc,lprcSrc,lprcDst)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IDrawVideoImage_DrawVideoImageBegin_Proxy(IDrawVideoImage *This);")
cpp_quote("  void __RPC_STUB IDrawVideoImage_DrawVideoImageBegin_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDrawVideoImage_DrawVideoImageEnd_Proxy(IDrawVideoImage *This);")
cpp_quote("  void __RPC_STUB IDrawVideoImage_DrawVideoImageEnd_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDrawVideoImage_DrawVideoImageDraw_Proxy(IDrawVideoImage *This,HDC hdc,LPRECT lprcSrc,LPRECT lprcDst);")
cpp_quote("  void __RPC_STUB IDrawVideoImage_DrawVideoImageDraw_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IDecimateVideoImage_INTERFACE_DEFINED__")
cpp_quote("#define __IDecimateVideoImage_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IDecimateVideoImage;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IDecimateVideoImage : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI SetDecimationImageSize(long lWidth,long lHeight) = 0;")
cpp_quote("    virtual HRESULT WINAPI ResetDecimationImageSize(void) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IDecimateVideoImageVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IDecimateVideoImage *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IDecimateVideoImage *This);")
cpp_quote("      ULONG (WINAPI *Release)(IDecimateVideoImage *This);")
cpp_quote("      HRESULT (WINAPI *SetDecimationImageSize)(IDecimateVideoImage *This,long lWidth,long lHeight);")
cpp_quote("      HRESULT (WINAPI *ResetDecimationImageSize)(IDecimateVideoImage *This);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IDecimateVideoImageVtbl;")
cpp_quote("  struct IDecimateVideoImage {")
cpp_quote("    CONST_VTBL struct IDecimateVideoImageVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IDecimateVideoImage_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IDecimateVideoImage_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IDecimateVideoImage_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IDecimateVideoImage_SetDecimationImageSize(This,lWidth,lHeight) (This)->lpVtbl->SetDecimationImageSize(This,lWidth,lHeight)")
cpp_quote("#define IDecimateVideoImage_ResetDecimationImageSize(This) (This)->lpVtbl->ResetDecimationImageSize(This)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IDecimateVideoImage_SetDecimationImageSize_Proxy(IDecimateVideoImage *This,long lWidth,long lHeight);")
cpp_quote("  void __RPC_STUB IDecimateVideoImage_SetDecimationImageSize_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDecimateVideoImage_ResetDecimationImageSize_Proxy(IDecimateVideoImage *This);")
cpp_quote("  void __RPC_STUB IDecimateVideoImage_ResetDecimationImageSize_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  typedef enum _DECIMATION_USAGE {")
cpp_quote("    DECIMATION_LEGACY = 0,")
cpp_quote("    DECIMATION_USE_DECODER_ONLY,DECIMATION_USE_VIDEOPORT_ONLY,DECIMATION_USE_OVERLAY_ONLY,")
cpp_quote("    DECIMATION_DEFAULT")
cpp_quote("  } DECIMATION_USAGE;")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0351_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0351_v0_0_s_ifspec;")
cpp_quote("#ifndef __IAMVideoDecimationProperties_INTERFACE_DEFINED__")
cpp_quote("#define __IAMVideoDecimationProperties_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IAMVideoDecimationProperties;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IAMVideoDecimationProperties : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI QueryDecimationUsage(DECIMATION_USAGE *lpUsage) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetDecimationUsage(DECIMATION_USAGE Usage) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IAMVideoDecimationPropertiesVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IAMVideoDecimationProperties *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IAMVideoDecimationProperties *This);")
cpp_quote("      ULONG (WINAPI *Release)(IAMVideoDecimationProperties *This);")
cpp_quote("      HRESULT (WINAPI *QueryDecimationUsage)(IAMVideoDecimationProperties *This,DECIMATION_USAGE *lpUsage);")
cpp_quote("      HRESULT (WINAPI *SetDecimationUsage)(IAMVideoDecimationProperties *This,DECIMATION_USAGE Usage);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IAMVideoDecimationPropertiesVtbl;")
cpp_quote("  struct IAMVideoDecimationProperties {")
cpp_quote("    CONST_VTBL struct IAMVideoDecimationPropertiesVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IAMVideoDecimationProperties_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IAMVideoDecimationProperties_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IAMVideoDecimationProperties_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IAMVideoDecimationProperties_QueryDecimationUsage(This,lpUsage) (This)->lpVtbl->QueryDecimationUsage(This,lpUsage)")
cpp_quote("#define IAMVideoDecimationProperties_SetDecimationUsage(This,Usage) (This)->lpVtbl->SetDecimationUsage(This,Usage)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IAMVideoDecimationProperties_QueryDecimationUsage_Proxy(IAMVideoDecimationProperties *This,DECIMATION_USAGE *lpUsage);")
cpp_quote("  void __RPC_STUB IAMVideoDecimationProperties_QueryDecimationUsage_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMVideoDecimationProperties_SetDecimationUsage_Proxy(IAMVideoDecimationProperties *This,DECIMATION_USAGE Usage);")
cpp_quote("  void __RPC_STUB IAMVideoDecimationProperties_SetDecimationUsage_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IVideoFrameStep_INTERFACE_DEFINED__")
cpp_quote("#define __IVideoFrameStep_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IVideoFrameStep;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IVideoFrameStep : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI Step(DWORD dwFrames,IUnknown *pStepObject) = 0;")
cpp_quote("    virtual HRESULT WINAPI CanStep(long bMultiple,IUnknown *pStepObject) = 0;")
cpp_quote("    virtual HRESULT WINAPI CancelStep(void) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IVideoFrameStepVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IVideoFrameStep *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IVideoFrameStep *This);")
cpp_quote("      ULONG (WINAPI *Release)(IVideoFrameStep *This);")
cpp_quote("      HRESULT (WINAPI *Step)(IVideoFrameStep *This,DWORD dwFrames,IUnknown *pStepObject);")
cpp_quote("      HRESULT (WINAPI *CanStep)(IVideoFrameStep *This,long bMultiple,IUnknown *pStepObject);")
cpp_quote("      HRESULT (WINAPI *CancelStep)(IVideoFrameStep *This);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IVideoFrameStepVtbl;")
cpp_quote("  struct IVideoFrameStep {")
cpp_quote("    CONST_VTBL struct IVideoFrameStepVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IVideoFrameStep_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IVideoFrameStep_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IVideoFrameStep_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IVideoFrameStep_Step(This,dwFrames,pStepObject) (This)->lpVtbl->Step(This,dwFrames,pStepObject)")
cpp_quote("#define IVideoFrameStep_CanStep(This,bMultiple,pStepObject) (This)->lpVtbl->CanStep(This,bMultiple,pStepObject)")
cpp_quote("#define IVideoFrameStep_CancelStep(This) (This)->lpVtbl->CancelStep(This)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IVideoFrameStep_Step_Proxy(IVideoFrameStep *This,DWORD dwFrames,IUnknown *pStepObject);")
cpp_quote("  void __RPC_STUB IVideoFrameStep_Step_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVideoFrameStep_CanStep_Proxy(IVideoFrameStep *This,long bMultiple,IUnknown *pStepObject);")
cpp_quote("  void __RPC_STUB IVideoFrameStep_CanStep_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVideoFrameStep_CancelStep_Proxy(IVideoFrameStep *This);")
cpp_quote("  void __RPC_STUB IVideoFrameStep_CancelStep_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  enum _AM_PUSHSOURCE_FLAGS {")
cpp_quote("    AM_PUSHSOURCECAPS_INTERNAL_RM = 0x1,AM_PUSHSOURCECAPS_NOT_LIVE = 0x2,AM_PUSHSOURCECAPS_PRIVATE_CLOCK = 0x4,")
cpp_quote("    AM_PUSHSOURCEREQS_USE_STREAM_CLOCK = 0x10000,AM_PUSHSOURCEREQS_USE_CLOCK_CHAIN = 0x20000")
cpp_quote("  };")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0353_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0353_v0_0_s_ifspec;")
cpp_quote("#ifndef __IAMLatency_INTERFACE_DEFINED__")
cpp_quote("#define __IAMLatency_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IAMLatency;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IAMLatency : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI GetLatency(REFERENCE_TIME *prtLatency) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IAMLatencyVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IAMLatency *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IAMLatency *This);")
cpp_quote("      ULONG (WINAPI *Release)(IAMLatency *This);")
cpp_quote("      HRESULT (WINAPI *GetLatency)(IAMLatency *This,REFERENCE_TIME *prtLatency);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IAMLatencyVtbl;")
cpp_quote("  struct IAMLatency {")
cpp_quote("    CONST_VTBL struct IAMLatencyVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IAMLatency_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IAMLatency_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IAMLatency_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IAMLatency_GetLatency(This,prtLatency) (This)->lpVtbl->GetLatency(This,prtLatency)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IAMLatency_GetLatency_Proxy(IAMLatency *This,REFERENCE_TIME *prtLatency);")
cpp_quote("  void __RPC_STUB IAMLatency_GetLatency_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMPushSource_INTERFACE_DEFINED__")
cpp_quote("#define __IAMPushSource_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IAMPushSource;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IAMPushSource : public IAMLatency {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI GetPushSourceFlags(ULONG *pFlags) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetPushSourceFlags(ULONG Flags) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetStreamOffset(REFERENCE_TIME rtOffset) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetStreamOffset(REFERENCE_TIME *prtOffset) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetMaxStreamOffset(REFERENCE_TIME *prtMaxOffset) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetMaxStreamOffset(REFERENCE_TIME rtMaxOffset) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IAMPushSourceVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IAMPushSource *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IAMPushSource *This);")
cpp_quote("      ULONG (WINAPI *Release)(IAMPushSource *This);")
cpp_quote("      HRESULT (WINAPI *GetLatency)(IAMPushSource *This,REFERENCE_TIME *prtLatency);")
cpp_quote("      HRESULT (WINAPI *GetPushSourceFlags)(IAMPushSource *This,ULONG *pFlags);")
cpp_quote("      HRESULT (WINAPI *SetPushSourceFlags)(IAMPushSource *This,ULONG Flags);")
cpp_quote("      HRESULT (WINAPI *SetStreamOffset)(IAMPushSource *This,REFERENCE_TIME rtOffset);")
cpp_quote("      HRESULT (WINAPI *GetStreamOffset)(IAMPushSource *This,REFERENCE_TIME *prtOffset);")
cpp_quote("      HRESULT (WINAPI *GetMaxStreamOffset)(IAMPushSource *This,REFERENCE_TIME *prtMaxOffset);")
cpp_quote("      HRESULT (WINAPI *SetMaxStreamOffset)(IAMPushSource *This,REFERENCE_TIME rtMaxOffset);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IAMPushSourceVtbl;")
cpp_quote("  struct IAMPushSource {")
cpp_quote("    CONST_VTBL struct IAMPushSourceVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IAMPushSource_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IAMPushSource_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IAMPushSource_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IAMPushSource_GetLatency(This,prtLatency) (This)->lpVtbl->GetLatency(This,prtLatency)")
cpp_quote("#define IAMPushSource_GetPushSourceFlags(This,pFlags) (This)->lpVtbl->GetPushSourceFlags(This,pFlags)")
cpp_quote("#define IAMPushSource_SetPushSourceFlags(This,Flags) (This)->lpVtbl->SetPushSourceFlags(This,Flags)")
cpp_quote("#define IAMPushSource_SetStreamOffset(This,rtOffset) (This)->lpVtbl->SetStreamOffset(This,rtOffset)")
cpp_quote("#define IAMPushSource_GetStreamOffset(This,prtOffset) (This)->lpVtbl->GetStreamOffset(This,prtOffset)")
cpp_quote("#define IAMPushSource_GetMaxStreamOffset(This,prtMaxOffset) (This)->lpVtbl->GetMaxStreamOffset(This,prtMaxOffset)")
cpp_quote("#define IAMPushSource_SetMaxStreamOffset(This,rtMaxOffset) (This)->lpVtbl->SetMaxStreamOffset(This,rtMaxOffset)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IAMPushSource_GetPushSourceFlags_Proxy(IAMPushSource *This,ULONG *pFlags);")
cpp_quote("  void __RPC_STUB IAMPushSource_GetPushSourceFlags_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMPushSource_SetPushSourceFlags_Proxy(IAMPushSource *This,ULONG Flags);")
cpp_quote("  void __RPC_STUB IAMPushSource_SetPushSourceFlags_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMPushSource_SetStreamOffset_Proxy(IAMPushSource *This,REFERENCE_TIME rtOffset);")
cpp_quote("  void __RPC_STUB IAMPushSource_SetStreamOffset_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMPushSource_GetStreamOffset_Proxy(IAMPushSource *This,REFERENCE_TIME *prtOffset);")
cpp_quote("  void __RPC_STUB IAMPushSource_GetStreamOffset_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMPushSource_GetMaxStreamOffset_Proxy(IAMPushSource *This,REFERENCE_TIME *prtMaxOffset);")
cpp_quote("  void __RPC_STUB IAMPushSource_GetMaxStreamOffset_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMPushSource_SetMaxStreamOffset_Proxy(IAMPushSource *This,REFERENCE_TIME rtMaxOffset);")
cpp_quote("  void __RPC_STUB IAMPushSource_SetMaxStreamOffset_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMDeviceRemoval_INTERFACE_DEFINED__")
cpp_quote("#define __IAMDeviceRemoval_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IAMDeviceRemoval;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IAMDeviceRemoval : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI DeviceInfo(CLSID *pclsidInterfaceClass,WCHAR **pwszSymbolicLink) = 0;")
cpp_quote("    virtual HRESULT WINAPI Reassociate(void) = 0;")
cpp_quote("    virtual HRESULT WINAPI Disassociate(void) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IAMDeviceRemovalVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IAMDeviceRemoval *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IAMDeviceRemoval *This);")
cpp_quote("      ULONG (WINAPI *Release)(IAMDeviceRemoval *This);")
cpp_quote("      HRESULT (WINAPI *DeviceInfo)(IAMDeviceRemoval *This,CLSID *pclsidInterfaceClass,WCHAR **pwszSymbolicLink);")
cpp_quote("      HRESULT (WINAPI *Reassociate)(IAMDeviceRemoval *This);")
cpp_quote("      HRESULT (WINAPI *Disassociate)(IAMDeviceRemoval *This);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IAMDeviceRemovalVtbl;")
cpp_quote("  struct IAMDeviceRemoval {")
cpp_quote("    CONST_VTBL struct IAMDeviceRemovalVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IAMDeviceRemoval_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IAMDeviceRemoval_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IAMDeviceRemoval_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IAMDeviceRemoval_DeviceInfo(This,pclsidInterfaceClass,pwszSymbolicLink) (This)->lpVtbl->DeviceInfo(This,pclsidInterfaceClass,pwszSymbolicLink)")
cpp_quote("#define IAMDeviceRemoval_Reassociate(This) (This)->lpVtbl->Reassociate(This)")
cpp_quote("#define IAMDeviceRemoval_Disassociate(This) (This)->lpVtbl->Disassociate(This)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IAMDeviceRemoval_DeviceInfo_Proxy(IAMDeviceRemoval *This,CLSID *pclsidInterfaceClass,WCHAR **pwszSymbolicLink);")
cpp_quote("  void __RPC_STUB IAMDeviceRemoval_DeviceInfo_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMDeviceRemoval_Reassociate_Proxy(IAMDeviceRemoval *This);")
cpp_quote("  void __RPC_STUB IAMDeviceRemoval_Reassociate_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMDeviceRemoval_Disassociate_Proxy(IAMDeviceRemoval *This);")
cpp_quote("  void __RPC_STUB IAMDeviceRemoval_Disassociate_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  typedef struct __MIDL___MIDL_itf_strmif_0355_0001 {")
cpp_quote("    DWORD dwDVAAuxSrc;")
cpp_quote("    DWORD dwDVAAuxCtl;")
cpp_quote("    DWORD dwDVAAuxSrc1;")
cpp_quote("    DWORD dwDVAAuxCtl1;")
cpp_quote("    DWORD dwDVVAuxSrc;")
cpp_quote("    DWORD dwDVVAuxCtl;")
cpp_quote("    DWORD dwDVReserved[2];")
cpp_quote("  } DVINFO;")
cpp_quote("")
cpp_quote("  typedef struct __MIDL___MIDL_itf_strmif_0355_0001 *PDVINFO;")
cpp_quote("")
cpp_quote("  enum _DVENCODERRESOLUTION {")
cpp_quote("    DVENCODERRESOLUTION_720x480 = 2012,DVENCODERRESOLUTION_360x240 = 2013,DVENCODERRESOLUTION_180x120 = 2014,DVENCODERRESOLUTION_88x60 = 2015")
cpp_quote("  };")
cpp_quote("")
cpp_quote("  enum _DVENCODERVIDEOFORMAT {")
cpp_quote("    DVENCODERVIDEOFORMAT_NTSC = 2000,DVENCODERVIDEOFORMAT_PAL = 2001")
cpp_quote("  };")
cpp_quote("")
cpp_quote("  enum _DVENCODERFORMAT {")
cpp_quote("    DVENCODERFORMAT_DVSD = 2007,DVENCODERFORMAT_DVHD = 2008,DVENCODERFORMAT_DVSL = 2009")
cpp_quote("  };")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0355_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0355_v0_0_s_ifspec;")
cpp_quote("#ifndef __IDVEnc_INTERFACE_DEFINED__")
cpp_quote("#define __IDVEnc_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IDVEnc;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IDVEnc : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI get_IFormatResolution(int *VideoFormat,int *DVFormat,int *Resolution,BYTE fDVInfo,DVINFO *sDVInfo) = 0;")
cpp_quote("    virtual HRESULT WINAPI put_IFormatResolution(int VideoFormat,int DVFormat,int Resolution,BYTE fDVInfo,DVINFO *sDVInfo) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IDVEncVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IDVEnc *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IDVEnc *This);")
cpp_quote("      ULONG (WINAPI *Release)(IDVEnc *This);")
cpp_quote("      HRESULT (WINAPI *get_IFormatResolution)(IDVEnc *This,int *VideoFormat,int *DVFormat,int *Resolution,BYTE fDVInfo,DVINFO *sDVInfo);")
cpp_quote("      HRESULT (WINAPI *put_IFormatResolution)(IDVEnc *This,int VideoFormat,int DVFormat,int Resolution,BYTE fDVInfo,DVINFO *sDVInfo);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IDVEncVtbl;")
cpp_quote("  struct IDVEnc {")
cpp_quote("    CONST_VTBL struct IDVEncVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IDVEnc_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IDVEnc_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IDVEnc_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IDVEnc_get_IFormatResolution(This,VideoFormat,DVFormat,Resolution,fDVInfo,sDVInfo) (This)->lpVtbl->get_IFormatResolution(This,VideoFormat,DVFormat,Resolution,fDVInfo,sDVInfo)")
cpp_quote("#define IDVEnc_put_IFormatResolution(This,VideoFormat,DVFormat,Resolution,fDVInfo,sDVInfo) (This)->lpVtbl->put_IFormatResolution(This,VideoFormat,DVFormat,Resolution,fDVInfo,sDVInfo)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IDVEnc_get_IFormatResolution_Proxy(IDVEnc *This,int *VideoFormat,int *DVFormat,int *Resolution,BYTE fDVInfo,DVINFO *sDVInfo);")
cpp_quote("  void __RPC_STUB IDVEnc_get_IFormatResolution_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDVEnc_put_IFormatResolution_Proxy(IDVEnc *This,int VideoFormat,int DVFormat,int Resolution,BYTE fDVInfo,DVINFO *sDVInfo);")
cpp_quote("  void __RPC_STUB IDVEnc_put_IFormatResolution_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  enum _DVDECODERRESOLUTION {")
cpp_quote("    DVDECODERRESOLUTION_720x480 = 1000,DVDECODERRESOLUTION_360x240 = 1001,DVDECODERRESOLUTION_180x120 = 1002,DVDECODERRESOLUTION_88x60 = 1003")
cpp_quote("  };")
cpp_quote("")
cpp_quote("  enum _DVRESOLUTION {")
cpp_quote("    DVRESOLUTION_FULL = 1000,DVRESOLUTION_HALF = 1001,DVRESOLUTION_QUARTER = 1002,DVRESOLUTION_DC = 1003")
cpp_quote("  };")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0356_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0356_v0_0_s_ifspec;")
cpp_quote("#ifndef __IIPDVDec_INTERFACE_DEFINED__")
cpp_quote("#define __IIPDVDec_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IIPDVDec;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IIPDVDec : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI get_IPDisplay(int *displayPix) = 0;")
cpp_quote("    virtual HRESULT WINAPI put_IPDisplay(int displayPix) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IIPDVDecVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IIPDVDec *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IIPDVDec *This);")
cpp_quote("      ULONG (WINAPI *Release)(IIPDVDec *This);")
cpp_quote("      HRESULT (WINAPI *get_IPDisplay)(IIPDVDec *This,int *displayPix);")
cpp_quote("      HRESULT (WINAPI *put_IPDisplay)(IIPDVDec *This,int displayPix);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IIPDVDecVtbl;")
cpp_quote("  struct IIPDVDec {")
cpp_quote("    CONST_VTBL struct IIPDVDecVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IIPDVDec_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IIPDVDec_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IIPDVDec_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IIPDVDec_get_IPDisplay(This,displayPix) (This)->lpVtbl->get_IPDisplay(This,displayPix)")
cpp_quote("#define IIPDVDec_put_IPDisplay(This,displayPix) (This)->lpVtbl->put_IPDisplay(This,displayPix)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IIPDVDec_get_IPDisplay_Proxy(IIPDVDec *This,int *displayPix);")
cpp_quote("  void __RPC_STUB IIPDVDec_get_IPDisplay_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IIPDVDec_put_IPDisplay_Proxy(IIPDVDec *This,int displayPix);")
cpp_quote("  void __RPC_STUB IIPDVDec_put_IPDisplay_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IDVRGB219_INTERFACE_DEFINED__")
cpp_quote("#define __IDVRGB219_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IDVRGB219;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IDVRGB219 : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI SetRGB219(WINBOOL bState) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IDVRGB219Vtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IDVRGB219 *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IDVRGB219 *This);")
cpp_quote("      ULONG (WINAPI *Release)(IDVRGB219 *This);")
cpp_quote("      HRESULT (WINAPI *SetRGB219)(IDVRGB219 *This,WINBOOL bState);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IDVRGB219Vtbl;")
cpp_quote("  struct IDVRGB219 {")
cpp_quote("    CONST_VTBL struct IDVRGB219Vtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IDVRGB219_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IDVRGB219_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IDVRGB219_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IDVRGB219_SetRGB219(This,bState) (This)->lpVtbl->SetRGB219(This,bState)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IDVRGB219_SetRGB219_Proxy(IDVRGB219 *This,WINBOOL bState);")
cpp_quote("  void __RPC_STUB IDVRGB219_SetRGB219_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IDVSplitter_INTERFACE_DEFINED__")
cpp_quote("#define __IDVSplitter_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IDVSplitter;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IDVSplitter : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI DiscardAlternateVideoFrames(int nDiscard) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IDVSplitterVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IDVSplitter *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IDVSplitter *This);")
cpp_quote("      ULONG (WINAPI *Release)(IDVSplitter *This);")
cpp_quote("      HRESULT (WINAPI *DiscardAlternateVideoFrames)(IDVSplitter *This,int nDiscard);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IDVSplitterVtbl;")
cpp_quote("  struct IDVSplitter {")
cpp_quote("    CONST_VTBL struct IDVSplitterVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IDVSplitter_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IDVSplitter_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IDVSplitter_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IDVSplitter_DiscardAlternateVideoFrames(This,nDiscard) (This)->lpVtbl->DiscardAlternateVideoFrames(This,nDiscard)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IDVSplitter_DiscardAlternateVideoFrames_Proxy(IDVSplitter *This,int nDiscard);")
cpp_quote("  void __RPC_STUB IDVSplitter_DiscardAlternateVideoFrames_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  enum _AM_AUDIO_RENDERER_STAT_PARAM {")
cpp_quote("    AM_AUDREND_STAT_PARAM_BREAK_COUNT = 1,")
cpp_quote("    AM_AUDREND_STAT_PARAM_SLAVE_MODE,AM_AUDREND_STAT_PARAM_SILENCE_DUR,")
cpp_quote("    AM_AUDREND_STAT_PARAM_LAST_BUFFER_DUR,AM_AUDREND_STAT_PARAM_DISCONTINUITIES,")
cpp_quote("    AM_AUDREND_STAT_PARAM_SLAVE_RATE,AM_AUDREND_STAT_PARAM_SLAVE_DROPWRITE_DUR,")
cpp_quote("    AM_AUDREND_STAT_PARAM_SLAVE_HIGHLOWERROR,AM_AUDREND_STAT_PARAM_SLAVE_LASTHIGHLOWERROR,")
cpp_quote("    AM_AUDREND_STAT_PARAM_SLAVE_ACCUMERROR,AM_AUDREND_STAT_PARAM_BUFFERFULLNESS,")
cpp_quote("    AM_AUDREND_STAT_PARAM_JITTER")
cpp_quote("  };")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0359_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0359_v0_0_s_ifspec;")
cpp_quote("#ifndef __IAMAudioRendererStats_INTERFACE_DEFINED__")
cpp_quote("#define __IAMAudioRendererStats_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IAMAudioRendererStats;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IAMAudioRendererStats : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI GetStatParam(DWORD dwParam,DWORD *pdwParam1,DWORD *pdwParam2) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IAMAudioRendererStatsVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IAMAudioRendererStats *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IAMAudioRendererStats *This);")
cpp_quote("      ULONG (WINAPI *Release)(IAMAudioRendererStats *This);")
cpp_quote("      HRESULT (WINAPI *GetStatParam)(IAMAudioRendererStats *This,DWORD dwParam,DWORD *pdwParam1,DWORD *pdwParam2);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IAMAudioRendererStatsVtbl;")
cpp_quote("  struct IAMAudioRendererStats {")
cpp_quote("    CONST_VTBL struct IAMAudioRendererStatsVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IAMAudioRendererStats_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IAMAudioRendererStats_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IAMAudioRendererStats_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IAMAudioRendererStats_GetStatParam(This,dwParam,pdwParam1,pdwParam2) (This)->lpVtbl->GetStatParam(This,dwParam,pdwParam1,pdwParam2)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IAMAudioRendererStats_GetStatParam_Proxy(IAMAudioRendererStats *This,DWORD dwParam,DWORD *pdwParam1,DWORD *pdwParam2);")
cpp_quote("  void __RPC_STUB IAMAudioRendererStats_GetStatParam_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  enum _AM_INTF_SEARCH_FLAGS {")
cpp_quote("    AM_INTF_SEARCH_INPUT_PIN = 0x1,AM_INTF_SEARCH_OUTPUT_PIN = 0x2,AM_INTF_SEARCH_FILTER = 0x4")
cpp_quote("  };")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0361_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0361_v0_0_s_ifspec;")
cpp_quote("#ifndef __IAMGraphStreams_INTERFACE_DEFINED__")
cpp_quote("#define __IAMGraphStreams_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IAMGraphStreams;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IAMGraphStreams : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI FindUpstreamInterface(IPin *pPin,REFIID riid,void **ppvInterface,DWORD dwFlags) = 0;")
cpp_quote("    virtual HRESULT WINAPI SyncUsingStreamOffset(WINBOOL bUseStreamOffset) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetMaxGraphLatency(REFERENCE_TIME rtMaxGraphLatency) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IAMGraphStreamsVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IAMGraphStreams *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IAMGraphStreams *This);")
cpp_quote("      ULONG (WINAPI *Release)(IAMGraphStreams *This);")
cpp_quote("      HRESULT (WINAPI *FindUpstreamInterface)(IAMGraphStreams *This,IPin *pPin,REFIID riid,void **ppvInterface,DWORD dwFlags);")
cpp_quote("      HRESULT (WINAPI *SyncUsingStreamOffset)(IAMGraphStreams *This,WINBOOL bUseStreamOffset);")
cpp_quote("      HRESULT (WINAPI *SetMaxGraphLatency)(IAMGraphStreams *This,REFERENCE_TIME rtMaxGraphLatency);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IAMGraphStreamsVtbl;")
cpp_quote("  struct IAMGraphStreams {")
cpp_quote("    CONST_VTBL struct IAMGraphStreamsVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IAMGraphStreams_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IAMGraphStreams_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IAMGraphStreams_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IAMGraphStreams_FindUpstreamInterface(This,pPin,riid,ppvInterface,dwFlags) (This)->lpVtbl->FindUpstreamInterface(This,pPin,riid,ppvInterface,dwFlags)")
cpp_quote("#define IAMGraphStreams_SyncUsingStreamOffset(This,bUseStreamOffset) (This)->lpVtbl->SyncUsingStreamOffset(This,bUseStreamOffset)")
cpp_quote("#define IAMGraphStreams_SetMaxGraphLatency(This,rtMaxGraphLatency) (This)->lpVtbl->SetMaxGraphLatency(This,rtMaxGraphLatency)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IAMGraphStreams_FindUpstreamInterface_Proxy(IAMGraphStreams *This,IPin *pPin,REFIID riid,void **ppvInterface,DWORD dwFlags);")
cpp_quote("  void __RPC_STUB IAMGraphStreams_FindUpstreamInterface_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMGraphStreams_SyncUsingStreamOffset_Proxy(IAMGraphStreams *This,WINBOOL bUseStreamOffset);")
cpp_quote("  void __RPC_STUB IAMGraphStreams_SyncUsingStreamOffset_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMGraphStreams_SetMaxGraphLatency_Proxy(IAMGraphStreams *This,REFERENCE_TIME rtMaxGraphLatency);")
cpp_quote("  void __RPC_STUB IAMGraphStreams_SetMaxGraphLatency_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  enum AMOVERLAYFX {")
cpp_quote("    AMOVERFX_NOFX = 0,AMOVERFX_MIRRORLEFTRIGHT = 0x2,AMOVERFX_MIRRORUPDOWN = 0x4,AMOVERFX_DEINTERLACE = 0x8")
cpp_quote("  };")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0362_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0362_v0_0_s_ifspec;")
cpp_quote("#ifndef __IAMOverlayFX_INTERFACE_DEFINED__")
cpp_quote("#define __IAMOverlayFX_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IAMOverlayFX;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IAMOverlayFX : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI QueryOverlayFXCaps(DWORD *lpdwOverlayFXCaps) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetOverlayFX(DWORD dwOverlayFX) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetOverlayFX(DWORD *lpdwOverlayFX) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IAMOverlayFXVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IAMOverlayFX *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IAMOverlayFX *This);")
cpp_quote("      ULONG (WINAPI *Release)(IAMOverlayFX *This);")
cpp_quote("      HRESULT (WINAPI *QueryOverlayFXCaps)(IAMOverlayFX *This,DWORD *lpdwOverlayFXCaps);")
cpp_quote("      HRESULT (WINAPI *SetOverlayFX)(IAMOverlayFX *This,DWORD dwOverlayFX);")
cpp_quote("      HRESULT (WINAPI *GetOverlayFX)(IAMOverlayFX *This,DWORD *lpdwOverlayFX);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IAMOverlayFXVtbl;")
cpp_quote("  struct IAMOverlayFX {")
cpp_quote("    CONST_VTBL struct IAMOverlayFXVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IAMOverlayFX_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IAMOverlayFX_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IAMOverlayFX_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IAMOverlayFX_QueryOverlayFXCaps(This,lpdwOverlayFXCaps) (This)->lpVtbl->QueryOverlayFXCaps(This,lpdwOverlayFXCaps)")
cpp_quote("#define IAMOverlayFX_SetOverlayFX(This,dwOverlayFX) (This)->lpVtbl->SetOverlayFX(This,dwOverlayFX)")
cpp_quote("#define IAMOverlayFX_GetOverlayFX(This,lpdwOverlayFX) (This)->lpVtbl->GetOverlayFX(This,lpdwOverlayFX)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IAMOverlayFX_QueryOverlayFXCaps_Proxy(IAMOverlayFX *This,DWORD *lpdwOverlayFXCaps);")
cpp_quote("  void __RPC_STUB IAMOverlayFX_QueryOverlayFXCaps_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMOverlayFX_SetOverlayFX_Proxy(IAMOverlayFX *This,DWORD dwOverlayFX);")
cpp_quote("  void __RPC_STUB IAMOverlayFX_SetOverlayFX_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMOverlayFX_GetOverlayFX_Proxy(IAMOverlayFX *This,DWORD *lpdwOverlayFX);")
cpp_quote("  void __RPC_STUB IAMOverlayFX_GetOverlayFX_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMOpenProgress_INTERFACE_DEFINED__")
cpp_quote("#define __IAMOpenProgress_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IAMOpenProgress;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IAMOpenProgress : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI QueryProgress(LONGLONG *pllTotal,LONGLONG *pllCurrent) = 0;")
cpp_quote("    virtual HRESULT WINAPI AbortOperation(void) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IAMOpenProgressVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IAMOpenProgress *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IAMOpenProgress *This);")
cpp_quote("      ULONG (WINAPI *Release)(IAMOpenProgress *This);")
cpp_quote("      HRESULT (WINAPI *QueryProgress)(IAMOpenProgress *This,LONGLONG *pllTotal,LONGLONG *pllCurrent);")
cpp_quote("      HRESULT (WINAPI *AbortOperation)(IAMOpenProgress *This);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IAMOpenProgressVtbl;")
cpp_quote("  struct IAMOpenProgress {")
cpp_quote("    CONST_VTBL struct IAMOpenProgressVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IAMOpenProgress_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IAMOpenProgress_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IAMOpenProgress_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IAMOpenProgress_QueryProgress(This,pllTotal,pllCurrent) (This)->lpVtbl->QueryProgress(This,pllTotal,pllCurrent)")
cpp_quote("#define IAMOpenProgress_AbortOperation(This) (This)->lpVtbl->AbortOperation(This)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IAMOpenProgress_QueryProgress_Proxy(IAMOpenProgress *This,LONGLONG *pllTotal,LONGLONG *pllCurrent);")
cpp_quote("  void __RPC_STUB IAMOpenProgress_QueryProgress_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMOpenProgress_AbortOperation_Proxy(IAMOpenProgress *This);")
cpp_quote("  void __RPC_STUB IAMOpenProgress_AbortOperation_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IMpeg2Demultiplexer_INTERFACE_DEFINED__")
cpp_quote("#define __IMpeg2Demultiplexer_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IMpeg2Demultiplexer;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IMpeg2Demultiplexer : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI CreateOutputPin(AM_MEDIA_TYPE *pMediaType,LPWSTR pszPinName,IPin **ppIPin) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetOutputPinMediaType(LPWSTR pszPinName,AM_MEDIA_TYPE *pMediaType) = 0;")
cpp_quote("    virtual HRESULT WINAPI DeleteOutputPin(LPWSTR pszPinName) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IMpeg2DemultiplexerVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IMpeg2Demultiplexer *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IMpeg2Demultiplexer *This);")
cpp_quote("      ULONG (WINAPI *Release)(IMpeg2Demultiplexer *This);")
cpp_quote("      HRESULT (WINAPI *CreateOutputPin)(IMpeg2Demultiplexer *This,AM_MEDIA_TYPE *pMediaType,LPWSTR pszPinName,IPin **ppIPin);")
cpp_quote("      HRESULT (WINAPI *SetOutputPinMediaType)(IMpeg2Demultiplexer *This,LPWSTR pszPinName,AM_MEDIA_TYPE *pMediaType);")
cpp_quote("      HRESULT (WINAPI *DeleteOutputPin)(IMpeg2Demultiplexer *This,LPWSTR pszPinName);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IMpeg2DemultiplexerVtbl;")
cpp_quote("  struct IMpeg2Demultiplexer {")
cpp_quote("    CONST_VTBL struct IMpeg2DemultiplexerVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IMpeg2Demultiplexer_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IMpeg2Demultiplexer_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IMpeg2Demultiplexer_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IMpeg2Demultiplexer_CreateOutputPin(This,pMediaType,pszPinName,ppIPin) (This)->lpVtbl->CreateOutputPin(This,pMediaType,pszPinName,ppIPin)")
cpp_quote("#define IMpeg2Demultiplexer_SetOutputPinMediaType(This,pszPinName,pMediaType) (This)->lpVtbl->SetOutputPinMediaType(This,pszPinName,pMediaType)")
cpp_quote("#define IMpeg2Demultiplexer_DeleteOutputPin(This,pszPinName) (This)->lpVtbl->DeleteOutputPin(This,pszPinName)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IMpeg2Demultiplexer_CreateOutputPin_Proxy(IMpeg2Demultiplexer *This,AM_MEDIA_TYPE *pMediaType,LPWSTR pszPinName,IPin **ppIPin);")
cpp_quote("  void __RPC_STUB IMpeg2Demultiplexer_CreateOutputPin_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IMpeg2Demultiplexer_SetOutputPinMediaType_Proxy(IMpeg2Demultiplexer *This,LPWSTR pszPinName,AM_MEDIA_TYPE *pMediaType);")
cpp_quote("  void __RPC_STUB IMpeg2Demultiplexer_SetOutputPinMediaType_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IMpeg2Demultiplexer_DeleteOutputPin_Proxy(IMpeg2Demultiplexer *This,LPWSTR pszPinName);")
cpp_quote("  void __RPC_STUB IMpeg2Demultiplexer_DeleteOutputPin_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#define MPEG2_PROGRAM_STREAM_MAP 0x00000000")
cpp_quote("#define MPEG2_PROGRAM_ELEMENTARY_STREAM 0x00000001")
cpp_quote("#define MPEG2_PROGRAM_DIRECTORY_PES_PACKET 0x00000002")
cpp_quote("#define MPEG2_PROGRAM_PACK_HEADER 0x00000003")
cpp_quote("#define MPEG2_PROGRAM_PES_STREAM 0x00000004")
cpp_quote("#define MPEG2_PROGRAM_SYSTEM_HEADER 0x00000005")
cpp_quote("#define SUBSTREAM_FILTER_VAL_NONE 0x10000000")
cpp_quote("")
cpp_quote("  typedef struct __MIDL___MIDL_itf_strmif_0365_0001 {")
cpp_quote("    ULONG stream_id;")
cpp_quote("    DWORD dwMediaSampleContent;")
cpp_quote("    ULONG ulSubstreamFilterValue;")
cpp_quote("    int iDataOffset;")
cpp_quote("  } STREAM_ID_MAP;")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0365_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0365_v0_0_s_ifspec;")
cpp_quote("#ifndef __IEnumStreamIdMap_INTERFACE_DEFINED__")
cpp_quote("#define __IEnumStreamIdMap_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IEnumStreamIdMap;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IEnumStreamIdMap : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI Next(ULONG cRequest,STREAM_ID_MAP *pStreamIdMap,ULONG *pcReceived) = 0;")
cpp_quote("    virtual HRESULT WINAPI Skip(ULONG cRecords) = 0;")
cpp_quote("    virtual HRESULT WINAPI Reset(void) = 0;")
cpp_quote("    virtual HRESULT WINAPI Clone(IEnumStreamIdMap **ppIEnumStreamIdMap) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IEnumStreamIdMapVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IEnumStreamIdMap *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IEnumStreamIdMap *This);")
cpp_quote("      ULONG (WINAPI *Release)(IEnumStreamIdMap *This);")
cpp_quote("      HRESULT (WINAPI *Next)(IEnumStreamIdMap *This,ULONG cRequest,STREAM_ID_MAP *pStreamIdMap,ULONG *pcReceived);")
cpp_quote("      HRESULT (WINAPI *Skip)(IEnumStreamIdMap *This,ULONG cRecords);")
cpp_quote("      HRESULT (WINAPI *Reset)(IEnumStreamIdMap *This);")
cpp_quote("      HRESULT (WINAPI *Clone)(IEnumStreamIdMap *This,IEnumStreamIdMap **ppIEnumStreamIdMap);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IEnumStreamIdMapVtbl;")
cpp_quote("  struct IEnumStreamIdMap {")
cpp_quote("    CONST_VTBL struct IEnumStreamIdMapVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IEnumStreamIdMap_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IEnumStreamIdMap_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IEnumStreamIdMap_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IEnumStreamIdMap_Next(This,cRequest,pStreamIdMap,pcReceived) (This)->lpVtbl->Next(This,cRequest,pStreamIdMap,pcReceived)")
cpp_quote("#define IEnumStreamIdMap_Skip(This,cRecords) (This)->lpVtbl->Skip(This,cRecords)")
cpp_quote("#define IEnumStreamIdMap_Reset(This) (This)->lpVtbl->Reset(This)")
cpp_quote("#define IEnumStreamIdMap_Clone(This,ppIEnumStreamIdMap) (This)->lpVtbl->Clone(This,ppIEnumStreamIdMap)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IEnumStreamIdMap_Next_Proxy(IEnumStreamIdMap *This,ULONG cRequest,STREAM_ID_MAP *pStreamIdMap,ULONG *pcReceived);")
cpp_quote("  void __RPC_STUB IEnumStreamIdMap_Next_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IEnumStreamIdMap_Skip_Proxy(IEnumStreamIdMap *This,ULONG cRecords);")
cpp_quote("  void __RPC_STUB IEnumStreamIdMap_Skip_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IEnumStreamIdMap_Reset_Proxy(IEnumStreamIdMap *This);")
cpp_quote("  void __RPC_STUB IEnumStreamIdMap_Reset_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IEnumStreamIdMap_Clone_Proxy(IEnumStreamIdMap *This,IEnumStreamIdMap **ppIEnumStreamIdMap);")
cpp_quote("  void __RPC_STUB IEnumStreamIdMap_Clone_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IMPEG2StreamIdMap_INTERFACE_DEFINED__")
cpp_quote("#define __IMPEG2StreamIdMap_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IMPEG2StreamIdMap;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IMPEG2StreamIdMap : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI MapStreamId(ULONG ulStreamId,DWORD MediaSampleContent,ULONG ulSubstreamFilterValue,int iDataOffset) = 0;")
cpp_quote("    virtual HRESULT WINAPI UnmapStreamId(ULONG culStreamId,ULONG *pulStreamId) = 0;")
cpp_quote("    virtual HRESULT WINAPI EnumStreamIdMap(IEnumStreamIdMap **ppIEnumStreamIdMap) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IMPEG2StreamIdMapVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IMPEG2StreamIdMap *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IMPEG2StreamIdMap *This);")
cpp_quote("      ULONG (WINAPI *Release)(IMPEG2StreamIdMap *This);")
cpp_quote("      HRESULT (WINAPI *MapStreamId)(IMPEG2StreamIdMap *This,ULONG ulStreamId,DWORD MediaSampleContent,ULONG ulSubstreamFilterValue,int iDataOffset);")
cpp_quote("      HRESULT (WINAPI *UnmapStreamId)(IMPEG2StreamIdMap *This,ULONG culStreamId,ULONG *pulStreamId);")
cpp_quote("      HRESULT (WINAPI *EnumStreamIdMap)(IMPEG2StreamIdMap *This,IEnumStreamIdMap **ppIEnumStreamIdMap);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IMPEG2StreamIdMapVtbl;")
cpp_quote("  struct IMPEG2StreamIdMap {")
cpp_quote("    CONST_VTBL struct IMPEG2StreamIdMapVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IMPEG2StreamIdMap_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IMPEG2StreamIdMap_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IMPEG2StreamIdMap_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IMPEG2StreamIdMap_MapStreamId(This,ulStreamId,MediaSampleContent,ulSubstreamFilterValue,iDataOffset) (This)->lpVtbl->MapStreamId(This,ulStreamId,MediaSampleContent,ulSubstreamFilterValue,iDataOffset)")
cpp_quote("#define IMPEG2StreamIdMap_UnmapStreamId(This,culStreamId,pulStreamId) (This)->lpVtbl->UnmapStreamId(This,culStreamId,pulStreamId)")
cpp_quote("#define IMPEG2StreamIdMap_EnumStreamIdMap(This,ppIEnumStreamIdMap) (This)->lpVtbl->EnumStreamIdMap(This,ppIEnumStreamIdMap)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IMPEG2StreamIdMap_MapStreamId_Proxy(IMPEG2StreamIdMap *This,ULONG ulStreamId,DWORD MediaSampleContent,ULONG ulSubstreamFilterValue,int iDataOffset);")
cpp_quote("  void __RPC_STUB IMPEG2StreamIdMap_MapStreamId_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IMPEG2StreamIdMap_UnmapStreamId_Proxy(IMPEG2StreamIdMap *This,ULONG culStreamId,ULONG *pulStreamId);")
cpp_quote("  void __RPC_STUB IMPEG2StreamIdMap_UnmapStreamId_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IMPEG2StreamIdMap_EnumStreamIdMap_Proxy(IMPEG2StreamIdMap *This,IEnumStreamIdMap **ppIEnumStreamIdMap);")
cpp_quote("  void __RPC_STUB IMPEG2StreamIdMap_EnumStreamIdMap_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IRegisterServiceProvider_INTERFACE_DEFINED__")
cpp_quote("#define __IRegisterServiceProvider_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IRegisterServiceProvider;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IRegisterServiceProvider : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI RegisterService(REFGUID guidService,IUnknown *pUnkObject) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IRegisterServiceProviderVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IRegisterServiceProvider *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IRegisterServiceProvider *This);")
cpp_quote("      ULONG (WINAPI *Release)(IRegisterServiceProvider *This);")
cpp_quote("      HRESULT (WINAPI *RegisterService)(IRegisterServiceProvider *This,REFGUID guidService,IUnknown *pUnkObject);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IRegisterServiceProviderVtbl;")
cpp_quote("  struct IRegisterServiceProvider {")
cpp_quote("    CONST_VTBL struct IRegisterServiceProviderVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IRegisterServiceProvider_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IRegisterServiceProvider_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IRegisterServiceProvider_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IRegisterServiceProvider_RegisterService(This,guidService,pUnkObject) (This)->lpVtbl->RegisterService(This,guidService,pUnkObject)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IRegisterServiceProvider_RegisterService_Proxy(IRegisterServiceProvider *This,REFGUID guidService,IUnknown *pUnkObject);")
cpp_quote("  void __RPC_STUB IRegisterServiceProvider_RegisterService_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMClockSlave_INTERFACE_DEFINED__")
cpp_quote("#define __IAMClockSlave_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IAMClockSlave;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IAMClockSlave : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI SetErrorTolerance(DWORD dwTolerance) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetErrorTolerance(DWORD *pdwTolerance) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IAMClockSlaveVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IAMClockSlave *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IAMClockSlave *This);")
cpp_quote("      ULONG (WINAPI *Release)(IAMClockSlave *This);")
cpp_quote("      HRESULT (WINAPI *SetErrorTolerance)(IAMClockSlave *This,DWORD dwTolerance);")
cpp_quote("      HRESULT (WINAPI *GetErrorTolerance)(IAMClockSlave *This,DWORD *pdwTolerance);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IAMClockSlaveVtbl;")
cpp_quote("  struct IAMClockSlave {")
cpp_quote("    CONST_VTBL struct IAMClockSlaveVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IAMClockSlave_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IAMClockSlave_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IAMClockSlave_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IAMClockSlave_SetErrorTolerance(This,dwTolerance) (This)->lpVtbl->SetErrorTolerance(This,dwTolerance)")
cpp_quote("#define IAMClockSlave_GetErrorTolerance(This,pdwTolerance) (This)->lpVtbl->GetErrorTolerance(This,pdwTolerance)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IAMClockSlave_SetErrorTolerance_Proxy(IAMClockSlave *This,DWORD dwTolerance);")
cpp_quote("  void __RPC_STUB IAMClockSlave_SetErrorTolerance_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMClockSlave_GetErrorTolerance_Proxy(IAMClockSlave *This,DWORD *pdwTolerance);")
cpp_quote("  void __RPC_STUB IAMClockSlave_GetErrorTolerance_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IAMGraphBuilderCallback_INTERFACE_DEFINED__")
cpp_quote("#define __IAMGraphBuilderCallback_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IAMGraphBuilderCallback;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IAMGraphBuilderCallback : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI SelectedFilter(IMoniker *pMon) = 0;")
cpp_quote("    virtual HRESULT WINAPI CreatedFilter(IBaseFilter *pFil) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IAMGraphBuilderCallbackVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IAMGraphBuilderCallback *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IAMGraphBuilderCallback *This);")
cpp_quote("      ULONG (WINAPI *Release)(IAMGraphBuilderCallback *This);")
cpp_quote("      HRESULT (WINAPI *SelectedFilter)(IAMGraphBuilderCallback *This,IMoniker *pMon);")
cpp_quote("      HRESULT (WINAPI *CreatedFilter)(IAMGraphBuilderCallback *This,IBaseFilter *pFil);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IAMGraphBuilderCallbackVtbl;")
cpp_quote("  struct IAMGraphBuilderCallback {")
cpp_quote("    CONST_VTBL struct IAMGraphBuilderCallbackVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IAMGraphBuilderCallback_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IAMGraphBuilderCallback_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IAMGraphBuilderCallback_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IAMGraphBuilderCallback_SelectedFilter(This,pMon) (This)->lpVtbl->SelectedFilter(This,pMon)")
cpp_quote("#define IAMGraphBuilderCallback_CreatedFilter(This,pFil) (This)->lpVtbl->CreatedFilter(This,pFil)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IAMGraphBuilderCallback_SelectedFilter_Proxy(IAMGraphBuilderCallback *This,IMoniker *pMon);")
cpp_quote("  void __RPC_STUB IAMGraphBuilderCallback_SelectedFilter_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMGraphBuilderCallback_CreatedFilter_Proxy(IAMGraphBuilderCallback *This,IBaseFilter *pFil);")
cpp_quote("  void __RPC_STUB IAMGraphBuilderCallback_CreatedFilter_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifdef __cplusplus")
cpp_quote("#ifndef _IAMFilterGraphCallback_")
cpp_quote("#define _IAMFilterGraphCallback_")
cpp_quote("  EXTERN_GUID(IID_IAMFilterGraphCallback,0x56a868fd,0x0ad4,0x11ce,0xb0,0xa3,0x0,0x20,0xaf,0x0b,0xa7,0x70);")
cpp_quote("  struct IAMFilterGraphCallback : public IUnknown {")
cpp_quote("    virtual HRESULT UnableToRender(IPin *pPin) = 0;")
cpp_quote("  };")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  struct CodecAPIEventData {")
cpp_quote("    GUID guid;")
cpp_quote("    DWORD dataLength;")
cpp_quote("    DWORD reserved[3];")
cpp_quote("  };")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0370_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0370_v0_0_s_ifspec;")
cpp_quote("#ifndef __ICodecAPI_INTERFACE_DEFINED__")
cpp_quote("#define __ICodecAPI_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_ICodecAPI;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct ICodecAPI : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI IsSupported(const GUID *Api) = 0;")
cpp_quote("    virtual HRESULT WINAPI IsModifiable(const GUID *Api) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetParameterRange(const GUID *Api,VARIANT *ValueMin,VARIANT *ValueMax,VARIANT *SteppingDelta) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetParameterValues(const GUID *Api,VARIANT **Values,ULONG *ValuesCount) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetDefaultValue(const GUID *Api,VARIANT *Value) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetValue(const GUID *Api,VARIANT *Value) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetValue(const GUID *Api,VARIANT *Value) = 0;")
cpp_quote("    virtual HRESULT WINAPI RegisterForEvent(const GUID *Api,LONG_PTR userData) = 0;")
cpp_quote("    virtual HRESULT WINAPI UnregisterForEvent(const GUID *Api) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetAllDefaults(void) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetValueWithNotify(const GUID *Api,VARIANT *Value,GUID **ChangedParam,ULONG *ChangedParamCount) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetAllDefaultsWithNotify(GUID **ChangedParam,ULONG *ChangedParamCount) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetAllSettings(IStream *__MIDL_0016) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetAllSettings(IStream *__MIDL_0017) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetAllSettingsWithNotify(IStream *__MIDL_0018,GUID **ChangedParam,ULONG *ChangedParamCount) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct ICodecAPIVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(ICodecAPI *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(ICodecAPI *This);")
cpp_quote("      ULONG (WINAPI *Release)(ICodecAPI *This);")
cpp_quote("      HRESULT (WINAPI *IsSupported)(ICodecAPI *This,const GUID *Api);")
cpp_quote("      HRESULT (WINAPI *IsModifiable)(ICodecAPI *This,const GUID *Api);")
cpp_quote("      HRESULT (WINAPI *GetParameterRange)(ICodecAPI *This,const GUID *Api,VARIANT *ValueMin,VARIANT *ValueMax,VARIANT *SteppingDelta);")
cpp_quote("      HRESULT (WINAPI *GetParameterValues)(ICodecAPI *This,const GUID *Api,VARIANT **Values,ULONG *ValuesCount);")
cpp_quote("      HRESULT (WINAPI *GetDefaultValue)(ICodecAPI *This,const GUID *Api,VARIANT *Value);")
cpp_quote("      HRESULT (WINAPI *GetValue)(ICodecAPI *This,const GUID *Api,VARIANT *Value);")
cpp_quote("      HRESULT (WINAPI *SetValue)(ICodecAPI *This,const GUID *Api,VARIANT *Value);")
cpp_quote("      HRESULT (WINAPI *RegisterForEvent)(ICodecAPI *This,const GUID *Api,LONG_PTR userData);")
cpp_quote("      HRESULT (WINAPI *UnregisterForEvent)(ICodecAPI *This,const GUID *Api);")
cpp_quote("      HRESULT (WINAPI *SetAllDefaults)(ICodecAPI *This);")
cpp_quote("      HRESULT (WINAPI *SetValueWithNotify)(ICodecAPI *This,const GUID *Api,VARIANT *Value,GUID **ChangedParam,ULONG *ChangedParamCount);")
cpp_quote("      HRESULT (WINAPI *SetAllDefaultsWithNotify)(ICodecAPI *This,GUID **ChangedParam,ULONG *ChangedParamCount);")
cpp_quote("      HRESULT (WINAPI *GetAllSettings)(ICodecAPI *This,IStream *__MIDL_0016);")
cpp_quote("      HRESULT (WINAPI *SetAllSettings)(ICodecAPI *This,IStream *__MIDL_0017);")
cpp_quote("      HRESULT (WINAPI *SetAllSettingsWithNotify)(ICodecAPI *This,IStream *__MIDL_0018,GUID **ChangedParam,ULONG *ChangedParamCount);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } ICodecAPIVtbl;")
cpp_quote("  struct ICodecAPI {")
cpp_quote("    CONST_VTBL struct ICodecAPIVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define ICodecAPI_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define ICodecAPI_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define ICodecAPI_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define ICodecAPI_IsSupported(This,Api) (This)->lpVtbl->IsSupported(This,Api)")
cpp_quote("#define ICodecAPI_IsModifiable(This,Api) (This)->lpVtbl->IsModifiable(This,Api)")
cpp_quote("#define ICodecAPI_GetParameterRange(This,Api,ValueMin,ValueMax,SteppingDelta) (This)->lpVtbl->GetParameterRange(This,Api,ValueMin,ValueMax,SteppingDelta)")
cpp_quote("#define ICodecAPI_GetParameterValues(This,Api,Values,ValuesCount) (This)->lpVtbl->GetParameterValues(This,Api,Values,ValuesCount)")
cpp_quote("#define ICodecAPI_GetDefaultValue(This,Api,Value) (This)->lpVtbl->GetDefaultValue(This,Api,Value)")
cpp_quote("#define ICodecAPI_GetValue(This,Api,Value) (This)->lpVtbl->GetValue(This,Api,Value)")
cpp_quote("#define ICodecAPI_SetValue(This,Api,Value) (This)->lpVtbl->SetValue(This,Api,Value)")
cpp_quote("#define ICodecAPI_RegisterForEvent(This,Api,userData) (This)->lpVtbl->RegisterForEvent(This,Api,userData)")
cpp_quote("#define ICodecAPI_UnregisterForEvent(This,Api) (This)->lpVtbl->UnregisterForEvent(This,Api)")
cpp_quote("#define ICodecAPI_SetAllDefaults(This) (This)->lpVtbl->SetAllDefaults(This)")
cpp_quote("#define ICodecAPI_SetValueWithNotify(This,Api,Value,ChangedParam,ChangedParamCount) (This)->lpVtbl->SetValueWithNotify(This,Api,Value,ChangedParam,ChangedParamCount)")
cpp_quote("#define ICodecAPI_SetAllDefaultsWithNotify(This,ChangedParam,ChangedParamCount) (This)->lpVtbl->SetAllDefaultsWithNotify(This,ChangedParam,ChangedParamCount)")
cpp_quote("#define ICodecAPI_GetAllSettings(This,__MIDL_0016) (This)->lpVtbl->GetAllSettings(This,__MIDL_0016)")
cpp_quote("#define ICodecAPI_SetAllSettings(This,__MIDL_0017) (This)->lpVtbl->SetAllSettings(This,__MIDL_0017)")
cpp_quote("#define ICodecAPI_SetAllSettingsWithNotify(This,__MIDL_0018,ChangedParam,ChangedParamCount) (This)->lpVtbl->SetAllSettingsWithNotify(This,__MIDL_0018,ChangedParam,ChangedParamCount)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI ICodecAPI_IsSupported_Proxy(ICodecAPI *This,const GUID *Api);")
cpp_quote("  void __RPC_STUB ICodecAPI_IsSupported_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI ICodecAPI_IsModifiable_Proxy(ICodecAPI *This,const GUID *Api);")
cpp_quote("  void __RPC_STUB ICodecAPI_IsModifiable_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI ICodecAPI_GetParameterRange_Proxy(ICodecAPI *This,const GUID *Api,VARIANT *ValueMin,VARIANT *ValueMax,VARIANT *SteppingDelta);")
cpp_quote("  void __RPC_STUB ICodecAPI_GetParameterRange_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI ICodecAPI_GetParameterValues_Proxy(ICodecAPI *This,const GUID *Api,VARIANT **Values,ULONG *ValuesCount);")
cpp_quote("  void __RPC_STUB ICodecAPI_GetParameterValues_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI ICodecAPI_GetDefaultValue_Proxy(ICodecAPI *This,const GUID *Api,VARIANT *Value);")
cpp_quote("  void __RPC_STUB ICodecAPI_GetDefaultValue_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI ICodecAPI_GetValue_Proxy(ICodecAPI *This,const GUID *Api,VARIANT *Value);")
cpp_quote("  void __RPC_STUB ICodecAPI_GetValue_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI ICodecAPI_SetValue_Proxy(ICodecAPI *This,const GUID *Api,VARIANT *Value);")
cpp_quote("  void __RPC_STUB ICodecAPI_SetValue_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI ICodecAPI_RegisterForEvent_Proxy(ICodecAPI *This,const GUID *Api,LONG_PTR userData);")
cpp_quote("  void __RPC_STUB ICodecAPI_RegisterForEvent_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI ICodecAPI_UnregisterForEvent_Proxy(ICodecAPI *This,const GUID *Api);")
cpp_quote("  void __RPC_STUB ICodecAPI_UnregisterForEvent_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI ICodecAPI_SetAllDefaults_Proxy(ICodecAPI *This);")
cpp_quote("  void __RPC_STUB ICodecAPI_SetAllDefaults_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI ICodecAPI_SetValueWithNotify_Proxy(ICodecAPI *This,const GUID *Api,VARIANT *Value,GUID **ChangedParam,ULONG *ChangedParamCount);")
cpp_quote("  void __RPC_STUB ICodecAPI_SetValueWithNotify_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI ICodecAPI_SetAllDefaultsWithNotify_Proxy(ICodecAPI *This,GUID **ChangedParam,ULONG *ChangedParamCount);")
cpp_quote("  void __RPC_STUB ICodecAPI_SetAllDefaultsWithNotify_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI ICodecAPI_GetAllSettings_Proxy(ICodecAPI *This,IStream *__MIDL_0016);")
cpp_quote("  void __RPC_STUB ICodecAPI_GetAllSettings_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI ICodecAPI_SetAllSettings_Proxy(ICodecAPI *This,IStream *__MIDL_0017);")
cpp_quote("  void __RPC_STUB ICodecAPI_SetAllSettings_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI ICodecAPI_SetAllSettingsWithNotify_Proxy(ICodecAPI *This,IStream *__MIDL_0018,GUID **ChangedParam,ULONG *ChangedParamCount);")
cpp_quote("  void __RPC_STUB ICodecAPI_SetAllSettingsWithNotify_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IGetCapabilitiesKey_INTERFACE_DEFINED__")
cpp_quote("#define __IGetCapabilitiesKey_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IGetCapabilitiesKey;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IGetCapabilitiesKey : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI GetCapabilitiesKey(HKEY *pHKey) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IGetCapabilitiesKeyVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IGetCapabilitiesKey *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IGetCapabilitiesKey *This);")
cpp_quote("      ULONG (WINAPI *Release)(IGetCapabilitiesKey *This);")
cpp_quote("      HRESULT (WINAPI *GetCapabilitiesKey)(IGetCapabilitiesKey *This,HKEY *pHKey);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IGetCapabilitiesKeyVtbl;")
cpp_quote("  struct IGetCapabilitiesKey {")
cpp_quote("    CONST_VTBL struct IGetCapabilitiesKeyVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IGetCapabilitiesKey_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IGetCapabilitiesKey_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IGetCapabilitiesKey_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IGetCapabilitiesKey_GetCapabilitiesKey(This,pHKey) (This)->lpVtbl->GetCapabilitiesKey(This,pHKey)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IGetCapabilitiesKey_GetCapabilitiesKey_Proxy(IGetCapabilitiesKey *This,HKEY *pHKey);")
cpp_quote("  void __RPC_STUB IGetCapabilitiesKey_GetCapabilitiesKey_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IEncoderAPI_INTERFACE_DEFINED__")
cpp_quote("#define __IEncoderAPI_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IEncoderAPI;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IEncoderAPI : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI IsSupported(const GUID *Api) = 0;")
cpp_quote("    virtual HRESULT WINAPI IsAvailable(const GUID *Api) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetParameterRange(const GUID *Api,VARIANT *ValueMin,VARIANT *ValueMax,VARIANT *SteppingDelta) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetParameterValues(const GUID *Api,VARIANT **Values,ULONG *ValuesCount) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetDefaultValue(const GUID *Api,VARIANT *Value) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetValue(const GUID *Api,VARIANT *Value) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetValue(const GUID *Api,VARIANT *Value) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IEncoderAPIVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IEncoderAPI *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IEncoderAPI *This);")
cpp_quote("      ULONG (WINAPI *Release)(IEncoderAPI *This);")
cpp_quote("      HRESULT (WINAPI *IsSupported)(IEncoderAPI *This,const GUID *Api);")
cpp_quote("      HRESULT (WINAPI *IsAvailable)(IEncoderAPI *This,const GUID *Api);")
cpp_quote("      HRESULT (WINAPI *GetParameterRange)(IEncoderAPI *This,const GUID *Api,VARIANT *ValueMin,VARIANT *ValueMax,VARIANT *SteppingDelta);")
cpp_quote("      HRESULT (WINAPI *GetParameterValues)(IEncoderAPI *This,const GUID *Api,VARIANT **Values,ULONG *ValuesCount);")
cpp_quote("      HRESULT (WINAPI *GetDefaultValue)(IEncoderAPI *This,const GUID *Api,VARIANT *Value);")
cpp_quote("      HRESULT (WINAPI *GetValue)(IEncoderAPI *This,const GUID *Api,VARIANT *Value);")
cpp_quote("      HRESULT (WINAPI *SetValue)(IEncoderAPI *This,const GUID *Api,VARIANT *Value);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IEncoderAPIVtbl;")
cpp_quote("  struct IEncoderAPI {")
cpp_quote("    CONST_VTBL struct IEncoderAPIVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IEncoderAPI_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IEncoderAPI_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IEncoderAPI_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IEncoderAPI_IsSupported(This,Api) (This)->lpVtbl->IsSupported(This,Api)")
cpp_quote("#define IEncoderAPI_IsAvailable(This,Api) (This)->lpVtbl->IsAvailable(This,Api)")
cpp_quote("#define IEncoderAPI_GetParameterRange(This,Api,ValueMin,ValueMax,SteppingDelta) (This)->lpVtbl->GetParameterRange(This,Api,ValueMin,ValueMax,SteppingDelta)")
cpp_quote("#define IEncoderAPI_GetParameterValues(This,Api,Values,ValuesCount) (This)->lpVtbl->GetParameterValues(This,Api,Values,ValuesCount)")
cpp_quote("#define IEncoderAPI_GetDefaultValue(This,Api,Value) (This)->lpVtbl->GetDefaultValue(This,Api,Value)")
cpp_quote("#define IEncoderAPI_GetValue(This,Api,Value) (This)->lpVtbl->GetValue(This,Api,Value)")
cpp_quote("#define IEncoderAPI_SetValue(This,Api,Value) (This)->lpVtbl->SetValue(This,Api,Value)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IEncoderAPI_IsSupported_Proxy(IEncoderAPI *This,const GUID *Api);")
cpp_quote("  void __RPC_STUB IEncoderAPI_IsSupported_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IEncoderAPI_IsAvailable_Proxy(IEncoderAPI *This,const GUID *Api);")
cpp_quote("  void __RPC_STUB IEncoderAPI_IsAvailable_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IEncoderAPI_GetParameterRange_Proxy(IEncoderAPI *This,const GUID *Api,VARIANT *ValueMin,VARIANT *ValueMax,VARIANT *SteppingDelta);")
cpp_quote("  void __RPC_STUB IEncoderAPI_GetParameterRange_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IEncoderAPI_GetParameterValues_Proxy(IEncoderAPI *This,const GUID *Api,VARIANT **Values,ULONG *ValuesCount);")
cpp_quote("  void __RPC_STUB IEncoderAPI_GetParameterValues_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IEncoderAPI_GetDefaultValue_Proxy(IEncoderAPI *This,const GUID *Api,VARIANT *Value);")
cpp_quote("  void __RPC_STUB IEncoderAPI_GetDefaultValue_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IEncoderAPI_GetValue_Proxy(IEncoderAPI *This,const GUID *Api,VARIANT *Value);")
cpp_quote("  void __RPC_STUB IEncoderAPI_GetValue_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IEncoderAPI_SetValue_Proxy(IEncoderAPI *This,const GUID *Api,VARIANT *Value);")
cpp_quote("  void __RPC_STUB IEncoderAPI_SetValue_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IVideoEncoder_INTERFACE_DEFINED__")
cpp_quote("#define __IVideoEncoder_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IVideoEncoder;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IVideoEncoder : public IEncoderAPI {")
cpp_quote("  public:")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IVideoEncoderVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IVideoEncoder *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IVideoEncoder *This);")
cpp_quote("      ULONG (WINAPI *Release)(IVideoEncoder *This);")
cpp_quote("      HRESULT (WINAPI *IsSupported)(IVideoEncoder *This,const GUID *Api);")
cpp_quote("      HRESULT (WINAPI *IsAvailable)(IVideoEncoder *This,const GUID *Api);")
cpp_quote("      HRESULT (WINAPI *GetParameterRange)(IVideoEncoder *This,const GUID *Api,VARIANT *ValueMin,VARIANT *ValueMax,VARIANT *SteppingDelta);")
cpp_quote("      HRESULT (WINAPI *GetParameterValues)(IVideoEncoder *This,const GUID *Api,VARIANT **Values,ULONG *ValuesCount);")
cpp_quote("      HRESULT (WINAPI *GetDefaultValue)(IVideoEncoder *This,const GUID *Api,VARIANT *Value);")
cpp_quote("      HRESULT (WINAPI *GetValue)(IVideoEncoder *This,const GUID *Api,VARIANT *Value);")
cpp_quote("      HRESULT (WINAPI *SetValue)(IVideoEncoder *This,const GUID *Api,VARIANT *Value);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IVideoEncoderVtbl;")
cpp_quote("  struct IVideoEncoder {")
cpp_quote("    CONST_VTBL struct IVideoEncoderVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IVideoEncoder_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IVideoEncoder_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IVideoEncoder_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IVideoEncoder_IsSupported(This,Api) (This)->lpVtbl->IsSupported(This,Api)")
cpp_quote("#define IVideoEncoder_IsAvailable(This,Api) (This)->lpVtbl->IsAvailable(This,Api)")
cpp_quote("#define IVideoEncoder_GetParameterRange(This,Api,ValueMin,ValueMax,SteppingDelta) (This)->lpVtbl->GetParameterRange(This,Api,ValueMin,ValueMax,SteppingDelta)")
cpp_quote("#define IVideoEncoder_GetParameterValues(This,Api,Values,ValuesCount) (This)->lpVtbl->GetParameterValues(This,Api,Values,ValuesCount)")
cpp_quote("#define IVideoEncoder_GetDefaultValue(This,Api,Value) (This)->lpVtbl->GetDefaultValue(This,Api,Value)")
cpp_quote("#define IVideoEncoder_GetValue(This,Api,Value) (This)->lpVtbl->GetValue(This,Api,Value)")
cpp_quote("#define IVideoEncoder_SetValue(This,Api,Value) (This)->lpVtbl->SetValue(This,Api,Value)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __ENCODER_API_DEFINES__")
cpp_quote("#define __ENCODER_API_DEFINES__")
cpp_quote("  typedef enum __MIDL___MIDL_itf_strmif_0374_0001 {")
cpp_quote("    ConstantBitRate = 0,")
cpp_quote("    VariableBitRateAverage,VariableBitRatePeak")
cpp_quote("  } VIDEOENCODER_BITRATE_MODE;")
cpp_quote("#endif")
cpp_quote("#define AM_GETDECODERCAP_QUERY_VMR_SUPPORT 0x00000001")
cpp_quote("#define VMR_NOTSUPPORTED 0x00000000")
cpp_quote("#define VMR_SUPPORTED 0x00000001")
cpp_quote("#define AM_QUERY_DECODER_VMR_SUPPORT 0x00000001")
cpp_quote("#define AM_QUERY_DECODER_DXVA_1_SUPPORT 0x00000002")
cpp_quote("#define AM_QUERY_DECODER_DVD_SUPPORT 0x00000003")
cpp_quote("#define AM_QUERY_DECODER_ATSC_SD_SUPPORT 0x00000004")
cpp_quote("#define AM_QUERY_DECODER_ATSC_HD_SUPPORT 0x00000005")
cpp_quote("#define AM_GETDECODERCAP_QUERY_VMR9_SUPPORT 0x00000006")
cpp_quote("#define DECODER_CAP_NOTSUPPORTED 0x00000000")
cpp_quote("#define DECODER_CAP_SUPPORTED 0x00000001")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0374_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0374_v0_0_s_ifspec;")
cpp_quote("#ifndef __IAMDecoderCaps_INTERFACE_DEFINED__")
cpp_quote("#define __IAMDecoderCaps_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IAMDecoderCaps;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IAMDecoderCaps : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI GetDecoderCaps(DWORD dwCapIndex,DWORD *lpdwCap) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IAMDecoderCapsVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IAMDecoderCaps *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IAMDecoderCaps *This);")
cpp_quote("      ULONG (WINAPI *Release)(IAMDecoderCaps *This);")
cpp_quote("      HRESULT (WINAPI *GetDecoderCaps)(IAMDecoderCaps *This,DWORD dwCapIndex,DWORD *lpdwCap);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IAMDecoderCapsVtbl;")
cpp_quote("  struct IAMDecoderCaps {")
cpp_quote("    CONST_VTBL struct IAMDecoderCapsVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IAMDecoderCaps_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IAMDecoderCaps_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IAMDecoderCaps_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IAMDecoderCaps_GetDecoderCaps(This,dwCapIndex,lpdwCap) (This)->lpVtbl->GetDecoderCaps(This,dwCapIndex,lpdwCap)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IAMDecoderCaps_GetDecoderCaps_Proxy(IAMDecoderCaps *This,DWORD dwCapIndex,DWORD *lpdwCap);")
cpp_quote("  void __RPC_STUB IAMDecoderCaps_GetDecoderCaps_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  typedef struct _AMCOPPSignature {")
cpp_quote("    BYTE Signature[256];")
cpp_quote("  } AMCOPPSignature;")
cpp_quote("")
cpp_quote("  typedef struct _AMCOPPCommand {")
cpp_quote("    GUID macKDI;")
cpp_quote("    GUID guidCommandID;")
cpp_quote("    DWORD dwSequence;")
cpp_quote("    DWORD cbSizeData;")
cpp_quote("    BYTE CommandData[4056];")
cpp_quote("  } AMCOPPCommand;")
cpp_quote("")
cpp_quote("  typedef struct _AMCOPPCommand *LPAMCOPPCommand;")
cpp_quote("")
cpp_quote("  typedef struct _AMCOPPStatusInput {")
cpp_quote("    GUID rApp;")
cpp_quote("    GUID guidStatusRequestID;")
cpp_quote("    DWORD dwSequence;")
cpp_quote("    DWORD cbSizeData;")
cpp_quote("    BYTE StatusData[4056];")
cpp_quote("  } AMCOPPStatusInput;")
cpp_quote("")
cpp_quote("  typedef struct _AMCOPPStatusInput *LPAMCOPPStatusInput;")
cpp_quote("")
cpp_quote("  typedef struct _AMCOPPStatusOutput {")
cpp_quote("    GUID macKDI;")
cpp_quote("    DWORD cbSizeData;")
cpp_quote("    BYTE COPPStatus[4076];")
cpp_quote("  } AMCOPPStatusOutput;")
cpp_quote("")
cpp_quote("  typedef struct _AMCOPPStatusOutput *LPAMCOPPStatusOutput;")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0375_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0375_v0_0_s_ifspec;")
cpp_quote("#ifndef __IAMCertifiedOutputProtection_INTERFACE_DEFINED__")
cpp_quote("#define __IAMCertifiedOutputProtection_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IAMCertifiedOutputProtection;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IAMCertifiedOutputProtection : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI KeyExchange(GUID *pRandom,BYTE **VarLenCertGH,DWORD *pdwLengthCertGH) = 0;")
cpp_quote("    virtual HRESULT WINAPI SessionSequenceStart(AMCOPPSignature *pSig) = 0;")
cpp_quote("    virtual HRESULT WINAPI ProtectionCommand(const AMCOPPCommand *cmd) = 0;")
cpp_quote("    virtual HRESULT WINAPI ProtectionStatus(const AMCOPPStatusInput *pStatusInput,AMCOPPStatusOutput *pStatusOutput) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IAMCertifiedOutputProtectionVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IAMCertifiedOutputProtection *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IAMCertifiedOutputProtection *This);")
cpp_quote("      ULONG (WINAPI *Release)(IAMCertifiedOutputProtection *This);")
cpp_quote("      HRESULT (WINAPI *KeyExchange)(IAMCertifiedOutputProtection *This,GUID *pRandom,BYTE **VarLenCertGH,DWORD *pdwLengthCertGH);")
cpp_quote("      HRESULT (WINAPI *SessionSequenceStart)(IAMCertifiedOutputProtection *This,AMCOPPSignature *pSig);")
cpp_quote("      HRESULT (WINAPI *ProtectionCommand)(IAMCertifiedOutputProtection *This,const AMCOPPCommand *cmd);")
cpp_quote("      HRESULT (WINAPI *ProtectionStatus)(IAMCertifiedOutputProtection *This,const AMCOPPStatusInput *pStatusInput,AMCOPPStatusOutput *pStatusOutput);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IAMCertifiedOutputProtectionVtbl;")
cpp_quote("  struct IAMCertifiedOutputProtection {")
cpp_quote("    CONST_VTBL struct IAMCertifiedOutputProtectionVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IAMCertifiedOutputProtection_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IAMCertifiedOutputProtection_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IAMCertifiedOutputProtection_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IAMCertifiedOutputProtection_KeyExchange(This,pRandom,VarLenCertGH,pdwLengthCertGH) (This)->lpVtbl->KeyExchange(This,pRandom,VarLenCertGH,pdwLengthCertGH)")
cpp_quote("#define IAMCertifiedOutputProtection_SessionSequenceStart(This,pSig) (This)->lpVtbl->SessionSequenceStart(This,pSig)")
cpp_quote("#define IAMCertifiedOutputProtection_ProtectionCommand(This,cmd) (This)->lpVtbl->ProtectionCommand(This,cmd)")
cpp_quote("#define IAMCertifiedOutputProtection_ProtectionStatus(This,pStatusInput,pStatusOutput) (This)->lpVtbl->ProtectionStatus(This,pStatusInput,pStatusOutput)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IAMCertifiedOutputProtection_KeyExchange_Proxy(IAMCertifiedOutputProtection *This,GUID *pRandom,BYTE **VarLenCertGH,DWORD *pdwLengthCertGH);")
cpp_quote("  void __RPC_STUB IAMCertifiedOutputProtection_KeyExchange_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMCertifiedOutputProtection_SessionSequenceStart_Proxy(IAMCertifiedOutputProtection *This,AMCOPPSignature *pSig);")
cpp_quote("  void __RPC_STUB IAMCertifiedOutputProtection_SessionSequenceStart_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMCertifiedOutputProtection_ProtectionCommand_Proxy(IAMCertifiedOutputProtection *This,const AMCOPPCommand *cmd);")
cpp_quote("  void __RPC_STUB IAMCertifiedOutputProtection_ProtectionCommand_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IAMCertifiedOutputProtection_ProtectionStatus_Proxy(IAMCertifiedOutputProtection *This,const AMCOPPStatusInput *pStatusInput,AMCOPPStatusOutput *pStatusOutput);")
cpp_quote("  void __RPC_STUB IAMCertifiedOutputProtection_ProtectionStatus_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifdef MINGW_HAS_DDRAW_H")
cpp_quote("#include <ddraw.h>")
cpp_quote("#else")
cpp_quote("  typedef void *IDirectDraw;")
cpp_quote("  typedef void *IDirectDrawSurface;")
cpp_quote("  typedef void *LPDIRECTDRAWSURFACE7;")
cpp_quote("  typedef void *LPDIRECTDRAW7;")
cpp_quote("  typedef void *LPDDPIXELFORMAT;")
cpp_quote("  typedef struct DDCOLORKEY {")
cpp_quote("    DWORD dw1;")
cpp_quote("    DWORD dw2;")
cpp_quote("  } DDCOLORKEY;")
cpp_quote("  typedef DDCOLORKEY *LPDDCOLORKEY;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  typedef enum tagDVD_DOMAIN {")
cpp_quote("    DVD_DOMAIN_FirstPlay = 1,")
cpp_quote("    DVD_DOMAIN_VideoManagerMenu,DVD_DOMAIN_VideoTitleSetMenu,DVD_DOMAIN_Title,")
cpp_quote("    DVD_DOMAIN_Stop")
cpp_quote("  } DVD_DOMAIN;")
cpp_quote("")
cpp_quote("  typedef enum tagDVD_MENU_ID {")
cpp_quote("    DVD_MENU_Title = 2,DVD_MENU_Root = 3,DVD_MENU_Subpicture = 4,DVD_MENU_Audio = 5,")
cpp_quote("    DVD_MENU_Angle = 6,DVD_MENU_Chapter = 7")
cpp_quote("  } DVD_MENU_ID;")
cpp_quote("")
cpp_quote("  typedef enum tagDVD_DISC_SIDE {")
cpp_quote("    DVD_SIDE_A = 1,DVD_SIDE_B = 2")
cpp_quote("  } DVD_DISC_SIDE;")
cpp_quote("")
cpp_quote("  typedef enum tagDVD_PREFERRED_DISPLAY_MODE {")
cpp_quote("    DISPLAY_CONTENT_DEFAULT = 0,DISPLAY_16x9 = 1,DISPLAY_4x3_PANSCAN_PREFERRED = 2,DISPLAY_4x3_LETTERBOX_PREFERRED = 3")
cpp_quote("  } DVD_PREFERRED_DISPLAY_MODE;")
cpp_quote("")
cpp_quote("  typedef WORD DVD_REGISTER;")
cpp_quote("  typedef DVD_REGISTER GPRMARRAY[16];")
cpp_quote("  typedef DVD_REGISTER SPRMARRAY[24];")
cpp_quote("")
cpp_quote("  typedef struct tagDVD_ATR {")
cpp_quote("    ULONG ulCAT;")
cpp_quote("    BYTE pbATRI[768];")
cpp_quote("  } DVD_ATR;")
cpp_quote("")
cpp_quote("  typedef BYTE DVD_VideoATR[2];")
cpp_quote("  typedef BYTE DVD_AudioATR[8];")
cpp_quote("  typedef BYTE DVD_SubpictureATR[6];")
cpp_quote("")
cpp_quote("  typedef enum tagDVD_FRAMERATE {")
cpp_quote("    DVD_FPS_25 = 1,DVD_FPS_30NonDrop = 3")
cpp_quote("  } DVD_FRAMERATE;")
cpp_quote("")
cpp_quote("  typedef struct tagDVD_TIMECODE {")
cpp_quote("    ULONG Hours1 :4;")
cpp_quote("    ULONG Hours10 :4;")
cpp_quote("    ULONG Minutes1 :4;")
cpp_quote("    ULONG Minutes10:4;")
cpp_quote("    ULONG Seconds1 :4;")
cpp_quote("    ULONG Seconds10:4;")
cpp_quote("    ULONG Frames1 :4;")
cpp_quote("    ULONG Frames10 :2;")
cpp_quote("    ULONG FrameRateCode: 2;")
cpp_quote("  } DVD_TIMECODE;")
cpp_quote("")
cpp_quote("  typedef enum tagDVD_TIMECODE_FLAGS {")
cpp_quote("    DVD_TC_FLAG_25fps = 0x1,DVD_TC_FLAG_30fps = 0x2,DVD_TC_FLAG_DropFrame = 0x4,DVD_TC_FLAG_Interpolated = 0x8")
cpp_quote("  } DVD_TIMECODE_FLAGS;")
cpp_quote("")
cpp_quote("  typedef struct tagDVD_HMSF_TIMECODE {")
cpp_quote("    BYTE bHours;")
cpp_quote("    BYTE bMinutes;")
cpp_quote("    BYTE bSeconds;")
cpp_quote("    BYTE bFrames;")
cpp_quote("  } DVD_HMSF_TIMECODE;")
cpp_quote("")
cpp_quote("  typedef struct tagDVD_PLAYBACK_LOCATION2 {")
cpp_quote("    ULONG TitleNum;")
cpp_quote("    ULONG ChapterNum;")
cpp_quote("    DVD_HMSF_TIMECODE TimeCode;")
cpp_quote("    ULONG TimeCodeFlags;")
cpp_quote("  } DVD_PLAYBACK_LOCATION2;")
cpp_quote("")
cpp_quote("  typedef struct tagDVD_PLAYBACK_LOCATION {")
cpp_quote("    ULONG TitleNum;")
cpp_quote("    ULONG ChapterNum;")
cpp_quote("    ULONG TimeCode;")
cpp_quote("  } DVD_PLAYBACK_LOCATION;")
cpp_quote("")
cpp_quote("  typedef DWORD VALID_UOP_SOMTHING_OR_OTHER;")
cpp_quote("")
cpp_quote("  typedef enum __MIDL___MIDL_itf_strmif_0376_0001 {")
cpp_quote("    UOP_FLAG_Play_Title_Or_AtTime = 0x1,UOP_FLAG_Play_Chapter = 0x2,UOP_FLAG_Play_Title = 0x4,UOP_FLAG_Stop = 0x8,UOP_FLAG_ReturnFromSubMenu = 0x10,")
cpp_quote("    UOP_FLAG_Play_Chapter_Or_AtTime = 0x20,UOP_FLAG_PlayPrev_Or_Replay_Chapter = 0x40,UOP_FLAG_PlayNext_Chapter = 0x80,UOP_FLAG_Play_Forwards = 0x100,")
cpp_quote("    UOP_FLAG_Play_Backwards = 0x200,UOP_FLAG_ShowMenu_Title = 0x400,UOP_FLAG_ShowMenu_Root = 0x800,UOP_FLAG_ShowMenu_SubPic = 0x1000,")
cpp_quote("    UOP_FLAG_ShowMenu_Audio = 0x2000,UOP_FLAG_ShowMenu_Angle = 0x4000,UOP_FLAG_ShowMenu_Chapter = 0x8000,UOP_FLAG_Resume = 0x10000,")
cpp_quote("    UOP_FLAG_Select_Or_Activate_Button = 0x20000,UOP_FLAG_Still_Off = 0x40000,UOP_FLAG_Pause_On = 0x80000,UOP_FLAG_Select_Audio_Stream = 0x100000,")
cpp_quote("    UOP_FLAG_Select_SubPic_Stream = 0x200000,UOP_FLAG_Select_Angle = 0x400000,UOP_FLAG_Select_Karaoke_Audio_Presentation_Mode = 0x800000,")
cpp_quote("    UOP_FLAG_Select_Video_Mode_Preference = 0x1000000")
cpp_quote("  } VALID_UOP_FLAG;")
cpp_quote("")
cpp_quote("  typedef enum __MIDL___MIDL_itf_strmif_0376_0002 {")
cpp_quote("    DVD_CMD_FLAG_None = 0,DVD_CMD_FLAG_Flush = 0x1,DVD_CMD_FLAG_SendEvents = 0x2,DVD_CMD_FLAG_Block = 0x4,DVD_CMD_FLAG_StartWhenRendered = 0x8,")
cpp_quote("    DVD_CMD_FLAG_EndAfterRendered = 0x10")
cpp_quote("  } DVD_CMD_FLAGS;")
cpp_quote("")
cpp_quote("  typedef enum __MIDL___MIDL_itf_strmif_0376_0003 {")
cpp_quote("    DVD_ResetOnStop = 1,DVD_NotifyParentalLevelChange = 2,DVD_HMSF_TimeCodeEvents = 3,DVD_AudioDuringFFwdRew = 4")
cpp_quote("  } DVD_OPTION_FLAG;")
cpp_quote("")
cpp_quote("  typedef enum __MIDL___MIDL_itf_strmif_0376_0004 {")
cpp_quote("    DVD_Relative_Upper = 1,DVD_Relative_Lower = 2,DVD_Relative_Left = 3,DVD_Relative_Right = 4")
cpp_quote("  } DVD_RELATIVE_BUTTON;")
cpp_quote("")
cpp_quote("  typedef enum tagDVD_PARENTAL_LEVEL {")
cpp_quote("    DVD_PARENTAL_LEVEL_8 = 0x8000,DVD_PARENTAL_LEVEL_7 = 0x4000,DVD_PARENTAL_LEVEL_6 = 0x2000,DVD_PARENTAL_LEVEL_5 = 0x1000,")
cpp_quote("    DVD_PARENTAL_LEVEL_4 = 0x800,DVD_PARENTAL_LEVEL_3 = 0x400,DVD_PARENTAL_LEVEL_2 = 0x200,DVD_PARENTAL_LEVEL_1 = 0x100")
cpp_quote("  } DVD_PARENTAL_LEVEL;")
cpp_quote("")
cpp_quote("  typedef enum tagDVD_AUDIO_LANG_EXT {")
cpp_quote("    DVD_AUD_EXT_NotSpecified = 0,DVD_AUD_EXT_Captions = 1,DVD_AUD_EXT_VisuallyImpaired = 2,DVD_AUD_EXT_DirectorComments1 = 3,")
cpp_quote("    DVD_AUD_EXT_DirectorComments2 = 4")
cpp_quote("  } DVD_AUDIO_LANG_EXT;")
cpp_quote("")
cpp_quote("  typedef enum tagDVD_SUBPICTURE_LANG_EXT {")
cpp_quote("    DVD_SP_EXT_NotSpecified = 0,DVD_SP_EXT_Caption_Normal = 1,DVD_SP_EXT_Caption_Big = 2,DVD_SP_EXT_Caption_Children = 3,DVD_SP_EXT_CC_Normal = 5,")
cpp_quote("    DVD_SP_EXT_CC_Big = 6,DVD_SP_EXT_CC_Children = 7,DVD_SP_EXT_Forced = 9,DVD_SP_EXT_DirectorComments_Normal = 13,DVD_SP_EXT_DirectorComments_Big = 14,")
cpp_quote("    DVD_SP_EXT_DirectorComments_Children = 15")
cpp_quote("  } DVD_SUBPICTURE_LANG_EXT;")
cpp_quote("")
cpp_quote("  typedef enum tagDVD_AUDIO_APPMODE {")
cpp_quote("    DVD_AudioMode_None = 0,DVD_AudioMode_Karaoke = 1,DVD_AudioMode_Surround = 2,DVD_AudioMode_Other = 3")
cpp_quote("  } DVD_AUDIO_APPMODE;")
cpp_quote("")
cpp_quote("  typedef enum tagDVD_AUDIO_FORMAT {")
cpp_quote("    DVD_AudioFormat_AC3 = 0,DVD_AudioFormat_MPEG1 = 1,DVD_AudioFormat_MPEG1_DRC = 2,DVD_AudioFormat_MPEG2 = 3,DVD_AudioFormat_MPEG2_DRC = 4,")
cpp_quote("    DVD_AudioFormat_LPCM = 5,DVD_AudioFormat_DTS = 6,DVD_AudioFormat_SDDS = 7,DVD_AudioFormat_Other = 8")
cpp_quote("  } DVD_AUDIO_FORMAT;")
cpp_quote("")
cpp_quote("  typedef enum tagDVD_KARAOKE_DOWNMIX {")
cpp_quote("    DVD_Mix_0to0 = 0x1,DVD_Mix_1to0 = 0x2,DVD_Mix_2to0 = 0x4,DVD_Mix_3to0 = 0x8,DVD_Mix_4to0 = 0x10,DVD_Mix_Lto0 = 0x20,DVD_Mix_Rto0 = 0x40,")
cpp_quote("    DVD_Mix_0to1 = 0x100,DVD_Mix_1to1 = 0x200,DVD_Mix_2to1 = 0x400,DVD_Mix_3to1 = 0x800,DVD_Mix_4to1 = 0x1000,DVD_Mix_Lto1 = 0x2000,")
cpp_quote("    DVD_Mix_Rto1 = 0x4000")
cpp_quote("  } DVD_KARAOKE_DOWNMIX;")
cpp_quote("")
cpp_quote("  typedef struct tagDVD_AudioAttributes {")
cpp_quote("    DVD_AUDIO_APPMODE AppMode;")
cpp_quote("    BYTE AppModeData;")
cpp_quote("    DVD_AUDIO_FORMAT AudioFormat;")
cpp_quote("    LCID Language;")
cpp_quote("    DVD_AUDIO_LANG_EXT LanguageExtension;")
cpp_quote("    WINBOOL fHasMultichannelInfo;")
cpp_quote("    DWORD dwFrequency;")
cpp_quote("    BYTE bQuantization;")
cpp_quote("    BYTE bNumberOfChannels;")
cpp_quote("    DWORD dwReserved[2];")
cpp_quote("  } DVD_AudioAttributes;")
cpp_quote("")
cpp_quote("  typedef struct tagDVD_MUA_MixingInfo {")
cpp_quote("    WINBOOL fMixTo0;")
cpp_quote("    WINBOOL fMixTo1;")
cpp_quote("    WINBOOL fMix0InPhase;")
cpp_quote("    WINBOOL fMix1InPhase;")
cpp_quote("    DWORD dwSpeakerPosition;")
cpp_quote("  } DVD_MUA_MixingInfo;")
cpp_quote("")
cpp_quote("  typedef struct tagDVD_MUA_Coeff {")
cpp_quote("    double log2_alpha;")
cpp_quote("    double log2_beta;")
cpp_quote("  } DVD_MUA_Coeff;")
cpp_quote("")
cpp_quote("  typedef struct tagDVD_MultichannelAudioAttributes {")
cpp_quote("    DVD_MUA_MixingInfo Info[8];")
cpp_quote("    DVD_MUA_Coeff Coeff[8];")
cpp_quote("  } DVD_MultichannelAudioAttributes;")
cpp_quote("")
cpp_quote("  typedef enum tagDVD_KARAOKE_CONTENTS {")
cpp_quote("    DVD_Karaoke_GuideVocal1 = 0x1,DVD_Karaoke_GuideVocal2 = 0x2,DVD_Karaoke_GuideMelody1 = 0x4,DVD_Karaoke_GuideMelody2 = 0x8,")
cpp_quote("    DVD_Karaoke_GuideMelodyA = 0x10,DVD_Karaoke_GuideMelodyB = 0x20,DVD_Karaoke_SoundEffectA = 0x40,DVD_Karaoke_SoundEffectB = 0x80")
cpp_quote("  } DVD_KARAOKE_CONTENTS;")
cpp_quote("")
cpp_quote("  typedef enum tagDVD_KARAOKE_ASSIGNMENT {")
cpp_quote("    DVD_Assignment_reserved0 = 0,DVD_Assignment_reserved1 = 1,DVD_Assignment_LR = 2,DVD_Assignment_LRM = 3,DVD_Assignment_LR1 = 4,")
cpp_quote("    DVD_Assignment_LRM1 = 5,DVD_Assignment_LR12 = 6,DVD_Assignment_LRM12 = 7")
cpp_quote("  } DVD_KARAOKE_ASSIGNMENT;")
cpp_quote("")
cpp_quote("  typedef struct tagDVD_KaraokeAttributes {")
cpp_quote("    BYTE bVersion;")
cpp_quote("    WINBOOL fMasterOfCeremoniesInGuideVocal1;")
cpp_quote("    WINBOOL fDuet;")
cpp_quote("    DVD_KARAOKE_ASSIGNMENT ChannelAssignment;")
cpp_quote("    WORD wChannelContents[8];")
cpp_quote("  } DVD_KaraokeAttributes;")
cpp_quote("")
cpp_quote("  typedef enum tagDVD_VIDEO_COMPRESSION {")
cpp_quote("    DVD_VideoCompression_Other = 0,DVD_VideoCompression_MPEG1 = 1,DVD_VideoCompression_MPEG2 = 2")
cpp_quote("  } DVD_VIDEO_COMPRESSION;")
cpp_quote("")
cpp_quote("  typedef struct tagDVD_VideoAttributes {")
cpp_quote("    WINBOOL fPanscanPermitted;")
cpp_quote("    WINBOOL fLetterboxPermitted;")
cpp_quote("    ULONG ulAspectX;")
cpp_quote("    ULONG ulAspectY;")
cpp_quote("    ULONG ulFrameRate;")
cpp_quote("    ULONG ulFrameHeight;")
cpp_quote("    DVD_VIDEO_COMPRESSION Compression;")
cpp_quote("    WINBOOL fLine21Field1InGOP;")
cpp_quote("    WINBOOL fLine21Field2InGOP;")
cpp_quote("    ULONG ulSourceResolutionX;")
cpp_quote("    ULONG ulSourceResolutionY;")
cpp_quote("    WINBOOL fIsSourceLetterboxed;")
cpp_quote("    WINBOOL fIsFilmMode;")
cpp_quote("  } DVD_VideoAttributes;")
cpp_quote("")
cpp_quote("  typedef enum tagDVD_SUBPICTURE_TYPE {")
cpp_quote("    DVD_SPType_NotSpecified = 0,DVD_SPType_Language = 1,DVD_SPType_Other = 2")
cpp_quote("  } DVD_SUBPICTURE_TYPE;")
cpp_quote("")
cpp_quote("  typedef enum tagDVD_SUBPICTURE_CODING {")
cpp_quote("    DVD_SPCoding_RunLength = 0,DVD_SPCoding_Extended = 1,DVD_SPCoding_Other = 2")
cpp_quote("  } DVD_SUBPICTURE_CODING;")
cpp_quote("")
cpp_quote("  typedef struct tagDVD_SubpictureAttributes {")
cpp_quote("    DVD_SUBPICTURE_TYPE Type;")
cpp_quote("    DVD_SUBPICTURE_CODING CodingMode;")
cpp_quote("    LCID Language;")
cpp_quote("    DVD_SUBPICTURE_LANG_EXT LanguageExtension;")
cpp_quote("  } DVD_SubpictureAttributes;")
cpp_quote("")
cpp_quote("  typedef enum tagDVD_TITLE_APPMODE {")
cpp_quote("    DVD_AppMode_Not_Specified = 0,DVD_AppMode_Karaoke = 1,DVD_AppMode_Other = 3")
cpp_quote("  } DVD_TITLE_APPMODE;")
cpp_quote("")
cpp_quote("  typedef struct tagDVD_TitleMainAttributes {")
cpp_quote("    DVD_TITLE_APPMODE AppMode;")
cpp_quote("    DVD_VideoAttributes VideoAttributes;")
cpp_quote("    ULONG ulNumberOfAudioStreams;")
cpp_quote("    DVD_AudioAttributes AudioAttributes[8];")
cpp_quote("    DVD_MultichannelAudioAttributes MultichannelAudioAttributes[8];")
cpp_quote("    ULONG ulNumberOfSubpictureStreams;")
cpp_quote("    DVD_SubpictureAttributes SubpictureAttributes[32];")
cpp_quote("  } DVD_TitleAttributes;")
cpp_quote("")
cpp_quote("  typedef struct tagDVD_MenuAttributes {")
cpp_quote("    WINBOOL fCompatibleRegion[8];")
cpp_quote("    DVD_VideoAttributes VideoAttributes;")
cpp_quote("    WINBOOL fAudioPresent;")
cpp_quote("    DVD_AudioAttributes AudioAttributes;")
cpp_quote("    WINBOOL fSubpicturePresent;")
cpp_quote("    DVD_SubpictureAttributes SubpictureAttributes;")
cpp_quote("  } DVD_MenuAttributes;")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0376_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0376_v0_0_s_ifspec;")
cpp_quote("#ifndef __IDvdControl_INTERFACE_DEFINED__")
cpp_quote("#define __IDvdControl_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IDvdControl;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IDvdControl : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI TitlePlay(ULONG ulTitle) = 0;")
cpp_quote("    virtual HRESULT WINAPI ChapterPlay(ULONG ulTitle,ULONG ulChapter) = 0;")
cpp_quote("    virtual HRESULT WINAPI TimePlay(ULONG ulTitle,ULONG bcdTime) = 0;")
cpp_quote("    virtual HRESULT WINAPI StopForResume(void) = 0;")
cpp_quote("    virtual HRESULT WINAPI GoUp(void) = 0;")
cpp_quote("    virtual HRESULT WINAPI TimeSearch(ULONG bcdTime) = 0;")
cpp_quote("    virtual HRESULT WINAPI ChapterSearch(ULONG ulChapter) = 0;")
cpp_quote("    virtual HRESULT WINAPI PrevPGSearch(void) = 0;")
cpp_quote("    virtual HRESULT WINAPI TopPGSearch(void) = 0;")
cpp_quote("    virtual HRESULT WINAPI NextPGSearch(void) = 0;")
cpp_quote("    virtual HRESULT WINAPI ForwardScan(double dwSpeed) = 0;")
cpp_quote("    virtual HRESULT WINAPI BackwardScan(double dwSpeed) = 0;")
cpp_quote("    virtual HRESULT WINAPI MenuCall(DVD_MENU_ID MenuID) = 0;")
cpp_quote("    virtual HRESULT WINAPI Resume(void) = 0;")
cpp_quote("    virtual HRESULT WINAPI UpperButtonSelect(void) = 0;")
cpp_quote("    virtual HRESULT WINAPI LowerButtonSelect(void) = 0;")
cpp_quote("    virtual HRESULT WINAPI LeftButtonSelect(void) = 0;")
cpp_quote("    virtual HRESULT WINAPI RightButtonSelect(void) = 0;")
cpp_quote("    virtual HRESULT WINAPI ButtonActivate(void) = 0;")
cpp_quote("    virtual HRESULT WINAPI ButtonSelectAndActivate(ULONG ulButton) = 0;")
cpp_quote("    virtual HRESULT WINAPI StillOff(void) = 0;")
cpp_quote("    virtual HRESULT WINAPI PauseOn(void) = 0;")
cpp_quote("    virtual HRESULT WINAPI PauseOff(void) = 0;")
cpp_quote("    virtual HRESULT WINAPI MenuLanguageSelect(LCID Language) = 0;")
cpp_quote("    virtual HRESULT WINAPI AudioStreamChange(ULONG ulAudio) = 0;")
cpp_quote("    virtual HRESULT WINAPI SubpictureStreamChange(ULONG ulSubPicture,WINBOOL bDisplay) = 0;")
cpp_quote("    virtual HRESULT WINAPI AngleChange(ULONG ulAngle) = 0;")
cpp_quote("    virtual HRESULT WINAPI ParentalLevelSelect(ULONG ulParentalLevel) = 0;")
cpp_quote("    virtual HRESULT WINAPI ParentalCountrySelect(WORD wCountry) = 0;")
cpp_quote("    virtual HRESULT WINAPI KaraokeAudioPresentationModeChange(ULONG ulMode) = 0;")
cpp_quote("    virtual HRESULT WINAPI VideoModePreferrence(ULONG ulPreferredDisplayMode) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetRoot(LPCWSTR pszPath) = 0;")
cpp_quote("    virtual HRESULT WINAPI MouseActivate(POINT point) = 0;")
cpp_quote("    virtual HRESULT WINAPI MouseSelect(POINT point) = 0;")
cpp_quote("    virtual HRESULT WINAPI ChapterPlayAutoStop(ULONG ulTitle,ULONG ulChapter,ULONG ulChaptersToPlay) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IDvdControlVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IDvdControl *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IDvdControl *This);")
cpp_quote("      ULONG (WINAPI *Release)(IDvdControl *This);")
cpp_quote("      HRESULT (WINAPI *TitlePlay)(IDvdControl *This,ULONG ulTitle);")
cpp_quote("      HRESULT (WINAPI *ChapterPlay)(IDvdControl *This,ULONG ulTitle,ULONG ulChapter);")
cpp_quote("      HRESULT (WINAPI *TimePlay)(IDvdControl *This,ULONG ulTitle,ULONG bcdTime);")
cpp_quote("      HRESULT (WINAPI *StopForResume)(IDvdControl *This);")
cpp_quote("      HRESULT (WINAPI *GoUp)(IDvdControl *This);")
cpp_quote("      HRESULT (WINAPI *TimeSearch)(IDvdControl *This,ULONG bcdTime);")
cpp_quote("      HRESULT (WINAPI *ChapterSearch)(IDvdControl *This,ULONG ulChapter);")
cpp_quote("      HRESULT (WINAPI *PrevPGSearch)(IDvdControl *This);")
cpp_quote("      HRESULT (WINAPI *TopPGSearch)(IDvdControl *This);")
cpp_quote("      HRESULT (WINAPI *NextPGSearch)(IDvdControl *This);")
cpp_quote("      HRESULT (WINAPI *ForwardScan)(IDvdControl *This,double dwSpeed);")
cpp_quote("      HRESULT (WINAPI *BackwardScan)(IDvdControl *This,double dwSpeed);")
cpp_quote("      HRESULT (WINAPI *MenuCall)(IDvdControl *This,DVD_MENU_ID MenuID);")
cpp_quote("      HRESULT (WINAPI *Resume)(IDvdControl *This);")
cpp_quote("      HRESULT (WINAPI *UpperButtonSelect)(IDvdControl *This);")
cpp_quote("      HRESULT (WINAPI *LowerButtonSelect)(IDvdControl *This);")
cpp_quote("      HRESULT (WINAPI *LeftButtonSelect)(IDvdControl *This);")
cpp_quote("      HRESULT (WINAPI *RightButtonSelect)(IDvdControl *This);")
cpp_quote("      HRESULT (WINAPI *ButtonActivate)(IDvdControl *This);")
cpp_quote("      HRESULT (WINAPI *ButtonSelectAndActivate)(IDvdControl *This,ULONG ulButton);")
cpp_quote("      HRESULT (WINAPI *StillOff)(IDvdControl *This);")
cpp_quote("      HRESULT (WINAPI *PauseOn)(IDvdControl *This);")
cpp_quote("      HRESULT (WINAPI *PauseOff)(IDvdControl *This);")
cpp_quote("      HRESULT (WINAPI *MenuLanguageSelect)(IDvdControl *This,LCID Language);")
cpp_quote("      HRESULT (WINAPI *AudioStreamChange)(IDvdControl *This,ULONG ulAudio);")
cpp_quote("      HRESULT (WINAPI *SubpictureStreamChange)(IDvdControl *This,ULONG ulSubPicture,WINBOOL bDisplay);")
cpp_quote("      HRESULT (WINAPI *AngleChange)(IDvdControl *This,ULONG ulAngle);")
cpp_quote("      HRESULT (WINAPI *ParentalLevelSelect)(IDvdControl *This,ULONG ulParentalLevel);")
cpp_quote("      HRESULT (WINAPI *ParentalCountrySelect)(IDvdControl *This,WORD wCountry);")
cpp_quote("      HRESULT (WINAPI *KaraokeAudioPresentationModeChange)(IDvdControl *This,ULONG ulMode);")
cpp_quote("      HRESULT (WINAPI *VideoModePreferrence)(IDvdControl *This,ULONG ulPreferredDisplayMode);")
cpp_quote("      HRESULT (WINAPI *SetRoot)(IDvdControl *This,LPCWSTR pszPath);")
cpp_quote("      HRESULT (WINAPI *MouseActivate)(IDvdControl *This,POINT point);")
cpp_quote("      HRESULT (WINAPI *MouseSelect)(IDvdControl *This,POINT point);")
cpp_quote("      HRESULT (WINAPI *ChapterPlayAutoStop)(IDvdControl *This,ULONG ulTitle,ULONG ulChapter,ULONG ulChaptersToPlay);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IDvdControlVtbl;")
cpp_quote("  struct IDvdControl {")
cpp_quote("    CONST_VTBL struct IDvdControlVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IDvdControl_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IDvdControl_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IDvdControl_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IDvdControl_TitlePlay(This,ulTitle) (This)->lpVtbl->TitlePlay(This,ulTitle)")
cpp_quote("#define IDvdControl_ChapterPlay(This,ulTitle,ulChapter) (This)->lpVtbl->ChapterPlay(This,ulTitle,ulChapter)")
cpp_quote("#define IDvdControl_TimePlay(This,ulTitle,bcdTime) (This)->lpVtbl->TimePlay(This,ulTitle,bcdTime)")
cpp_quote("#define IDvdControl_StopForResume(This) (This)->lpVtbl->StopForResume(This)")
cpp_quote("#define IDvdControl_GoUp(This) (This)->lpVtbl->GoUp(This)")
cpp_quote("#define IDvdControl_TimeSearch(This,bcdTime) (This)->lpVtbl->TimeSearch(This,bcdTime)")
cpp_quote("#define IDvdControl_ChapterSearch(This,ulChapter) (This)->lpVtbl->ChapterSearch(This,ulChapter)")
cpp_quote("#define IDvdControl_PrevPGSearch(This) (This)->lpVtbl->PrevPGSearch(This)")
cpp_quote("#define IDvdControl_TopPGSearch(This) (This)->lpVtbl->TopPGSearch(This)")
cpp_quote("#define IDvdControl_NextPGSearch(This) (This)->lpVtbl->NextPGSearch(This)")
cpp_quote("#define IDvdControl_ForwardScan(This,dwSpeed) (This)->lpVtbl->ForwardScan(This,dwSpeed)")
cpp_quote("#define IDvdControl_BackwardScan(This,dwSpeed) (This)->lpVtbl->BackwardScan(This,dwSpeed)")
cpp_quote("#define IDvdControl_MenuCall(This,MenuID) (This)->lpVtbl->MenuCall(This,MenuID)")
cpp_quote("#define IDvdControl_Resume(This) (This)->lpVtbl->Resume(This)")
cpp_quote("#define IDvdControl_UpperButtonSelect(This) (This)->lpVtbl->UpperButtonSelect(This)")
cpp_quote("#define IDvdControl_LowerButtonSelect(This) (This)->lpVtbl->LowerButtonSelect(This)")
cpp_quote("#define IDvdControl_LeftButtonSelect(This) (This)->lpVtbl->LeftButtonSelect(This)")
cpp_quote("#define IDvdControl_RightButtonSelect(This) (This)->lpVtbl->RightButtonSelect(This)")
cpp_quote("#define IDvdControl_ButtonActivate(This) (This)->lpVtbl->ButtonActivate(This)")
cpp_quote("#define IDvdControl_ButtonSelectAndActivate(This,ulButton) (This)->lpVtbl->ButtonSelectAndActivate(This,ulButton)")
cpp_quote("#define IDvdControl_StillOff(This) (This)->lpVtbl->StillOff(This)")
cpp_quote("#define IDvdControl_PauseOn(This) (This)->lpVtbl->PauseOn(This)")
cpp_quote("#define IDvdControl_PauseOff(This) (This)->lpVtbl->PauseOff(This)")
cpp_quote("#define IDvdControl_MenuLanguageSelect(This,Language) (This)->lpVtbl->MenuLanguageSelect(This,Language)")
cpp_quote("#define IDvdControl_AudioStreamChange(This,ulAudio) (This)->lpVtbl->AudioStreamChange(This,ulAudio)")
cpp_quote("#define IDvdControl_SubpictureStreamChange(This,ulSubPicture,bDisplay) (This)->lpVtbl->SubpictureStreamChange(This,ulSubPicture,bDisplay)")
cpp_quote("#define IDvdControl_AngleChange(This,ulAngle) (This)->lpVtbl->AngleChange(This,ulAngle)")
cpp_quote("#define IDvdControl_ParentalLevelSelect(This,ulParentalLevel) (This)->lpVtbl->ParentalLevelSelect(This,ulParentalLevel)")
cpp_quote("#define IDvdControl_ParentalCountrySelect(This,wCountry) (This)->lpVtbl->ParentalCountrySelect(This,wCountry)")
cpp_quote("#define IDvdControl_KaraokeAudioPresentationModeChange(This,ulMode) (This)->lpVtbl->KaraokeAudioPresentationModeChange(This,ulMode)")
cpp_quote("#define IDvdControl_VideoModePreferrence(This,ulPreferredDisplayMode) (This)->lpVtbl->VideoModePreferrence(This,ulPreferredDisplayMode)")
cpp_quote("#define IDvdControl_SetRoot(This,pszPath) (This)->lpVtbl->SetRoot(This,pszPath)")
cpp_quote("#define IDvdControl_MouseActivate(This,point) (This)->lpVtbl->MouseActivate(This,point)")
cpp_quote("#define IDvdControl_MouseSelect(This,point) (This)->lpVtbl->MouseSelect(This,point)")
cpp_quote("#define IDvdControl_ChapterPlayAutoStop(This,ulTitle,ulChapter,ulChaptersToPlay) (This)->lpVtbl->ChapterPlayAutoStop(This,ulTitle,ulChapter,ulChaptersToPlay)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IDvdControl_TitlePlay_Proxy(IDvdControl *This,ULONG ulTitle);")
cpp_quote("  void __RPC_STUB IDvdControl_TitlePlay_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl_ChapterPlay_Proxy(IDvdControl *This,ULONG ulTitle,ULONG ulChapter);")
cpp_quote("  void __RPC_STUB IDvdControl_ChapterPlay_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl_TimePlay_Proxy(IDvdControl *This,ULONG ulTitle,ULONG bcdTime);")
cpp_quote("  void __RPC_STUB IDvdControl_TimePlay_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl_StopForResume_Proxy(IDvdControl *This);")
cpp_quote("  void __RPC_STUB IDvdControl_StopForResume_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl_GoUp_Proxy(IDvdControl *This);")
cpp_quote("  void __RPC_STUB IDvdControl_GoUp_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl_TimeSearch_Proxy(IDvdControl *This,ULONG bcdTime);")
cpp_quote("  void __RPC_STUB IDvdControl_TimeSearch_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl_ChapterSearch_Proxy(IDvdControl *This,ULONG ulChapter);")
cpp_quote("  void __RPC_STUB IDvdControl_ChapterSearch_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl_PrevPGSearch_Proxy(IDvdControl *This);")
cpp_quote("  void __RPC_STUB IDvdControl_PrevPGSearch_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl_TopPGSearch_Proxy(IDvdControl *This);")
cpp_quote("  void __RPC_STUB IDvdControl_TopPGSearch_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl_NextPGSearch_Proxy(IDvdControl *This);")
cpp_quote("  void __RPC_STUB IDvdControl_NextPGSearch_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl_ForwardScan_Proxy(IDvdControl *This,double dwSpeed);")
cpp_quote("  void __RPC_STUB IDvdControl_ForwardScan_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl_BackwardScan_Proxy(IDvdControl *This,double dwSpeed);")
cpp_quote("  void __RPC_STUB IDvdControl_BackwardScan_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl_MenuCall_Proxy(IDvdControl *This,DVD_MENU_ID MenuID);")
cpp_quote("  void __RPC_STUB IDvdControl_MenuCall_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl_Resume_Proxy(IDvdControl *This);")
cpp_quote("  void __RPC_STUB IDvdControl_Resume_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl_UpperButtonSelect_Proxy(IDvdControl *This);")
cpp_quote("  void __RPC_STUB IDvdControl_UpperButtonSelect_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl_LowerButtonSelect_Proxy(IDvdControl *This);")
cpp_quote("  void __RPC_STUB IDvdControl_LowerButtonSelect_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl_LeftButtonSelect_Proxy(IDvdControl *This);")
cpp_quote("  void __RPC_STUB IDvdControl_LeftButtonSelect_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl_RightButtonSelect_Proxy(IDvdControl *This);")
cpp_quote("  void __RPC_STUB IDvdControl_RightButtonSelect_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl_ButtonActivate_Proxy(IDvdControl *This);")
cpp_quote("  void __RPC_STUB IDvdControl_ButtonActivate_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl_ButtonSelectAndActivate_Proxy(IDvdControl *This,ULONG ulButton);")
cpp_quote("  void __RPC_STUB IDvdControl_ButtonSelectAndActivate_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl_StillOff_Proxy(IDvdControl *This);")
cpp_quote("  void __RPC_STUB IDvdControl_StillOff_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl_PauseOn_Proxy(IDvdControl *This);")
cpp_quote("  void __RPC_STUB IDvdControl_PauseOn_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl_PauseOff_Proxy(IDvdControl *This);")
cpp_quote("  void __RPC_STUB IDvdControl_PauseOff_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl_MenuLanguageSelect_Proxy(IDvdControl *This,LCID Language);")
cpp_quote("  void __RPC_STUB IDvdControl_MenuLanguageSelect_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl_AudioStreamChange_Proxy(IDvdControl *This,ULONG ulAudio);")
cpp_quote("  void __RPC_STUB IDvdControl_AudioStreamChange_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl_SubpictureStreamChange_Proxy(IDvdControl *This,ULONG ulSubPicture,WINBOOL bDisplay);")
cpp_quote("  void __RPC_STUB IDvdControl_SubpictureStreamChange_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl_AngleChange_Proxy(IDvdControl *This,ULONG ulAngle);")
cpp_quote("  void __RPC_STUB IDvdControl_AngleChange_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl_ParentalLevelSelect_Proxy(IDvdControl *This,ULONG ulParentalLevel);")
cpp_quote("  void __RPC_STUB IDvdControl_ParentalLevelSelect_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl_ParentalCountrySelect_Proxy(IDvdControl *This,WORD wCountry);")
cpp_quote("  void __RPC_STUB IDvdControl_ParentalCountrySelect_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl_KaraokeAudioPresentationModeChange_Proxy(IDvdControl *This,ULONG ulMode);")
cpp_quote("  void __RPC_STUB IDvdControl_KaraokeAudioPresentationModeChange_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl_VideoModePreferrence_Proxy(IDvdControl *This,ULONG ulPreferredDisplayMode);")
cpp_quote("  void __RPC_STUB IDvdControl_VideoModePreferrence_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl_SetRoot_Proxy(IDvdControl *This,LPCWSTR pszPath);")
cpp_quote("  void __RPC_STUB IDvdControl_SetRoot_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl_MouseActivate_Proxy(IDvdControl *This,POINT point);")
cpp_quote("  void __RPC_STUB IDvdControl_MouseActivate_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl_MouseSelect_Proxy(IDvdControl *This,POINT point);")
cpp_quote("  void __RPC_STUB IDvdControl_MouseSelect_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl_ChapterPlayAutoStop_Proxy(IDvdControl *This,ULONG ulTitle,ULONG ulChapter,ULONG ulChaptersToPlay);")
cpp_quote("  void __RPC_STUB IDvdControl_ChapterPlayAutoStop_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IDvdInfo_INTERFACE_DEFINED__")
cpp_quote("#define __IDvdInfo_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IDvdInfo;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IDvdInfo : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI GetCurrentDomain(DVD_DOMAIN *pDomain) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetCurrentLocation(DVD_PLAYBACK_LOCATION *pLocation) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetTotalTitleTime(ULONG *pulTotalTime) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetCurrentButton(ULONG *pulButtonsAvailable,ULONG *pulCurrentButton) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetCurrentAngle(ULONG *pulAnglesAvailable,ULONG *pulCurrentAngle) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetCurrentAudio(ULONG *pulStreamsAvailable,ULONG *pulCurrentStream) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetCurrentSubpicture(ULONG *pulStreamsAvailable,ULONG *pulCurrentStream,WINBOOL *pIsDisabled) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetCurrentUOPS(VALID_UOP_SOMTHING_OR_OTHER *pUOP) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetAllSPRMs(SPRMARRAY *pRegisterArray) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetAllGPRMs(GPRMARRAY *pRegisterArray) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetAudioLanguage(ULONG ulStream,LCID *pLanguage) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetSubpictureLanguage(ULONG ulStream,LCID *pLanguage) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetTitleAttributes(ULONG ulTitle,DVD_ATR *pATR) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetVMGAttributes(DVD_ATR *pATR) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetCurrentVideoAttributes(DVD_VideoATR *pATR) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetCurrentAudioAttributes(DVD_AudioATR *pATR) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetCurrentSubpictureAttributes(DVD_SubpictureATR *pATR) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetCurrentVolumeInfo(ULONG *pulNumOfVol,ULONG *pulThisVolNum,DVD_DISC_SIDE *pSide,ULONG *pulNumOfTitles) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetDVDTextInfo(BYTE *pTextManager,ULONG ulBufSize,ULONG *pulActualSize) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetPlayerParentalLevel(ULONG *pulParentalLevel,ULONG *pulCountryCode) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetNumberOfChapters(ULONG ulTitle,ULONG *pulNumberOfChapters) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetTitleParentalLevels(ULONG ulTitle,ULONG *pulParentalLevels) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetRoot(LPSTR pRoot,ULONG ulBufSize,ULONG *pulActualSize) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IDvdInfoVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IDvdInfo *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IDvdInfo *This);")
cpp_quote("      ULONG (WINAPI *Release)(IDvdInfo *This);")
cpp_quote("      HRESULT (WINAPI *GetCurrentDomain)(IDvdInfo *This,DVD_DOMAIN *pDomain);")
cpp_quote("      HRESULT (WINAPI *GetCurrentLocation)(IDvdInfo *This,DVD_PLAYBACK_LOCATION *pLocation);")
cpp_quote("      HRESULT (WINAPI *GetTotalTitleTime)(IDvdInfo *This,ULONG *pulTotalTime);")
cpp_quote("      HRESULT (WINAPI *GetCurrentButton)(IDvdInfo *This,ULONG *pulButtonsAvailable,ULONG *pulCurrentButton);")
cpp_quote("      HRESULT (WINAPI *GetCurrentAngle)(IDvdInfo *This,ULONG *pulAnglesAvailable,ULONG *pulCurrentAngle);")
cpp_quote("      HRESULT (WINAPI *GetCurrentAudio)(IDvdInfo *This,ULONG *pulStreamsAvailable,ULONG *pulCurrentStream);")
cpp_quote("      HRESULT (WINAPI *GetCurrentSubpicture)(IDvdInfo *This,ULONG *pulStreamsAvailable,ULONG *pulCurrentStream,WINBOOL *pIsDisabled);")
cpp_quote("      HRESULT (WINAPI *GetCurrentUOPS)(IDvdInfo *This,VALID_UOP_SOMTHING_OR_OTHER *pUOP);")
cpp_quote("      HRESULT (WINAPI *GetAllSPRMs)(IDvdInfo *This,SPRMARRAY *pRegisterArray);")
cpp_quote("      HRESULT (WINAPI *GetAllGPRMs)(IDvdInfo *This,GPRMARRAY *pRegisterArray);")
cpp_quote("      HRESULT (WINAPI *GetAudioLanguage)(IDvdInfo *This,ULONG ulStream,LCID *pLanguage);")
cpp_quote("      HRESULT (WINAPI *GetSubpictureLanguage)(IDvdInfo *This,ULONG ulStream,LCID *pLanguage);")
cpp_quote("      HRESULT (WINAPI *GetTitleAttributes)(IDvdInfo *This,ULONG ulTitle,DVD_ATR *pATR);")
cpp_quote("      HRESULT (WINAPI *GetVMGAttributes)(IDvdInfo *This,DVD_ATR *pATR);")
cpp_quote("      HRESULT (WINAPI *GetCurrentVideoAttributes)(IDvdInfo *This,DVD_VideoATR *pATR);")
cpp_quote("      HRESULT (WINAPI *GetCurrentAudioAttributes)(IDvdInfo *This,DVD_AudioATR *pATR);")
cpp_quote("      HRESULT (WINAPI *GetCurrentSubpictureAttributes)(IDvdInfo *This,DVD_SubpictureATR *pATR);")
cpp_quote("      HRESULT (WINAPI *GetCurrentVolumeInfo)(IDvdInfo *This,ULONG *pulNumOfVol,ULONG *pulThisVolNum,DVD_DISC_SIDE *pSide,ULONG *pulNumOfTitles);")
cpp_quote("      HRESULT (WINAPI *GetDVDTextInfo)(IDvdInfo *This,BYTE *pTextManager,ULONG ulBufSize,ULONG *pulActualSize);")
cpp_quote("      HRESULT (WINAPI *GetPlayerParentalLevel)(IDvdInfo *This,ULONG *pulParentalLevel,ULONG *pulCountryCode);")
cpp_quote("      HRESULT (WINAPI *GetNumberOfChapters)(IDvdInfo *This,ULONG ulTitle,ULONG *pulNumberOfChapters);")
cpp_quote("      HRESULT (WINAPI *GetTitleParentalLevels)(IDvdInfo *This,ULONG ulTitle,ULONG *pulParentalLevels);")
cpp_quote("      HRESULT (WINAPI *GetRoot)(IDvdInfo *This,LPSTR pRoot,ULONG ulBufSize,ULONG *pulActualSize);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IDvdInfoVtbl;")
cpp_quote("  struct IDvdInfo {")
cpp_quote("    CONST_VTBL struct IDvdInfoVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IDvdInfo_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IDvdInfo_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IDvdInfo_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IDvdInfo_GetCurrentDomain(This,pDomain) (This)->lpVtbl->GetCurrentDomain(This,pDomain)")
cpp_quote("#define IDvdInfo_GetCurrentLocation(This,pLocation) (This)->lpVtbl->GetCurrentLocation(This,pLocation)")
cpp_quote("#define IDvdInfo_GetTotalTitleTime(This,pulTotalTime) (This)->lpVtbl->GetTotalTitleTime(This,pulTotalTime)")
cpp_quote("#define IDvdInfo_GetCurrentButton(This,pulButtonsAvailable,pulCurrentButton) (This)->lpVtbl->GetCurrentButton(This,pulButtonsAvailable,pulCurrentButton)")
cpp_quote("#define IDvdInfo_GetCurrentAngle(This,pulAnglesAvailable,pulCurrentAngle) (This)->lpVtbl->GetCurrentAngle(This,pulAnglesAvailable,pulCurrentAngle)")
cpp_quote("#define IDvdInfo_GetCurrentAudio(This,pulStreamsAvailable,pulCurrentStream) (This)->lpVtbl->GetCurrentAudio(This,pulStreamsAvailable,pulCurrentStream)")
cpp_quote("#define IDvdInfo_GetCurrentSubpicture(This,pulStreamsAvailable,pulCurrentStream,pIsDisabled) (This)->lpVtbl->GetCurrentSubpicture(This,pulStreamsAvailable,pulCurrentStream,pIsDisabled)")
cpp_quote("#define IDvdInfo_GetCurrentUOPS(This,pUOP) (This)->lpVtbl->GetCurrentUOPS(This,pUOP)")
cpp_quote("#define IDvdInfo_GetAllSPRMs(This,pRegisterArray) (This)->lpVtbl->GetAllSPRMs(This,pRegisterArray)")
cpp_quote("#define IDvdInfo_GetAllGPRMs(This,pRegisterArray) (This)->lpVtbl->GetAllGPRMs(This,pRegisterArray)")
cpp_quote("#define IDvdInfo_GetAudioLanguage(This,ulStream,pLanguage) (This)->lpVtbl->GetAudioLanguage(This,ulStream,pLanguage)")
cpp_quote("#define IDvdInfo_GetSubpictureLanguage(This,ulStream,pLanguage) (This)->lpVtbl->GetSubpictureLanguage(This,ulStream,pLanguage)")
cpp_quote("#define IDvdInfo_GetTitleAttributes(This,ulTitle,pATR) (This)->lpVtbl->GetTitleAttributes(This,ulTitle,pATR)")
cpp_quote("#define IDvdInfo_GetVMGAttributes(This,pATR) (This)->lpVtbl->GetVMGAttributes(This,pATR)")
cpp_quote("#define IDvdInfo_GetCurrentVideoAttributes(This,pATR) (This)->lpVtbl->GetCurrentVideoAttributes(This,pATR)")
cpp_quote("#define IDvdInfo_GetCurrentAudioAttributes(This,pATR) (This)->lpVtbl->GetCurrentAudioAttributes(This,pATR)")
cpp_quote("#define IDvdInfo_GetCurrentSubpictureAttributes(This,pATR) (This)->lpVtbl->GetCurrentSubpictureAttributes(This,pATR)")
cpp_quote("#define IDvdInfo_GetCurrentVolumeInfo(This,pulNumOfVol,pulThisVolNum,pSide,pulNumOfTitles) (This)->lpVtbl->GetCurrentVolumeInfo(This,pulNumOfVol,pulThisVolNum,pSide,pulNumOfTitles)")
cpp_quote("#define IDvdInfo_GetDVDTextInfo(This,pTextManager,ulBufSize,pulActualSize) (This)->lpVtbl->GetDVDTextInfo(This,pTextManager,ulBufSize,pulActualSize)")
cpp_quote("#define IDvdInfo_GetPlayerParentalLevel(This,pulParentalLevel,pulCountryCode) (This)->lpVtbl->GetPlayerParentalLevel(This,pulParentalLevel,pulCountryCode)")
cpp_quote("#define IDvdInfo_GetNumberOfChapters(This,ulTitle,pulNumberOfChapters) (This)->lpVtbl->GetNumberOfChapters(This,ulTitle,pulNumberOfChapters)")
cpp_quote("#define IDvdInfo_GetTitleParentalLevels(This,ulTitle,pulParentalLevels) (This)->lpVtbl->GetTitleParentalLevels(This,ulTitle,pulParentalLevels)")
cpp_quote("#define IDvdInfo_GetRoot(This,pRoot,ulBufSize,pulActualSize) (This)->lpVtbl->GetRoot(This,pRoot,ulBufSize,pulActualSize)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IDvdInfo_GetCurrentDomain_Proxy(IDvdInfo *This,DVD_DOMAIN *pDomain);")
cpp_quote("  void __RPC_STUB IDvdInfo_GetCurrentDomain_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo_GetCurrentLocation_Proxy(IDvdInfo *This,DVD_PLAYBACK_LOCATION *pLocation);")
cpp_quote("  void __RPC_STUB IDvdInfo_GetCurrentLocation_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo_GetTotalTitleTime_Proxy(IDvdInfo *This,ULONG *pulTotalTime);")
cpp_quote("  void __RPC_STUB IDvdInfo_GetTotalTitleTime_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo_GetCurrentButton_Proxy(IDvdInfo *This,ULONG *pulButtonsAvailable,ULONG *pulCurrentButton);")
cpp_quote("  void __RPC_STUB IDvdInfo_GetCurrentButton_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo_GetCurrentAngle_Proxy(IDvdInfo *This,ULONG *pulAnglesAvailable,ULONG *pulCurrentAngle);")
cpp_quote("  void __RPC_STUB IDvdInfo_GetCurrentAngle_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo_GetCurrentAudio_Proxy(IDvdInfo *This,ULONG *pulStreamsAvailable,ULONG *pulCurrentStream);")
cpp_quote("  void __RPC_STUB IDvdInfo_GetCurrentAudio_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo_GetCurrentSubpicture_Proxy(IDvdInfo *This,ULONG *pulStreamsAvailable,ULONG *pulCurrentStream,WINBOOL *pIsDisabled);")
cpp_quote("  void __RPC_STUB IDvdInfo_GetCurrentSubpicture_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo_GetCurrentUOPS_Proxy(IDvdInfo *This,VALID_UOP_SOMTHING_OR_OTHER *pUOP);")
cpp_quote("  void __RPC_STUB IDvdInfo_GetCurrentUOPS_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo_GetAllSPRMs_Proxy(IDvdInfo *This,SPRMARRAY *pRegisterArray);")
cpp_quote("  void __RPC_STUB IDvdInfo_GetAllSPRMs_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo_GetAllGPRMs_Proxy(IDvdInfo *This,GPRMARRAY *pRegisterArray);")
cpp_quote("  void __RPC_STUB IDvdInfo_GetAllGPRMs_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo_GetAudioLanguage_Proxy(IDvdInfo *This,ULONG ulStream,LCID *pLanguage);")
cpp_quote("  void __RPC_STUB IDvdInfo_GetAudioLanguage_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo_GetSubpictureLanguage_Proxy(IDvdInfo *This,ULONG ulStream,LCID *pLanguage);")
cpp_quote("  void __RPC_STUB IDvdInfo_GetSubpictureLanguage_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo_GetTitleAttributes_Proxy(IDvdInfo *This,ULONG ulTitle,DVD_ATR *pATR);")
cpp_quote("  void __RPC_STUB IDvdInfo_GetTitleAttributes_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo_GetVMGAttributes_Proxy(IDvdInfo *This,DVD_ATR *pATR);")
cpp_quote("  void __RPC_STUB IDvdInfo_GetVMGAttributes_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo_GetCurrentVideoAttributes_Proxy(IDvdInfo *This,DVD_VideoATR *pATR);")
cpp_quote("  void __RPC_STUB IDvdInfo_GetCurrentVideoAttributes_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo_GetCurrentAudioAttributes_Proxy(IDvdInfo *This,DVD_AudioATR *pATR);")
cpp_quote("  void __RPC_STUB IDvdInfo_GetCurrentAudioAttributes_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo_GetCurrentSubpictureAttributes_Proxy(IDvdInfo *This,DVD_SubpictureATR *pATR);")
cpp_quote("  void __RPC_STUB IDvdInfo_GetCurrentSubpictureAttributes_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo_GetCurrentVolumeInfo_Proxy(IDvdInfo *This,ULONG *pulNumOfVol,ULONG *pulThisVolNum,DVD_DISC_SIDE *pSide,ULONG *pulNumOfTitles);")
cpp_quote("  void __RPC_STUB IDvdInfo_GetCurrentVolumeInfo_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo_GetDVDTextInfo_Proxy(IDvdInfo *This,BYTE *pTextManager,ULONG ulBufSize,ULONG *pulActualSize);")
cpp_quote("  void __RPC_STUB IDvdInfo_GetDVDTextInfo_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo_GetPlayerParentalLevel_Proxy(IDvdInfo *This,ULONG *pulParentalLevel,ULONG *pulCountryCode);")
cpp_quote("  void __RPC_STUB IDvdInfo_GetPlayerParentalLevel_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo_GetNumberOfChapters_Proxy(IDvdInfo *This,ULONG ulTitle,ULONG *pulNumberOfChapters);")
cpp_quote("  void __RPC_STUB IDvdInfo_GetNumberOfChapters_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo_GetTitleParentalLevels_Proxy(IDvdInfo *This,ULONG ulTitle,ULONG *pulParentalLevels);")
cpp_quote("  void __RPC_STUB IDvdInfo_GetTitleParentalLevels_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo_GetRoot_Proxy(IDvdInfo *This,LPSTR pRoot,ULONG ulBufSize,ULONG *pulActualSize);")
cpp_quote("  void __RPC_STUB IDvdInfo_GetRoot_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IDvdCmd_INTERFACE_DEFINED__")
cpp_quote("#define __IDvdCmd_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IDvdCmd;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IDvdCmd : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI WaitForStart(void) = 0;")
cpp_quote("    virtual HRESULT WINAPI WaitForEnd(void) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IDvdCmdVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IDvdCmd *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IDvdCmd *This);")
cpp_quote("      ULONG (WINAPI *Release)(IDvdCmd *This);")
cpp_quote("      HRESULT (WINAPI *WaitForStart)(IDvdCmd *This);")
cpp_quote("      HRESULT (WINAPI *WaitForEnd)(IDvdCmd *This);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IDvdCmdVtbl;")
cpp_quote("  struct IDvdCmd {")
cpp_quote("    CONST_VTBL struct IDvdCmdVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IDvdCmd_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IDvdCmd_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IDvdCmd_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IDvdCmd_WaitForStart(This) (This)->lpVtbl->WaitForStart(This)")
cpp_quote("#define IDvdCmd_WaitForEnd(This) (This)->lpVtbl->WaitForEnd(This)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IDvdCmd_WaitForStart_Proxy(IDvdCmd *This);")
cpp_quote("  void __RPC_STUB IDvdCmd_WaitForStart_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdCmd_WaitForEnd_Proxy(IDvdCmd *This);")
cpp_quote("  void __RPC_STUB IDvdCmd_WaitForEnd_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IDvdState_INTERFACE_DEFINED__")
cpp_quote("#define __IDvdState_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IDvdState;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IDvdState : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI GetDiscID(ULONGLONG *pullUniqueID) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetParentalLevel(ULONG *pulParentalLevel) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IDvdStateVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IDvdState *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IDvdState *This);")
cpp_quote("      ULONG (WINAPI *Release)(IDvdState *This);")
cpp_quote("      HRESULT (WINAPI *GetDiscID)(IDvdState *This,ULONGLONG *pullUniqueID);")
cpp_quote("      HRESULT (WINAPI *GetParentalLevel)(IDvdState *This,ULONG *pulParentalLevel);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IDvdStateVtbl;")
cpp_quote("  struct IDvdState {")
cpp_quote("    CONST_VTBL struct IDvdStateVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IDvdState_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IDvdState_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IDvdState_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IDvdState_GetDiscID(This,pullUniqueID) (This)->lpVtbl->GetDiscID(This,pullUniqueID)")
cpp_quote("#define IDvdState_GetParentalLevel(This,pulParentalLevel) (This)->lpVtbl->GetParentalLevel(This,pulParentalLevel)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IDvdState_GetDiscID_Proxy(IDvdState *This,ULONGLONG *pullUniqueID);")
cpp_quote("  void __RPC_STUB IDvdState_GetDiscID_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdState_GetParentalLevel_Proxy(IDvdState *This,ULONG *pulParentalLevel);")
cpp_quote("  void __RPC_STUB IDvdState_GetParentalLevel_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IDvdControl2_INTERFACE_DEFINED__")
cpp_quote("#define __IDvdControl2_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IDvdControl2;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IDvdControl2 : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI PlayTitle(ULONG ulTitle,DWORD dwFlags,IDvdCmd **ppCmd) = 0;")
cpp_quote("    virtual HRESULT WINAPI PlayChapterInTitle(ULONG ulTitle,ULONG ulChapter,DWORD dwFlags,IDvdCmd **ppCmd) = 0;")
cpp_quote("    virtual HRESULT WINAPI PlayAtTimeInTitle(ULONG ulTitle,DVD_HMSF_TIMECODE *pStartTime,DWORD dwFlags,IDvdCmd **ppCmd) = 0;")
cpp_quote("    virtual HRESULT WINAPI Stop(void) = 0;")
cpp_quote("    virtual HRESULT WINAPI ReturnFromSubmenu(DWORD dwFlags,IDvdCmd **ppCmd) = 0;")
cpp_quote("    virtual HRESULT WINAPI PlayAtTime(DVD_HMSF_TIMECODE *pTime,DWORD dwFlags,IDvdCmd **ppCmd) = 0;")
cpp_quote("    virtual HRESULT WINAPI PlayChapter(ULONG ulChapter,DWORD dwFlags,IDvdCmd **ppCmd) = 0;")
cpp_quote("    virtual HRESULT WINAPI PlayPrevChapter(DWORD dwFlags,IDvdCmd **ppCmd) = 0;")
cpp_quote("    virtual HRESULT WINAPI ReplayChapter(DWORD dwFlags,IDvdCmd **ppCmd) = 0;")
cpp_quote("    virtual HRESULT WINAPI PlayNextChapter(DWORD dwFlags,IDvdCmd **ppCmd) = 0;")
cpp_quote("    virtual HRESULT WINAPI PlayForwards(double dSpeed,DWORD dwFlags,IDvdCmd **ppCmd) = 0;")
cpp_quote("    virtual HRESULT WINAPI PlayBackwards(double dSpeed,DWORD dwFlags,IDvdCmd **ppCmd) = 0;")
cpp_quote("    virtual HRESULT WINAPI ShowMenu(DVD_MENU_ID MenuID,DWORD dwFlags,IDvdCmd **ppCmd) = 0;")
cpp_quote("    virtual HRESULT WINAPI Resume(DWORD dwFlags,IDvdCmd **ppCmd) = 0;")
cpp_quote("    virtual HRESULT WINAPI SelectRelativeButton(DVD_RELATIVE_BUTTON buttonDir) = 0;")
cpp_quote("    virtual HRESULT WINAPI ActivateButton(void) = 0;")
cpp_quote("    virtual HRESULT WINAPI SelectButton(ULONG ulButton) = 0;")
cpp_quote("    virtual HRESULT WINAPI SelectAndActivateButton(ULONG ulButton) = 0;")
cpp_quote("    virtual HRESULT WINAPI StillOff(void) = 0;")
cpp_quote("    virtual HRESULT WINAPI Pause(WINBOOL bState) = 0;")
cpp_quote("    virtual HRESULT WINAPI SelectAudioStream(ULONG ulAudio,DWORD dwFlags,IDvdCmd **ppCmd) = 0;")
cpp_quote("    virtual HRESULT WINAPI SelectSubpictureStream(ULONG ulSubPicture,DWORD dwFlags,IDvdCmd **ppCmd) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetSubpictureState(WINBOOL bState,DWORD dwFlags,IDvdCmd **ppCmd) = 0;")
cpp_quote("    virtual HRESULT WINAPI SelectAngle(ULONG ulAngle,DWORD dwFlags,IDvdCmd **ppCmd) = 0;")
cpp_quote("    virtual HRESULT WINAPI SelectParentalLevel(ULONG ulParentalLevel) = 0;")
cpp_quote("    virtual HRESULT WINAPI SelectParentalCountry(BYTE bCountry[2]) = 0;")
cpp_quote("    virtual HRESULT WINAPI SelectKaraokeAudioPresentationMode(ULONG ulMode) = 0;")
cpp_quote("    virtual HRESULT WINAPI SelectVideoModePreference(ULONG ulPreferredDisplayMode) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetDVDDirectory(LPCWSTR pszwPath) = 0;")
cpp_quote("    virtual HRESULT WINAPI ActivateAtPosition(POINT point) = 0;")
cpp_quote("    virtual HRESULT WINAPI SelectAtPosition(POINT point) = 0;")
cpp_quote("    virtual HRESULT WINAPI PlayChaptersAutoStop(ULONG ulTitle,ULONG ulChapter,ULONG ulChaptersToPlay,DWORD dwFlags,IDvdCmd **ppCmd) = 0;")
cpp_quote("    virtual HRESULT WINAPI AcceptParentalLevelChange(WINBOOL bAccept) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetOption(DVD_OPTION_FLAG flag,WINBOOL fState) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetState(IDvdState *pState,DWORD dwFlags,IDvdCmd **ppCmd) = 0;")
cpp_quote("    virtual HRESULT WINAPI PlayPeriodInTitleAutoStop(ULONG ulTitle,DVD_HMSF_TIMECODE *pStartTime,DVD_HMSF_TIMECODE *pEndTime,DWORD dwFlags,IDvdCmd **ppCmd) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetGPRM(ULONG ulIndex,WORD wValue,DWORD dwFlags,IDvdCmd **ppCmd) = 0;")
cpp_quote("    virtual HRESULT WINAPI SelectDefaultMenuLanguage(LCID Language) = 0;")
cpp_quote("    virtual HRESULT WINAPI SelectDefaultAudioLanguage(LCID Language,DVD_AUDIO_LANG_EXT audioExtension) = 0;")
cpp_quote("    virtual HRESULT WINAPI SelectDefaultSubpictureLanguage(LCID Language,DVD_SUBPICTURE_LANG_EXT subpictureExtension) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IDvdControl2Vtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IDvdControl2 *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IDvdControl2 *This);")
cpp_quote("      ULONG (WINAPI *Release)(IDvdControl2 *This);")
cpp_quote("      HRESULT (WINAPI *PlayTitle)(IDvdControl2 *This,ULONG ulTitle,DWORD dwFlags,IDvdCmd **ppCmd);")
cpp_quote("      HRESULT (WINAPI *PlayChapterInTitle)(IDvdControl2 *This,ULONG ulTitle,ULONG ulChapter,DWORD dwFlags,IDvdCmd **ppCmd);")
cpp_quote("      HRESULT (WINAPI *PlayAtTimeInTitle)(IDvdControl2 *This,ULONG ulTitle,DVD_HMSF_TIMECODE *pStartTime,DWORD dwFlags,IDvdCmd **ppCmd);")
cpp_quote("      HRESULT (WINAPI *Stop)(IDvdControl2 *This);")
cpp_quote("      HRESULT (WINAPI *ReturnFromSubmenu)(IDvdControl2 *This,DWORD dwFlags,IDvdCmd **ppCmd);")
cpp_quote("      HRESULT (WINAPI *PlayAtTime)(IDvdControl2 *This,DVD_HMSF_TIMECODE *pTime,DWORD dwFlags,IDvdCmd **ppCmd);")
cpp_quote("      HRESULT (WINAPI *PlayChapter)(IDvdControl2 *This,ULONG ulChapter,DWORD dwFlags,IDvdCmd **ppCmd);")
cpp_quote("      HRESULT (WINAPI *PlayPrevChapter)(IDvdControl2 *This,DWORD dwFlags,IDvdCmd **ppCmd);")
cpp_quote("      HRESULT (WINAPI *ReplayChapter)(IDvdControl2 *This,DWORD dwFlags,IDvdCmd **ppCmd);")
cpp_quote("      HRESULT (WINAPI *PlayNextChapter)(IDvdControl2 *This,DWORD dwFlags,IDvdCmd **ppCmd);")
cpp_quote("      HRESULT (WINAPI *PlayForwards)(IDvdControl2 *This,double dSpeed,DWORD dwFlags,IDvdCmd **ppCmd);")
cpp_quote("      HRESULT (WINAPI *PlayBackwards)(IDvdControl2 *This,double dSpeed,DWORD dwFlags,IDvdCmd **ppCmd);")
cpp_quote("      HRESULT (WINAPI *ShowMenu)(IDvdControl2 *This,DVD_MENU_ID MenuID,DWORD dwFlags,IDvdCmd **ppCmd);")
cpp_quote("      HRESULT (WINAPI *Resume)(IDvdControl2 *This,DWORD dwFlags,IDvdCmd **ppCmd);")
cpp_quote("      HRESULT (WINAPI *SelectRelativeButton)(IDvdControl2 *This,DVD_RELATIVE_BUTTON buttonDir);")
cpp_quote("      HRESULT (WINAPI *ActivateButton)(IDvdControl2 *This);")
cpp_quote("      HRESULT (WINAPI *SelectButton)(IDvdControl2 *This,ULONG ulButton);")
cpp_quote("      HRESULT (WINAPI *SelectAndActivateButton)(IDvdControl2 *This,ULONG ulButton);")
cpp_quote("      HRESULT (WINAPI *StillOff)(IDvdControl2 *This);")
cpp_quote("      HRESULT (WINAPI *Pause)(IDvdControl2 *This,WINBOOL bState);")
cpp_quote("      HRESULT (WINAPI *SelectAudioStream)(IDvdControl2 *This,ULONG ulAudio,DWORD dwFlags,IDvdCmd **ppCmd);")
cpp_quote("      HRESULT (WINAPI *SelectSubpictureStream)(IDvdControl2 *This,ULONG ulSubPicture,DWORD dwFlags,IDvdCmd **ppCmd);")
cpp_quote("      HRESULT (WINAPI *SetSubpictureState)(IDvdControl2 *This,WINBOOL bState,DWORD dwFlags,IDvdCmd **ppCmd);")
cpp_quote("      HRESULT (WINAPI *SelectAngle)(IDvdControl2 *This,ULONG ulAngle,DWORD dwFlags,IDvdCmd **ppCmd);")
cpp_quote("      HRESULT (WINAPI *SelectParentalLevel)(IDvdControl2 *This,ULONG ulParentalLevel);")
cpp_quote("      HRESULT (WINAPI *SelectParentalCountry)(IDvdControl2 *This,BYTE bCountry[2]);")
cpp_quote("      HRESULT (WINAPI *SelectKaraokeAudioPresentationMode)(IDvdControl2 *This,ULONG ulMode);")
cpp_quote("      HRESULT (WINAPI *SelectVideoModePreference)(IDvdControl2 *This,ULONG ulPreferredDisplayMode);")
cpp_quote("      HRESULT (WINAPI *SetDVDDirectory)(IDvdControl2 *This,LPCWSTR pszwPath);")
cpp_quote("      HRESULT (WINAPI *ActivateAtPosition)(IDvdControl2 *This,POINT point);")
cpp_quote("      HRESULT (WINAPI *SelectAtPosition)(IDvdControl2 *This,POINT point);")
cpp_quote("      HRESULT (WINAPI *PlayChaptersAutoStop)(IDvdControl2 *This,ULONG ulTitle,ULONG ulChapter,ULONG ulChaptersToPlay,DWORD dwFlags,IDvdCmd **ppCmd);")
cpp_quote("      HRESULT (WINAPI *AcceptParentalLevelChange)(IDvdControl2 *This,WINBOOL bAccept);")
cpp_quote("      HRESULT (WINAPI *SetOption)(IDvdControl2 *This,DVD_OPTION_FLAG flag,WINBOOL fState);")
cpp_quote("      HRESULT (WINAPI *SetState)(IDvdControl2 *This,IDvdState *pState,DWORD dwFlags,IDvdCmd **ppCmd);")
cpp_quote("      HRESULT (WINAPI *PlayPeriodInTitleAutoStop)(IDvdControl2 *This,ULONG ulTitle,DVD_HMSF_TIMECODE *pStartTime,DVD_HMSF_TIMECODE *pEndTime,DWORD dwFlags,IDvdCmd **ppCmd);")
cpp_quote("      HRESULT (WINAPI *SetGPRM)(IDvdControl2 *This,ULONG ulIndex,WORD wValue,DWORD dwFlags,IDvdCmd **ppCmd);")
cpp_quote("      HRESULT (WINAPI *SelectDefaultMenuLanguage)(IDvdControl2 *This,LCID Language);")
cpp_quote("      HRESULT (WINAPI *SelectDefaultAudioLanguage)(IDvdControl2 *This,LCID Language,DVD_AUDIO_LANG_EXT audioExtension);")
cpp_quote("      HRESULT (WINAPI *SelectDefaultSubpictureLanguage)(IDvdControl2 *This,LCID Language,DVD_SUBPICTURE_LANG_EXT subpictureExtension);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IDvdControl2Vtbl;")
cpp_quote("  struct IDvdControl2 {")
cpp_quote("    CONST_VTBL struct IDvdControl2Vtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IDvdControl2_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IDvdControl2_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IDvdControl2_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IDvdControl2_PlayTitle(This,ulTitle,dwFlags,ppCmd) (This)->lpVtbl->PlayTitle(This,ulTitle,dwFlags,ppCmd)")
cpp_quote("#define IDvdControl2_PlayChapterInTitle(This,ulTitle,ulChapter,dwFlags,ppCmd) (This)->lpVtbl->PlayChapterInTitle(This,ulTitle,ulChapter,dwFlags,ppCmd)")
cpp_quote("#define IDvdControl2_PlayAtTimeInTitle(This,ulTitle,pStartTime,dwFlags,ppCmd) (This)->lpVtbl->PlayAtTimeInTitle(This,ulTitle,pStartTime,dwFlags,ppCmd)")
cpp_quote("#define IDvdControl2_Stop(This) (This)->lpVtbl->Stop(This)")
cpp_quote("#define IDvdControl2_ReturnFromSubmenu(This,dwFlags,ppCmd) (This)->lpVtbl->ReturnFromSubmenu(This,dwFlags,ppCmd)")
cpp_quote("#define IDvdControl2_PlayAtTime(This,pTime,dwFlags,ppCmd) (This)->lpVtbl->PlayAtTime(This,pTime,dwFlags,ppCmd)")
cpp_quote("#define IDvdControl2_PlayChapter(This,ulChapter,dwFlags,ppCmd) (This)->lpVtbl->PlayChapter(This,ulChapter,dwFlags,ppCmd)")
cpp_quote("#define IDvdControl2_PlayPrevChapter(This,dwFlags,ppCmd) (This)->lpVtbl->PlayPrevChapter(This,dwFlags,ppCmd)")
cpp_quote("#define IDvdControl2_ReplayChapter(This,dwFlags,ppCmd) (This)->lpVtbl->ReplayChapter(This,dwFlags,ppCmd)")
cpp_quote("#define IDvdControl2_PlayNextChapter(This,dwFlags,ppCmd) (This)->lpVtbl->PlayNextChapter(This,dwFlags,ppCmd)")
cpp_quote("#define IDvdControl2_PlayForwards(This,dSpeed,dwFlags,ppCmd) (This)->lpVtbl->PlayForwards(This,dSpeed,dwFlags,ppCmd)")
cpp_quote("#define IDvdControl2_PlayBackwards(This,dSpeed,dwFlags,ppCmd) (This)->lpVtbl->PlayBackwards(This,dSpeed,dwFlags,ppCmd)")
cpp_quote("#define IDvdControl2_ShowMenu(This,MenuID,dwFlags,ppCmd) (This)->lpVtbl->ShowMenu(This,MenuID,dwFlags,ppCmd)")
cpp_quote("#define IDvdControl2_Resume(This,dwFlags,ppCmd) (This)->lpVtbl->Resume(This,dwFlags,ppCmd)")
cpp_quote("#define IDvdControl2_SelectRelativeButton(This,buttonDir) (This)->lpVtbl->SelectRelativeButton(This,buttonDir)")
cpp_quote("#define IDvdControl2_ActivateButton(This) (This)->lpVtbl->ActivateButton(This)")
cpp_quote("#define IDvdControl2_SelectButton(This,ulButton) (This)->lpVtbl->SelectButton(This,ulButton)")
cpp_quote("#define IDvdControl2_SelectAndActivateButton(This,ulButton) (This)->lpVtbl->SelectAndActivateButton(This,ulButton)")
cpp_quote("#define IDvdControl2_StillOff(This) (This)->lpVtbl->StillOff(This)")
cpp_quote("#define IDvdControl2_Pause(This,bState) (This)->lpVtbl->Pause(This,bState)")
cpp_quote("#define IDvdControl2_SelectAudioStream(This,ulAudio,dwFlags,ppCmd) (This)->lpVtbl->SelectAudioStream(This,ulAudio,dwFlags,ppCmd)")
cpp_quote("#define IDvdControl2_SelectSubpictureStream(This,ulSubPicture,dwFlags,ppCmd) (This)->lpVtbl->SelectSubpictureStream(This,ulSubPicture,dwFlags,ppCmd)")
cpp_quote("#define IDvdControl2_SetSubpictureState(This,bState,dwFlags,ppCmd) (This)->lpVtbl->SetSubpictureState(This,bState,dwFlags,ppCmd)")
cpp_quote("#define IDvdControl2_SelectAngle(This,ulAngle,dwFlags,ppCmd) (This)->lpVtbl->SelectAngle(This,ulAngle,dwFlags,ppCmd)")
cpp_quote("#define IDvdControl2_SelectParentalLevel(This,ulParentalLevel) (This)->lpVtbl->SelectParentalLevel(This,ulParentalLevel)")
cpp_quote("#define IDvdControl2_SelectParentalCountry(This,bCountry) (This)->lpVtbl->SelectParentalCountry(This,bCountry)")
cpp_quote("#define IDvdControl2_SelectKaraokeAudioPresentationMode(This,ulMode) (This)->lpVtbl->SelectKaraokeAudioPresentationMode(This,ulMode)")
cpp_quote("#define IDvdControl2_SelectVideoModePreference(This,ulPreferredDisplayMode) (This)->lpVtbl->SelectVideoModePreference(This,ulPreferredDisplayMode)")
cpp_quote("#define IDvdControl2_SetDVDDirectory(This,pszwPath) (This)->lpVtbl->SetDVDDirectory(This,pszwPath)")
cpp_quote("#define IDvdControl2_ActivateAtPosition(This,point) (This)->lpVtbl->ActivateAtPosition(This,point)")
cpp_quote("#define IDvdControl2_SelectAtPosition(This,point) (This)->lpVtbl->SelectAtPosition(This,point)")
cpp_quote("#define IDvdControl2_PlayChaptersAutoStop(This,ulTitle,ulChapter,ulChaptersToPlay,dwFlags,ppCmd) (This)->lpVtbl->PlayChaptersAutoStop(This,ulTitle,ulChapter,ulChaptersToPlay,dwFlags,ppCmd)")
cpp_quote("#define IDvdControl2_AcceptParentalLevelChange(This,bAccept) (This)->lpVtbl->AcceptParentalLevelChange(This,bAccept)")
cpp_quote("#define IDvdControl2_SetOption(This,flag,fState) (This)->lpVtbl->SetOption(This,flag,fState)")
cpp_quote("#define IDvdControl2_SetState(This,pState,dwFlags,ppCmd) (This)->lpVtbl->SetState(This,pState,dwFlags,ppCmd)")
cpp_quote("#define IDvdControl2_PlayPeriodInTitleAutoStop(This,ulTitle,pStartTime,pEndTime,dwFlags,ppCmd) (This)->lpVtbl->PlayPeriodInTitleAutoStop(This,ulTitle,pStartTime,pEndTime,dwFlags,ppCmd)")
cpp_quote("#define IDvdControl2_SetGPRM(This,ulIndex,wValue,dwFlags,ppCmd) (This)->lpVtbl->SetGPRM(This,ulIndex,wValue,dwFlags,ppCmd)")
cpp_quote("#define IDvdControl2_SelectDefaultMenuLanguage(This,Language) (This)->lpVtbl->SelectDefaultMenuLanguage(This,Language)")
cpp_quote("#define IDvdControl2_SelectDefaultAudioLanguage(This,Language,audioExtension) (This)->lpVtbl->SelectDefaultAudioLanguage(This,Language,audioExtension)")
cpp_quote("#define IDvdControl2_SelectDefaultSubpictureLanguage(This,Language,subpictureExtension) (This)->lpVtbl->SelectDefaultSubpictureLanguage(This,Language,subpictureExtension)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IDvdControl2_PlayTitle_Proxy(IDvdControl2 *This,ULONG ulTitle,DWORD dwFlags,IDvdCmd **ppCmd);")
cpp_quote("  void __RPC_STUB IDvdControl2_PlayTitle_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl2_PlayChapterInTitle_Proxy(IDvdControl2 *This,ULONG ulTitle,ULONG ulChapter,DWORD dwFlags,IDvdCmd **ppCmd);")
cpp_quote("  void __RPC_STUB IDvdControl2_PlayChapterInTitle_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl2_PlayAtTimeInTitle_Proxy(IDvdControl2 *This,ULONG ulTitle,DVD_HMSF_TIMECODE *pStartTime,DWORD dwFlags,IDvdCmd **ppCmd);")
cpp_quote("  void __RPC_STUB IDvdControl2_PlayAtTimeInTitle_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl2_Stop_Proxy(IDvdControl2 *This);")
cpp_quote("  void __RPC_STUB IDvdControl2_Stop_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl2_ReturnFromSubmenu_Proxy(IDvdControl2 *This,DWORD dwFlags,IDvdCmd **ppCmd);")
cpp_quote("  void __RPC_STUB IDvdControl2_ReturnFromSubmenu_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl2_PlayAtTime_Proxy(IDvdControl2 *This,DVD_HMSF_TIMECODE *pTime,DWORD dwFlags,IDvdCmd **ppCmd);")
cpp_quote("  void __RPC_STUB IDvdControl2_PlayAtTime_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl2_PlayChapter_Proxy(IDvdControl2 *This,ULONG ulChapter,DWORD dwFlags,IDvdCmd **ppCmd);")
cpp_quote("  void __RPC_STUB IDvdControl2_PlayChapter_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl2_PlayPrevChapter_Proxy(IDvdControl2 *This,DWORD dwFlags,IDvdCmd **ppCmd);")
cpp_quote("  void __RPC_STUB IDvdControl2_PlayPrevChapter_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl2_ReplayChapter_Proxy(IDvdControl2 *This,DWORD dwFlags,IDvdCmd **ppCmd);")
cpp_quote("  void __RPC_STUB IDvdControl2_ReplayChapter_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl2_PlayNextChapter_Proxy(IDvdControl2 *This,DWORD dwFlags,IDvdCmd **ppCmd);")
cpp_quote("  void __RPC_STUB IDvdControl2_PlayNextChapter_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl2_PlayForwards_Proxy(IDvdControl2 *This,double dSpeed,DWORD dwFlags,IDvdCmd **ppCmd);")
cpp_quote("  void __RPC_STUB IDvdControl2_PlayForwards_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl2_PlayBackwards_Proxy(IDvdControl2 *This,double dSpeed,DWORD dwFlags,IDvdCmd **ppCmd);")
cpp_quote("  void __RPC_STUB IDvdControl2_PlayBackwards_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl2_ShowMenu_Proxy(IDvdControl2 *This,DVD_MENU_ID MenuID,DWORD dwFlags,IDvdCmd **ppCmd);")
cpp_quote("  void __RPC_STUB IDvdControl2_ShowMenu_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl2_Resume_Proxy(IDvdControl2 *This,DWORD dwFlags,IDvdCmd **ppCmd);")
cpp_quote("  void __RPC_STUB IDvdControl2_Resume_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl2_SelectRelativeButton_Proxy(IDvdControl2 *This,DVD_RELATIVE_BUTTON buttonDir);")
cpp_quote("  void __RPC_STUB IDvdControl2_SelectRelativeButton_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl2_ActivateButton_Proxy(IDvdControl2 *This);")
cpp_quote("  void __RPC_STUB IDvdControl2_ActivateButton_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl2_SelectButton_Proxy(IDvdControl2 *This,ULONG ulButton);")
cpp_quote("  void __RPC_STUB IDvdControl2_SelectButton_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl2_SelectAndActivateButton_Proxy(IDvdControl2 *This,ULONG ulButton);")
cpp_quote("  void __RPC_STUB IDvdControl2_SelectAndActivateButton_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl2_StillOff_Proxy(IDvdControl2 *This);")
cpp_quote("  void __RPC_STUB IDvdControl2_StillOff_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl2_Pause_Proxy(IDvdControl2 *This,WINBOOL bState);")
cpp_quote("  void __RPC_STUB IDvdControl2_Pause_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl2_SelectAudioStream_Proxy(IDvdControl2 *This,ULONG ulAudio,DWORD dwFlags,IDvdCmd **ppCmd);")
cpp_quote("  void __RPC_STUB IDvdControl2_SelectAudioStream_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl2_SelectSubpictureStream_Proxy(IDvdControl2 *This,ULONG ulSubPicture,DWORD dwFlags,IDvdCmd **ppCmd);")
cpp_quote("  void __RPC_STUB IDvdControl2_SelectSubpictureStream_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl2_SetSubpictureState_Proxy(IDvdControl2 *This,WINBOOL bState,DWORD dwFlags,IDvdCmd **ppCmd);")
cpp_quote("  void __RPC_STUB IDvdControl2_SetSubpictureState_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl2_SelectAngle_Proxy(IDvdControl2 *This,ULONG ulAngle,DWORD dwFlags,IDvdCmd **ppCmd);")
cpp_quote("  void __RPC_STUB IDvdControl2_SelectAngle_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl2_SelectParentalLevel_Proxy(IDvdControl2 *This,ULONG ulParentalLevel);")
cpp_quote("  void __RPC_STUB IDvdControl2_SelectParentalLevel_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl2_SelectParentalCountry_Proxy(IDvdControl2 *This,BYTE bCountry[2]);")
cpp_quote("  void __RPC_STUB IDvdControl2_SelectParentalCountry_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl2_SelectKaraokeAudioPresentationMode_Proxy(IDvdControl2 *This,ULONG ulMode);")
cpp_quote("  void __RPC_STUB IDvdControl2_SelectKaraokeAudioPresentationMode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl2_SelectVideoModePreference_Proxy(IDvdControl2 *This,ULONG ulPreferredDisplayMode);")
cpp_quote("  void __RPC_STUB IDvdControl2_SelectVideoModePreference_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl2_SetDVDDirectory_Proxy(IDvdControl2 *This,LPCWSTR pszwPath);")
cpp_quote("  void __RPC_STUB IDvdControl2_SetDVDDirectory_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl2_ActivateAtPosition_Proxy(IDvdControl2 *This,POINT point);")
cpp_quote("  void __RPC_STUB IDvdControl2_ActivateAtPosition_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl2_SelectAtPosition_Proxy(IDvdControl2 *This,POINT point);")
cpp_quote("  void __RPC_STUB IDvdControl2_SelectAtPosition_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl2_PlayChaptersAutoStop_Proxy(IDvdControl2 *This,ULONG ulTitle,ULONG ulChapter,ULONG ulChaptersToPlay,DWORD dwFlags,IDvdCmd **ppCmd);")
cpp_quote("  void __RPC_STUB IDvdControl2_PlayChaptersAutoStop_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl2_AcceptParentalLevelChange_Proxy(IDvdControl2 *This,WINBOOL bAccept);")
cpp_quote("  void __RPC_STUB IDvdControl2_AcceptParentalLevelChange_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl2_SetOption_Proxy(IDvdControl2 *This,DVD_OPTION_FLAG flag,WINBOOL fState);")
cpp_quote("  void __RPC_STUB IDvdControl2_SetOption_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl2_SetState_Proxy(IDvdControl2 *This,IDvdState *pState,DWORD dwFlags,IDvdCmd **ppCmd);")
cpp_quote("  void __RPC_STUB IDvdControl2_SetState_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl2_PlayPeriodInTitleAutoStop_Proxy(IDvdControl2 *This,ULONG ulTitle,DVD_HMSF_TIMECODE *pStartTime,DVD_HMSF_TIMECODE *pEndTime,DWORD dwFlags,IDvdCmd **ppCmd);")
cpp_quote("  void __RPC_STUB IDvdControl2_PlayPeriodInTitleAutoStop_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl2_SetGPRM_Proxy(IDvdControl2 *This,ULONG ulIndex,WORD wValue,DWORD dwFlags,IDvdCmd **ppCmd);")
cpp_quote("  void __RPC_STUB IDvdControl2_SetGPRM_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl2_SelectDefaultMenuLanguage_Proxy(IDvdControl2 *This,LCID Language);")
cpp_quote("  void __RPC_STUB IDvdControl2_SelectDefaultMenuLanguage_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl2_SelectDefaultAudioLanguage_Proxy(IDvdControl2 *This,LCID Language,DVD_AUDIO_LANG_EXT audioExtension);")
cpp_quote("  void __RPC_STUB IDvdControl2_SelectDefaultAudioLanguage_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdControl2_SelectDefaultSubpictureLanguage_Proxy(IDvdControl2 *This,LCID Language,DVD_SUBPICTURE_LANG_EXT subpictureExtension);")
cpp_quote("  void __RPC_STUB IDvdControl2_SelectDefaultSubpictureLanguage_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  enum DVD_TextStringType {")
cpp_quote("    DVD_Struct_Volume = 0x1,DVD_Struct_Title = 0x2,DVD_Struct_ParentalID = 0x3,DVD_Struct_PartOfTitle = 0x4,DVD_Struct_Cell = 0x5,")
cpp_quote("    DVD_Stream_Audio = 0x10,DVD_Stream_Subpicture = 0x11,DVD_Stream_Angle = 0x12,DVD_Channel_Audio = 0x20,DVD_General_Name = 0x30,")
cpp_quote("    DVD_General_Comments = 0x31,DVD_Title_Series = 0x38,DVD_Title_Movie = 0x39,DVD_Title_Video = 0x3a,DVD_Title_Album = 0x3b,DVD_Title_Song = 0x3c,")
cpp_quote("    DVD_Title_Other = 0x3f,DVD_Title_Sub_Series = 0x40,DVD_Title_Sub_Movie = 0x41,DVD_Title_Sub_Video = 0x42,DVD_Title_Sub_Album = 0x43,")
cpp_quote("    DVD_Title_Sub_Song = 0x44,DVD_Title_Sub_Other = 0x47,DVD_Title_Orig_Series = 0x48,DVD_Title_Orig_Movie = 0x49,DVD_Title_Orig_Video = 0x4a,")
cpp_quote("    DVD_Title_Orig_Album = 0x4b,DVD_Title_Orig_Song = 0x4c,DVD_Title_Orig_Other = 0x4f,DVD_Other_Scene = 0x50,DVD_Other_Cut = 0x51,DVD_Other_Take = 0x52")
cpp_quote("  };")
cpp_quote("")
cpp_quote("  enum DVD_TextCharSet {")
cpp_quote("    DVD_CharSet_Unicode = 0,DVD_CharSet_ISO646 = 1,DVD_CharSet_JIS_Roman_Kanji = 2,DVD_CharSet_ISO8859_1 = 3,")
cpp_quote("    DVD_CharSet_ShiftJIS_Kanji_Roman_Katakana = 4")
cpp_quote("  };")
cpp_quote("#define DVD_TITLE_MENU 0x000")
cpp_quote("#define DVD_STREAM_DATA_CURRENT 0x800")
cpp_quote("#define DVD_STREAM_DATA_VMGM 0x400")
cpp_quote("#define DVD_STREAM_DATA_VTSM 0x401")
cpp_quote("#define DVD_DEFAULT_AUDIO_STREAM 0x0f")
cpp_quote("")
cpp_quote("  typedef struct tagDVD_DECODER_CAPS {")
cpp_quote("    DWORD dwSize;")
cpp_quote("    DWORD dwAudioCaps;")
cpp_quote("    double dFwdMaxRateVideo;")
cpp_quote("    double dFwdMaxRateAudio;")
cpp_quote("    double dFwdMaxRateSP;")
cpp_quote("    double dBwdMaxRateVideo;")
cpp_quote("    double dBwdMaxRateAudio;")
cpp_quote("    double dBwdMaxRateSP;")
cpp_quote("    DWORD dwRes1;")
cpp_quote("    DWORD dwRes2;")
cpp_quote("    DWORD dwRes3;")
cpp_quote("    DWORD dwRes4;")
cpp_quote("  } DVD_DECODER_CAPS;")
cpp_quote("")
cpp_quote("#define DVD_AUDIO_CAPS_AC3 0x00000001")
cpp_quote("#define DVD_AUDIO_CAPS_MPEG2 0x00000002")
cpp_quote("#define DVD_AUDIO_CAPS_LPCM 0x00000004")
cpp_quote("#define DVD_AUDIO_CAPS_DTS 0x00000008")
cpp_quote("#define DVD_AUDIO_CAPS_SDDS 0x00000010")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0387_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0387_v0_0_s_ifspec;")
cpp_quote("#ifndef __IDvdInfo2_INTERFACE_DEFINED__")
cpp_quote("#define __IDvdInfo2_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IDvdInfo2;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IDvdInfo2 : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI GetCurrentDomain(DVD_DOMAIN *pDomain) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetCurrentLocation(DVD_PLAYBACK_LOCATION2 *pLocation) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetTotalTitleTime(DVD_HMSF_TIMECODE *pTotalTime,ULONG *ulTimeCodeFlags) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetCurrentButton(ULONG *pulButtonsAvailable,ULONG *pulCurrentButton) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetCurrentAngle(ULONG *pulAnglesAvailable,ULONG *pulCurrentAngle) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetCurrentAudio(ULONG *pulStreamsAvailable,ULONG *pulCurrentStream) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetCurrentSubpicture(ULONG *pulStreamsAvailable,ULONG *pulCurrentStream,WINBOOL *pbIsDisabled) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetCurrentUOPS(ULONG *pulUOPs) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetAllSPRMs(SPRMARRAY *pRegisterArray) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetAllGPRMs(GPRMARRAY *pRegisterArray) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetAudioLanguage(ULONG ulStream,LCID *pLanguage) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetSubpictureLanguage(ULONG ulStream,LCID *pLanguage) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetTitleAttributes(ULONG ulTitle,DVD_MenuAttributes *pMenu,DVD_TitleAttributes *pTitle) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetVMGAttributes(DVD_MenuAttributes *pATR) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetCurrentVideoAttributes(DVD_VideoAttributes *pATR) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetAudioAttributes(ULONG ulStream,DVD_AudioAttributes *pATR) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetKaraokeAttributes(ULONG ulStream,DVD_KaraokeAttributes *pAttributes) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetSubpictureAttributes(ULONG ulStream,DVD_SubpictureAttributes *pATR) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetDVDVolumeInfo(ULONG *pulNumOfVolumes,ULONG *pulVolume,DVD_DISC_SIDE *pSide,ULONG *pulNumOfTitles) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetDVDTextNumberOfLanguages(ULONG *pulNumOfLangs) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetDVDTextLanguageInfo(ULONG ulLangIndex,ULONG *pulNumOfStrings,LCID *pLangCode,enum DVD_TextCharSet *pbCharacterSet) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetDVDTextStringAsNative(ULONG ulLangIndex,ULONG ulStringIndex,BYTE *pbBuffer,ULONG ulMaxBufferSize,ULONG *pulActualSize,enum DVD_TextStringType *pType) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetDVDTextStringAsUnicode(ULONG ulLangIndex,ULONG ulStringIndex,WCHAR *pchwBuffer,ULONG ulMaxBufferSize,ULONG *pulActualSize,enum DVD_TextStringType *pType) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetPlayerParentalLevel(ULONG *pulParentalLevel,BYTE pbCountryCode[2]) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetNumberOfChapters(ULONG ulTitle,ULONG *pulNumOfChapters) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetTitleParentalLevels(ULONG ulTitle,ULONG *pulParentalLevels) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetDVDDirectory(LPWSTR pszwPath,ULONG ulMaxSize,ULONG *pulActualSize) = 0;")
cpp_quote("    virtual HRESULT WINAPI IsAudioStreamEnabled(ULONG ulStreamNum,WINBOOL *pbEnabled) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetDiscID(LPCWSTR pszwPath,ULONGLONG *pullDiscID) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetState(IDvdState **pStateData) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetMenuLanguages(LCID *pLanguages,ULONG ulMaxLanguages,ULONG *pulActualLanguages) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetButtonAtPosition(POINT point,ULONG *pulButtonIndex) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetCmdFromEvent(LONG_PTR lParam1,IDvdCmd **pCmdObj) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetDefaultMenuLanguage(LCID *pLanguage) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetDefaultAudioLanguage(LCID *pLanguage,DVD_AUDIO_LANG_EXT *pAudioExtension) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetDefaultSubpictureLanguage(LCID *pLanguage,DVD_SUBPICTURE_LANG_EXT *pSubpictureExtension) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetDecoderCaps(DVD_DECODER_CAPS *pCaps) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetButtonRect(ULONG ulButton,RECT *pRect) = 0;")
cpp_quote("    virtual HRESULT WINAPI IsSubpictureStreamEnabled(ULONG ulStreamNum,WINBOOL *pbEnabled) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IDvdInfo2Vtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IDvdInfo2 *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IDvdInfo2 *This);")
cpp_quote("      ULONG (WINAPI *Release)(IDvdInfo2 *This);")
cpp_quote("      HRESULT (WINAPI *GetCurrentDomain)(IDvdInfo2 *This,DVD_DOMAIN *pDomain);")
cpp_quote("      HRESULT (WINAPI *GetCurrentLocation)(IDvdInfo2 *This,DVD_PLAYBACK_LOCATION2 *pLocation);")
cpp_quote("      HRESULT (WINAPI *GetTotalTitleTime)(IDvdInfo2 *This,DVD_HMSF_TIMECODE *pTotalTime,ULONG *ulTimeCodeFlags);")
cpp_quote("      HRESULT (WINAPI *GetCurrentButton)(IDvdInfo2 *This,ULONG *pulButtonsAvailable,ULONG *pulCurrentButton);")
cpp_quote("      HRESULT (WINAPI *GetCurrentAngle)(IDvdInfo2 *This,ULONG *pulAnglesAvailable,ULONG *pulCurrentAngle);")
cpp_quote("      HRESULT (WINAPI *GetCurrentAudio)(IDvdInfo2 *This,ULONG *pulStreamsAvailable,ULONG *pulCurrentStream);")
cpp_quote("      HRESULT (WINAPI *GetCurrentSubpicture)(IDvdInfo2 *This,ULONG *pulStreamsAvailable,ULONG *pulCurrentStream,WINBOOL *pbIsDisabled);")
cpp_quote("      HRESULT (WINAPI *GetCurrentUOPS)(IDvdInfo2 *This,ULONG *pulUOPs);")
cpp_quote("      HRESULT (WINAPI *GetAllSPRMs)(IDvdInfo2 *This,SPRMARRAY *pRegisterArray);")
cpp_quote("      HRESULT (WINAPI *GetAllGPRMs)(IDvdInfo2 *This,GPRMARRAY *pRegisterArray);")
cpp_quote("      HRESULT (WINAPI *GetAudioLanguage)(IDvdInfo2 *This,ULONG ulStream,LCID *pLanguage);")
cpp_quote("      HRESULT (WINAPI *GetSubpictureLanguage)(IDvdInfo2 *This,ULONG ulStream,LCID *pLanguage);")
cpp_quote("      HRESULT (WINAPI *GetTitleAttributes)(IDvdInfo2 *This,ULONG ulTitle,DVD_MenuAttributes *pMenu,DVD_TitleAttributes *pTitle);")
cpp_quote("      HRESULT (WINAPI *GetVMGAttributes)(IDvdInfo2 *This,DVD_MenuAttributes *pATR);")
cpp_quote("      HRESULT (WINAPI *GetCurrentVideoAttributes)(IDvdInfo2 *This,DVD_VideoAttributes *pATR);")
cpp_quote("      HRESULT (WINAPI *GetAudioAttributes)(IDvdInfo2 *This,ULONG ulStream,DVD_AudioAttributes *pATR);")
cpp_quote("      HRESULT (WINAPI *GetKaraokeAttributes)(IDvdInfo2 *This,ULONG ulStream,DVD_KaraokeAttributes *pAttributes);")
cpp_quote("      HRESULT (WINAPI *GetSubpictureAttributes)(IDvdInfo2 *This,ULONG ulStream,DVD_SubpictureAttributes *pATR);")
cpp_quote("      HRESULT (WINAPI *GetDVDVolumeInfo)(IDvdInfo2 *This,ULONG *pulNumOfVolumes,ULONG *pulVolume,DVD_DISC_SIDE *pSide,ULONG *pulNumOfTitles);")
cpp_quote("      HRESULT (WINAPI *GetDVDTextNumberOfLanguages)(IDvdInfo2 *This,ULONG *pulNumOfLangs);")
cpp_quote("      HRESULT (WINAPI *GetDVDTextLanguageInfo)(IDvdInfo2 *This,ULONG ulLangIndex,ULONG *pulNumOfStrings,LCID *pLangCode,enum DVD_TextCharSet *pbCharacterSet);")
cpp_quote("      HRESULT (WINAPI *GetDVDTextStringAsNative)(IDvdInfo2 *This,ULONG ulLangIndex,ULONG ulStringIndex,BYTE *pbBuffer,ULONG ulMaxBufferSize,ULONG *pulActualSize,enum DVD_TextStringType *pType);")
cpp_quote("      HRESULT (WINAPI *GetDVDTextStringAsUnicode)(IDvdInfo2 *This,ULONG ulLangIndex,ULONG ulStringIndex,WCHAR *pchwBuffer,ULONG ulMaxBufferSize,ULONG *pulActualSize,enum DVD_TextStringType *pType);")
cpp_quote("      HRESULT (WINAPI *GetPlayerParentalLevel)(IDvdInfo2 *This,ULONG *pulParentalLevel,BYTE pbCountryCode[2]);")
cpp_quote("      HRESULT (WINAPI *GetNumberOfChapters)(IDvdInfo2 *This,ULONG ulTitle,ULONG *pulNumOfChapters);")
cpp_quote("      HRESULT (WINAPI *GetTitleParentalLevels)(IDvdInfo2 *This,ULONG ulTitle,ULONG *pulParentalLevels);")
cpp_quote("      HRESULT (WINAPI *GetDVDDirectory)(IDvdInfo2 *This,LPWSTR pszwPath,ULONG ulMaxSize,ULONG *pulActualSize);")
cpp_quote("      HRESULT (WINAPI *IsAudioStreamEnabled)(IDvdInfo2 *This,ULONG ulStreamNum,WINBOOL *pbEnabled);")
cpp_quote("      HRESULT (WINAPI *GetDiscID)(IDvdInfo2 *This,LPCWSTR pszwPath,ULONGLONG *pullDiscID);")
cpp_quote("      HRESULT (WINAPI *GetState)(IDvdInfo2 *This,IDvdState **pStateData);")
cpp_quote("      HRESULT (WINAPI *GetMenuLanguages)(IDvdInfo2 *This,LCID *pLanguages,ULONG ulMaxLanguages,ULONG *pulActualLanguages);")
cpp_quote("      HRESULT (WINAPI *GetButtonAtPosition)(IDvdInfo2 *This,POINT point,ULONG *pulButtonIndex);")
cpp_quote("      HRESULT (WINAPI *GetCmdFromEvent)(IDvdInfo2 *This,LONG_PTR lParam1,IDvdCmd **pCmdObj);")
cpp_quote("      HRESULT (WINAPI *GetDefaultMenuLanguage)(IDvdInfo2 *This,LCID *pLanguage);")
cpp_quote("      HRESULT (WINAPI *GetDefaultAudioLanguage)(IDvdInfo2 *This,LCID *pLanguage,DVD_AUDIO_LANG_EXT *pAudioExtension);")
cpp_quote("      HRESULT (WINAPI *GetDefaultSubpictureLanguage)(IDvdInfo2 *This,LCID *pLanguage,DVD_SUBPICTURE_LANG_EXT *pSubpictureExtension);")
cpp_quote("      HRESULT (WINAPI *GetDecoderCaps)(IDvdInfo2 *This,DVD_DECODER_CAPS *pCaps);")
cpp_quote("      HRESULT (WINAPI *GetButtonRect)(IDvdInfo2 *This,ULONG ulButton,RECT *pRect);")
cpp_quote("      HRESULT (WINAPI *IsSubpictureStreamEnabled)(IDvdInfo2 *This,ULONG ulStreamNum,WINBOOL *pbEnabled);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IDvdInfo2Vtbl;")
cpp_quote("  struct IDvdInfo2 {")
cpp_quote("    CONST_VTBL struct IDvdInfo2Vtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IDvdInfo2_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IDvdInfo2_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IDvdInfo2_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IDvdInfo2_GetCurrentDomain(This,pDomain) (This)->lpVtbl->GetCurrentDomain(This,pDomain)")
cpp_quote("#define IDvdInfo2_GetCurrentLocation(This,pLocation) (This)->lpVtbl->GetCurrentLocation(This,pLocation)")
cpp_quote("#define IDvdInfo2_GetTotalTitleTime(This,pTotalTime,ulTimeCodeFlags) (This)->lpVtbl->GetTotalTitleTime(This,pTotalTime,ulTimeCodeFlags)")
cpp_quote("#define IDvdInfo2_GetCurrentButton(This,pulButtonsAvailable,pulCurrentButton) (This)->lpVtbl->GetCurrentButton(This,pulButtonsAvailable,pulCurrentButton)")
cpp_quote("#define IDvdInfo2_GetCurrentAngle(This,pulAnglesAvailable,pulCurrentAngle) (This)->lpVtbl->GetCurrentAngle(This,pulAnglesAvailable,pulCurrentAngle)")
cpp_quote("#define IDvdInfo2_GetCurrentAudio(This,pulStreamsAvailable,pulCurrentStream) (This)->lpVtbl->GetCurrentAudio(This,pulStreamsAvailable,pulCurrentStream)")
cpp_quote("#define IDvdInfo2_GetCurrentSubpicture(This,pulStreamsAvailable,pulCurrentStream,pbIsDisabled) (This)->lpVtbl->GetCurrentSubpicture(This,pulStreamsAvailable,pulCurrentStream,pbIsDisabled)")
cpp_quote("#define IDvdInfo2_GetCurrentUOPS(This,pulUOPs) (This)->lpVtbl->GetCurrentUOPS(This,pulUOPs)")
cpp_quote("#define IDvdInfo2_GetAllSPRMs(This,pRegisterArray) (This)->lpVtbl->GetAllSPRMs(This,pRegisterArray)")
cpp_quote("#define IDvdInfo2_GetAllGPRMs(This,pRegisterArray) (This)->lpVtbl->GetAllGPRMs(This,pRegisterArray)")
cpp_quote("#define IDvdInfo2_GetAudioLanguage(This,ulStream,pLanguage) (This)->lpVtbl->GetAudioLanguage(This,ulStream,pLanguage)")
cpp_quote("#define IDvdInfo2_GetSubpictureLanguage(This,ulStream,pLanguage) (This)->lpVtbl->GetSubpictureLanguage(This,ulStream,pLanguage)")
cpp_quote("#define IDvdInfo2_GetTitleAttributes(This,ulTitle,pMenu,pTitle) (This)->lpVtbl->GetTitleAttributes(This,ulTitle,pMenu,pTitle)")
cpp_quote("#define IDvdInfo2_GetVMGAttributes(This,pATR) (This)->lpVtbl->GetVMGAttributes(This,pATR)")
cpp_quote("#define IDvdInfo2_GetCurrentVideoAttributes(This,pATR) (This)->lpVtbl->GetCurrentVideoAttributes(This,pATR)")
cpp_quote("#define IDvdInfo2_GetAudioAttributes(This,ulStream,pATR) (This)->lpVtbl->GetAudioAttributes(This,ulStream,pATR)")
cpp_quote("#define IDvdInfo2_GetKaraokeAttributes(This,ulStream,pAttributes) (This)->lpVtbl->GetKaraokeAttributes(This,ulStream,pAttributes)")
cpp_quote("#define IDvdInfo2_GetSubpictureAttributes(This,ulStream,pATR) (This)->lpVtbl->GetSubpictureAttributes(This,ulStream,pATR)")
cpp_quote("#define IDvdInfo2_GetDVDVolumeInfo(This,pulNumOfVolumes,pulVolume,pSide,pulNumOfTitles) (This)->lpVtbl->GetDVDVolumeInfo(This,pulNumOfVolumes,pulVolume,pSide,pulNumOfTitles)")
cpp_quote("#define IDvdInfo2_GetDVDTextNumberOfLanguages(This,pulNumOfLangs) (This)->lpVtbl->GetDVDTextNumberOfLanguages(This,pulNumOfLangs)")
cpp_quote("#define IDvdInfo2_GetDVDTextLanguageInfo(This,ulLangIndex,pulNumOfStrings,pLangCode,pbCharacterSet) (This)->lpVtbl->GetDVDTextLanguageInfo(This,ulLangIndex,pulNumOfStrings,pLangCode,pbCharacterSet)")
cpp_quote("#define IDvdInfo2_GetDVDTextStringAsNative(This,ulLangIndex,ulStringIndex,pbBuffer,ulMaxBufferSize,pulActualSize,pType) (This)->lpVtbl->GetDVDTextStringAsNative(This,ulLangIndex,ulStringIndex,pbBuffer,ulMaxBufferSize,pulActualSize,pType)")
cpp_quote("#define IDvdInfo2_GetDVDTextStringAsUnicode(This,ulLangIndex,ulStringIndex,pchwBuffer,ulMaxBufferSize,pulActualSize,pType) (This)->lpVtbl->GetDVDTextStringAsUnicode(This,ulLangIndex,ulStringIndex,pchwBuffer,ulMaxBufferSize,pulActualSize,pType)")
cpp_quote("#define IDvdInfo2_GetPlayerParentalLevel(This,pulParentalLevel,pbCountryCode) (This)->lpVtbl->GetPlayerParentalLevel(This,pulParentalLevel,pbCountryCode)")
cpp_quote("#define IDvdInfo2_GetNumberOfChapters(This,ulTitle,pulNumOfChapters) (This)->lpVtbl->GetNumberOfChapters(This,ulTitle,pulNumOfChapters)")
cpp_quote("#define IDvdInfo2_GetTitleParentalLevels(This,ulTitle,pulParentalLevels) (This)->lpVtbl->GetTitleParentalLevels(This,ulTitle,pulParentalLevels)")
cpp_quote("#define IDvdInfo2_GetDVDDirectory(This,pszwPath,ulMaxSize,pulActualSize) (This)->lpVtbl->GetDVDDirectory(This,pszwPath,ulMaxSize,pulActualSize)")
cpp_quote("#define IDvdInfo2_IsAudioStreamEnabled(This,ulStreamNum,pbEnabled) (This)->lpVtbl->IsAudioStreamEnabled(This,ulStreamNum,pbEnabled)")
cpp_quote("#define IDvdInfo2_GetDiscID(This,pszwPath,pullDiscID) (This)->lpVtbl->GetDiscID(This,pszwPath,pullDiscID)")
cpp_quote("#define IDvdInfo2_GetState(This,pStateData) (This)->lpVtbl->GetState(This,pStateData)")
cpp_quote("#define IDvdInfo2_GetMenuLanguages(This,pLanguages,ulMaxLanguages,pulActualLanguages) (This)->lpVtbl->GetMenuLanguages(This,pLanguages,ulMaxLanguages,pulActualLanguages)")
cpp_quote("#define IDvdInfo2_GetButtonAtPosition(This,point,pulButtonIndex) (This)->lpVtbl->GetButtonAtPosition(This,point,pulButtonIndex)")
cpp_quote("#define IDvdInfo2_GetCmdFromEvent(This,lParam1,pCmdObj) (This)->lpVtbl->GetCmdFromEvent(This,lParam1,pCmdObj)")
cpp_quote("#define IDvdInfo2_GetDefaultMenuLanguage(This,pLanguage) (This)->lpVtbl->GetDefaultMenuLanguage(This,pLanguage)")
cpp_quote("#define IDvdInfo2_GetDefaultAudioLanguage(This,pLanguage,pAudioExtension) (This)->lpVtbl->GetDefaultAudioLanguage(This,pLanguage,pAudioExtension)")
cpp_quote("#define IDvdInfo2_GetDefaultSubpictureLanguage(This,pLanguage,pSubpictureExtension) (This)->lpVtbl->GetDefaultSubpictureLanguage(This,pLanguage,pSubpictureExtension)")
cpp_quote("#define IDvdInfo2_GetDecoderCaps(This,pCaps) (This)->lpVtbl->GetDecoderCaps(This,pCaps)")
cpp_quote("#define IDvdInfo2_GetButtonRect(This,ulButton,pRect) (This)->lpVtbl->GetButtonRect(This,ulButton,pRect)")
cpp_quote("#define IDvdInfo2_IsSubpictureStreamEnabled(This,ulStreamNum,pbEnabled) (This)->lpVtbl->IsSubpictureStreamEnabled(This,ulStreamNum,pbEnabled)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IDvdInfo2_GetCurrentDomain_Proxy(IDvdInfo2 *This,DVD_DOMAIN *pDomain);")
cpp_quote("  void __RPC_STUB IDvdInfo2_GetCurrentDomain_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo2_GetCurrentLocation_Proxy(IDvdInfo2 *This,DVD_PLAYBACK_LOCATION2 *pLocation);")
cpp_quote("  void __RPC_STUB IDvdInfo2_GetCurrentLocation_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo2_GetTotalTitleTime_Proxy(IDvdInfo2 *This,DVD_HMSF_TIMECODE *pTotalTime,ULONG *ulTimeCodeFlags);")
cpp_quote("  void __RPC_STUB IDvdInfo2_GetTotalTitleTime_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo2_GetCurrentButton_Proxy(IDvdInfo2 *This,ULONG *pulButtonsAvailable,ULONG *pulCurrentButton);")
cpp_quote("  void __RPC_STUB IDvdInfo2_GetCurrentButton_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo2_GetCurrentAngle_Proxy(IDvdInfo2 *This,ULONG *pulAnglesAvailable,ULONG *pulCurrentAngle);")
cpp_quote("  void __RPC_STUB IDvdInfo2_GetCurrentAngle_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo2_GetCurrentAudio_Proxy(IDvdInfo2 *This,ULONG *pulStreamsAvailable,ULONG *pulCurrentStream);")
cpp_quote("  void __RPC_STUB IDvdInfo2_GetCurrentAudio_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo2_GetCurrentSubpicture_Proxy(IDvdInfo2 *This,ULONG *pulStreamsAvailable,ULONG *pulCurrentStream,WINBOOL *pbIsDisabled);")
cpp_quote("  void __RPC_STUB IDvdInfo2_GetCurrentSubpicture_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo2_GetCurrentUOPS_Proxy(IDvdInfo2 *This,ULONG *pulUOPs);")
cpp_quote("  void __RPC_STUB IDvdInfo2_GetCurrentUOPS_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo2_GetAllSPRMs_Proxy(IDvdInfo2 *This,SPRMARRAY *pRegisterArray);")
cpp_quote("  void __RPC_STUB IDvdInfo2_GetAllSPRMs_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo2_GetAllGPRMs_Proxy(IDvdInfo2 *This,GPRMARRAY *pRegisterArray);")
cpp_quote("  void __RPC_STUB IDvdInfo2_GetAllGPRMs_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo2_GetAudioLanguage_Proxy(IDvdInfo2 *This,ULONG ulStream,LCID *pLanguage);")
cpp_quote("  void __RPC_STUB IDvdInfo2_GetAudioLanguage_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo2_GetSubpictureLanguage_Proxy(IDvdInfo2 *This,ULONG ulStream,LCID *pLanguage);")
cpp_quote("  void __RPC_STUB IDvdInfo2_GetSubpictureLanguage_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo2_GetTitleAttributes_Proxy(IDvdInfo2 *This,ULONG ulTitle,DVD_MenuAttributes *pMenu,DVD_TitleAttributes *pTitle);")
cpp_quote("  void __RPC_STUB IDvdInfo2_GetTitleAttributes_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo2_GetVMGAttributes_Proxy(IDvdInfo2 *This,DVD_MenuAttributes *pATR);")
cpp_quote("  void __RPC_STUB IDvdInfo2_GetVMGAttributes_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo2_GetCurrentVideoAttributes_Proxy(IDvdInfo2 *This,DVD_VideoAttributes *pATR);")
cpp_quote("  void __RPC_STUB IDvdInfo2_GetCurrentVideoAttributes_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo2_GetAudioAttributes_Proxy(IDvdInfo2 *This,ULONG ulStream,DVD_AudioAttributes *pATR);")
cpp_quote("  void __RPC_STUB IDvdInfo2_GetAudioAttributes_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo2_GetKaraokeAttributes_Proxy(IDvdInfo2 *This,ULONG ulStream,DVD_KaraokeAttributes *pAttributes);")
cpp_quote("  void __RPC_STUB IDvdInfo2_GetKaraokeAttributes_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo2_GetSubpictureAttributes_Proxy(IDvdInfo2 *This,ULONG ulStream,DVD_SubpictureAttributes *pATR);")
cpp_quote("  void __RPC_STUB IDvdInfo2_GetSubpictureAttributes_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo2_GetDVDVolumeInfo_Proxy(IDvdInfo2 *This,ULONG *pulNumOfVolumes,ULONG *pulVolume,DVD_DISC_SIDE *pSide,ULONG *pulNumOfTitles);")
cpp_quote("  void __RPC_STUB IDvdInfo2_GetDVDVolumeInfo_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo2_GetDVDTextNumberOfLanguages_Proxy(IDvdInfo2 *This,ULONG *pulNumOfLangs);")
cpp_quote("  void __RPC_STUB IDvdInfo2_GetDVDTextNumberOfLanguages_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo2_GetDVDTextLanguageInfo_Proxy(IDvdInfo2 *This,ULONG ulLangIndex,ULONG *pulNumOfStrings,LCID *pLangCode,enum DVD_TextCharSet *pbCharacterSet);")
cpp_quote("  void __RPC_STUB IDvdInfo2_GetDVDTextLanguageInfo_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo2_GetDVDTextStringAsNative_Proxy(IDvdInfo2 *This,ULONG ulLangIndex,ULONG ulStringIndex,BYTE *pbBuffer,ULONG ulMaxBufferSize,ULONG *pulActualSize,enum DVD_TextStringType *pType);")
cpp_quote("  void __RPC_STUB IDvdInfo2_GetDVDTextStringAsNative_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo2_GetDVDTextStringAsUnicode_Proxy(IDvdInfo2 *This,ULONG ulLangIndex,ULONG ulStringIndex,WCHAR *pchwBuffer,ULONG ulMaxBufferSize,ULONG *pulActualSize,enum DVD_TextStringType *pType);")
cpp_quote("  void __RPC_STUB IDvdInfo2_GetDVDTextStringAsUnicode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo2_GetPlayerParentalLevel_Proxy(IDvdInfo2 *This,ULONG *pulParentalLevel,BYTE pbCountryCode[2]);")
cpp_quote("  void __RPC_STUB IDvdInfo2_GetPlayerParentalLevel_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo2_GetNumberOfChapters_Proxy(IDvdInfo2 *This,ULONG ulTitle,ULONG *pulNumOfChapters);")
cpp_quote("  void __RPC_STUB IDvdInfo2_GetNumberOfChapters_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo2_GetTitleParentalLevels_Proxy(IDvdInfo2 *This,ULONG ulTitle,ULONG *pulParentalLevels);")
cpp_quote("  void __RPC_STUB IDvdInfo2_GetTitleParentalLevels_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo2_GetDVDDirectory_Proxy(IDvdInfo2 *This,LPWSTR pszwPath,ULONG ulMaxSize,ULONG *pulActualSize);")
cpp_quote("  void __RPC_STUB IDvdInfo2_GetDVDDirectory_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo2_IsAudioStreamEnabled_Proxy(IDvdInfo2 *This,ULONG ulStreamNum,WINBOOL *pbEnabled);")
cpp_quote("  void __RPC_STUB IDvdInfo2_IsAudioStreamEnabled_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo2_GetDiscID_Proxy(IDvdInfo2 *This,LPCWSTR pszwPath,ULONGLONG *pullDiscID);")
cpp_quote("  void __RPC_STUB IDvdInfo2_GetDiscID_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo2_GetState_Proxy(IDvdInfo2 *This,IDvdState **pStateData);")
cpp_quote("  void __RPC_STUB IDvdInfo2_GetState_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo2_GetMenuLanguages_Proxy(IDvdInfo2 *This,LCID *pLanguages,ULONG ulMaxLanguages,ULONG *pulActualLanguages);")
cpp_quote("  void __RPC_STUB IDvdInfo2_GetMenuLanguages_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo2_GetButtonAtPosition_Proxy(IDvdInfo2 *This,POINT point,ULONG *pulButtonIndex);")
cpp_quote("  void __RPC_STUB IDvdInfo2_GetButtonAtPosition_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo2_GetCmdFromEvent_Proxy(IDvdInfo2 *This,LONG_PTR lParam1,IDvdCmd **pCmdObj);")
cpp_quote("  void __RPC_STUB IDvdInfo2_GetCmdFromEvent_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo2_GetDefaultMenuLanguage_Proxy(IDvdInfo2 *This,LCID *pLanguage);")
cpp_quote("  void __RPC_STUB IDvdInfo2_GetDefaultMenuLanguage_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo2_GetDefaultAudioLanguage_Proxy(IDvdInfo2 *This,LCID *pLanguage,DVD_AUDIO_LANG_EXT *pAudioExtension);")
cpp_quote("  void __RPC_STUB IDvdInfo2_GetDefaultAudioLanguage_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo2_GetDefaultSubpictureLanguage_Proxy(IDvdInfo2 *This,LCID *pLanguage,DVD_SUBPICTURE_LANG_EXT *pSubpictureExtension);")
cpp_quote("  void __RPC_STUB IDvdInfo2_GetDefaultSubpictureLanguage_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo2_GetDecoderCaps_Proxy(IDvdInfo2 *This,DVD_DECODER_CAPS *pCaps);")
cpp_quote("  void __RPC_STUB IDvdInfo2_GetDecoderCaps_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo2_GetButtonRect_Proxy(IDvdInfo2 *This,ULONG ulButton,RECT *pRect);")
cpp_quote("  void __RPC_STUB IDvdInfo2_GetButtonRect_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdInfo2_IsSubpictureStreamEnabled_Proxy(IDvdInfo2 *This,ULONG ulStreamNum,WINBOOL *pbEnabled);")
cpp_quote("  void __RPC_STUB IDvdInfo2_IsSubpictureStreamEnabled_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  typedef enum _AM_DVD_GRAPH_FLAGS {")
cpp_quote("    AM_DVD_HWDEC_PREFER = 0x1,AM_DVD_HWDEC_ONLY = 0x2,AM_DVD_SWDEC_PREFER = 0x4,AM_DVD_SWDEC_ONLY = 0x8,AM_DVD_NOVPE = 0x100,")
cpp_quote("    AM_DVD_VMR9_ONLY = 0x800")
cpp_quote("  } AM_DVD_GRAPH_FLAGS;")
cpp_quote("")
cpp_quote("  typedef enum _AM_DVD_STREAM_FLAGS {")
cpp_quote("    AM_DVD_STREAM_VIDEO = 0x1,AM_DVD_STREAM_AUDIO = 0x2,AM_DVD_STREAM_SUBPIC = 0x4")
cpp_quote("  } AM_DVD_STREAM_FLAGS;")
cpp_quote("")
cpp_quote("  typedef struct __MIDL___MIDL_itf_strmif_0389_0001 {")
cpp_quote("    HRESULT hrVPEStatus;")
cpp_quote("    WINBOOL bDvdVolInvalid;")
cpp_quote("    WINBOOL bDvdVolUnknown;")
cpp_quote("    WINBOOL bNoLine21In;")
cpp_quote("    WINBOOL bNoLine21Out;")
cpp_quote("    int iNumStreams;")
cpp_quote("    int iNumStreamsFailed;")
cpp_quote("    DWORD dwFailedStreamsFlag;")
cpp_quote("  } AM_DVD_RENDERSTATUS;")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0389_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0389_v0_0_s_ifspec;")
cpp_quote("#ifndef __IDvdGraphBuilder_INTERFACE_DEFINED__")
cpp_quote("#define __IDvdGraphBuilder_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IDvdGraphBuilder;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IDvdGraphBuilder : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI GetFiltergraph(IGraphBuilder **ppGB) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetDvdInterface(REFIID riid,void **ppvIF) = 0;")
cpp_quote("    virtual HRESULT WINAPI RenderDvdVideoVolume(LPCWSTR lpcwszPathName,DWORD dwFlags,AM_DVD_RENDERSTATUS *pStatus) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IDvdGraphBuilderVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IDvdGraphBuilder *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IDvdGraphBuilder *This);")
cpp_quote("      ULONG (WINAPI *Release)(IDvdGraphBuilder *This);")
cpp_quote("      HRESULT (WINAPI *GetFiltergraph)(IDvdGraphBuilder *This,IGraphBuilder **ppGB);")
cpp_quote("      HRESULT (WINAPI *GetDvdInterface)(IDvdGraphBuilder *This,REFIID riid,void **ppvIF);")
cpp_quote("      HRESULT (WINAPI *RenderDvdVideoVolume)(IDvdGraphBuilder *This,LPCWSTR lpcwszPathName,DWORD dwFlags,AM_DVD_RENDERSTATUS *pStatus);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IDvdGraphBuilderVtbl;")
cpp_quote("  struct IDvdGraphBuilder {")
cpp_quote("    CONST_VTBL struct IDvdGraphBuilderVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IDvdGraphBuilder_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IDvdGraphBuilder_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IDvdGraphBuilder_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IDvdGraphBuilder_GetFiltergraph(This,ppGB) (This)->lpVtbl->GetFiltergraph(This,ppGB)")
cpp_quote("#define IDvdGraphBuilder_GetDvdInterface(This,riid,ppvIF) (This)->lpVtbl->GetDvdInterface(This,riid,ppvIF)")
cpp_quote("#define IDvdGraphBuilder_RenderDvdVideoVolume(This,lpcwszPathName,dwFlags,pStatus) (This)->lpVtbl->RenderDvdVideoVolume(This,lpcwszPathName,dwFlags,pStatus)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IDvdGraphBuilder_GetFiltergraph_Proxy(IDvdGraphBuilder *This,IGraphBuilder **ppGB);")
cpp_quote("  void __RPC_STUB IDvdGraphBuilder_GetFiltergraph_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdGraphBuilder_GetDvdInterface_Proxy(IDvdGraphBuilder *This,REFIID riid,void **ppvIF);")
cpp_quote("  void __RPC_STUB IDvdGraphBuilder_GetDvdInterface_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDvdGraphBuilder_RenderDvdVideoVolume_Proxy(IDvdGraphBuilder *This,LPCWSTR lpcwszPathName,DWORD dwFlags,AM_DVD_RENDERSTATUS *pStatus);")
cpp_quote("  void __RPC_STUB IDvdGraphBuilder_RenderDvdVideoVolume_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IDDrawExclModeVideo_INTERFACE_DEFINED__")
cpp_quote("#define __IDDrawExclModeVideo_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IDDrawExclModeVideo;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IDDrawExclModeVideo : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI SetDDrawObject(IDirectDraw *pDDrawObject) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetDDrawObject(IDirectDraw **ppDDrawObject,WINBOOL *pbUsingExternal) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetDDrawSurface(IDirectDrawSurface *pDDrawSurface) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetDDrawSurface(IDirectDrawSurface **ppDDrawSurface,WINBOOL *pbUsingExternal) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetDrawParameters(const RECT *prcSource,const RECT *prcTarget) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetNativeVideoProps(DWORD *pdwVideoWidth,DWORD *pdwVideoHeight,DWORD *pdwPictAspectRatioX,DWORD *pdwPictAspectRatioY) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetCallbackInterface(IDDrawExclModeVideoCallback *pCallback,DWORD dwFlags) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IDDrawExclModeVideoVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IDDrawExclModeVideo *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IDDrawExclModeVideo *This);")
cpp_quote("      ULONG (WINAPI *Release)(IDDrawExclModeVideo *This);")
cpp_quote("      HRESULT (WINAPI *SetDDrawObject)(IDDrawExclModeVideo *This,IDirectDraw *pDDrawObject);")
cpp_quote("      HRESULT (WINAPI *GetDDrawObject)(IDDrawExclModeVideo *This,IDirectDraw **ppDDrawObject,WINBOOL *pbUsingExternal);")
cpp_quote("      HRESULT (WINAPI *SetDDrawSurface)(IDDrawExclModeVideo *This,IDirectDrawSurface *pDDrawSurface);")
cpp_quote("      HRESULT (WINAPI *GetDDrawSurface)(IDDrawExclModeVideo *This,IDirectDrawSurface **ppDDrawSurface,WINBOOL *pbUsingExternal);")
cpp_quote("      HRESULT (WINAPI *SetDrawParameters)(IDDrawExclModeVideo *This,const RECT *prcSource,const RECT *prcTarget);")
cpp_quote("      HRESULT (WINAPI *GetNativeVideoProps)(IDDrawExclModeVideo *This,DWORD *pdwVideoWidth,DWORD *pdwVideoHeight,DWORD *pdwPictAspectRatioX,DWORD *pdwPictAspectRatioY);")
cpp_quote("      HRESULT (WINAPI *SetCallbackInterface)(IDDrawExclModeVideo *This,IDDrawExclModeVideoCallback *pCallback,DWORD dwFlags);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IDDrawExclModeVideoVtbl;")
cpp_quote("  struct IDDrawExclModeVideo {")
cpp_quote("    CONST_VTBL struct IDDrawExclModeVideoVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IDDrawExclModeVideo_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IDDrawExclModeVideo_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IDDrawExclModeVideo_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IDDrawExclModeVideo_SetDDrawObject(This,pDDrawObject) (This)->lpVtbl->SetDDrawObject(This,pDDrawObject)")
cpp_quote("#define IDDrawExclModeVideo_GetDDrawObject(This,ppDDrawObject,pbUsingExternal) (This)->lpVtbl->GetDDrawObject(This,ppDDrawObject,pbUsingExternal)")
cpp_quote("#define IDDrawExclModeVideo_SetDDrawSurface(This,pDDrawSurface) (This)->lpVtbl->SetDDrawSurface(This,pDDrawSurface)")
cpp_quote("#define IDDrawExclModeVideo_GetDDrawSurface(This,ppDDrawSurface,pbUsingExternal) (This)->lpVtbl->GetDDrawSurface(This,ppDDrawSurface,pbUsingExternal)")
cpp_quote("#define IDDrawExclModeVideo_SetDrawParameters(This,prcSource,prcTarget) (This)->lpVtbl->SetDrawParameters(This,prcSource,prcTarget)")
cpp_quote("#define IDDrawExclModeVideo_GetNativeVideoProps(This,pdwVideoWidth,pdwVideoHeight,pdwPictAspectRatioX,pdwPictAspectRatioY) (This)->lpVtbl->GetNativeVideoProps(This,pdwVideoWidth,pdwVideoHeight,pdwPictAspectRatioX,pdwPictAspectRatioY)")
cpp_quote("#define IDDrawExclModeVideo_SetCallbackInterface(This,pCallback,dwFlags) (This)->lpVtbl->SetCallbackInterface(This,pCallback,dwFlags)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IDDrawExclModeVideo_SetDDrawObject_Proxy(IDDrawExclModeVideo *This,IDirectDraw *pDDrawObject);")
cpp_quote("  void __RPC_STUB IDDrawExclModeVideo_SetDDrawObject_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDDrawExclModeVideo_GetDDrawObject_Proxy(IDDrawExclModeVideo *This,IDirectDraw **ppDDrawObject,WINBOOL *pbUsingExternal);")
cpp_quote("  void __RPC_STUB IDDrawExclModeVideo_GetDDrawObject_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDDrawExclModeVideo_SetDDrawSurface_Proxy(IDDrawExclModeVideo *This,IDirectDrawSurface *pDDrawSurface);")
cpp_quote("  void __RPC_STUB IDDrawExclModeVideo_SetDDrawSurface_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDDrawExclModeVideo_GetDDrawSurface_Proxy(IDDrawExclModeVideo *This,IDirectDrawSurface **ppDDrawSurface,WINBOOL *pbUsingExternal);")
cpp_quote("  void __RPC_STUB IDDrawExclModeVideo_GetDDrawSurface_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDDrawExclModeVideo_SetDrawParameters_Proxy(IDDrawExclModeVideo *This,const RECT *prcSource,const RECT *prcTarget);")
cpp_quote("  void __RPC_STUB IDDrawExclModeVideo_SetDrawParameters_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDDrawExclModeVideo_GetNativeVideoProps_Proxy(IDDrawExclModeVideo *This,DWORD *pdwVideoWidth,DWORD *pdwVideoHeight,DWORD *pdwPictAspectRatioX,DWORD *pdwPictAspectRatioY);")
cpp_quote("  void __RPC_STUB IDDrawExclModeVideo_GetNativeVideoProps_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDDrawExclModeVideo_SetCallbackInterface_Proxy(IDDrawExclModeVideo *This,IDDrawExclModeVideoCallback *pCallback,DWORD dwFlags);")
cpp_quote("  void __RPC_STUB IDDrawExclModeVideo_SetCallbackInterface_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  enum _AM_OVERLAY_NOTIFY_FLAGS {")
cpp_quote("    AM_OVERLAY_NOTIFY_VISIBLE_CHANGE = 0x1,AM_OVERLAY_NOTIFY_SOURCE_CHANGE = 0x2,AM_OVERLAY_NOTIFY_DEST_CHANGE = 0x4")
cpp_quote("  };")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0391_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0391_v0_0_s_ifspec;")
cpp_quote("#ifndef __IDDrawExclModeVideoCallback_INTERFACE_DEFINED__")
cpp_quote("#define __IDDrawExclModeVideoCallback_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IDDrawExclModeVideoCallback;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IDDrawExclModeVideoCallback : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI OnUpdateOverlay(WINBOOL bBefore,DWORD dwFlags,WINBOOL bOldVisible,const RECT *prcOldSrc,const RECT *prcOldDest,WINBOOL bNewVisible,const RECT *prcNewSrc,const RECT *prcNewDest) = 0;")
cpp_quote("    virtual HRESULT WINAPI OnUpdateColorKey(const COLORKEY *pKey,DWORD dwColor) = 0;")
cpp_quote("    virtual HRESULT WINAPI OnUpdateSize(DWORD dwWidth,DWORD dwHeight,DWORD dwARWidth,DWORD dwARHeight) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IDDrawExclModeVideoCallbackVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IDDrawExclModeVideoCallback *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IDDrawExclModeVideoCallback *This);")
cpp_quote("      ULONG (WINAPI *Release)(IDDrawExclModeVideoCallback *This);")
cpp_quote("      HRESULT (WINAPI *OnUpdateOverlay)(IDDrawExclModeVideoCallback *This,WINBOOL bBefore,DWORD dwFlags,WINBOOL bOldVisible,const RECT *prcOldSrc,const RECT *prcOldDest,WINBOOL bNewVisible,const RECT *prcNewSrc,const RECT *prcNewDest);")
cpp_quote("      HRESULT (WINAPI *OnUpdateColorKey)(IDDrawExclModeVideoCallback *This,const COLORKEY *pKey,DWORD dwColor);")
cpp_quote("      HRESULT (WINAPI *OnUpdateSize)(IDDrawExclModeVideoCallback *This,DWORD dwWidth,DWORD dwHeight,DWORD dwARWidth,DWORD dwARHeight);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IDDrawExclModeVideoCallbackVtbl;")
cpp_quote("  struct IDDrawExclModeVideoCallback {")
cpp_quote("    CONST_VTBL struct IDDrawExclModeVideoCallbackVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IDDrawExclModeVideoCallback_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IDDrawExclModeVideoCallback_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IDDrawExclModeVideoCallback_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IDDrawExclModeVideoCallback_OnUpdateOverlay(This,bBefore,dwFlags,bOldVisible,prcOldSrc,prcOldDest,bNewVisible,prcNewSrc,prcNewDest) (This)->lpVtbl->OnUpdateOverlay(This,bBefore,dwFlags,bOldVisible,prcOldSrc,prcOldDest,bNewVisible,prcNewSrc,prcNewDest)")
cpp_quote("#define IDDrawExclModeVideoCallback_OnUpdateColorKey(This,pKey,dwColor) (This)->lpVtbl->OnUpdateColorKey(This,pKey,dwColor)")
cpp_quote("#define IDDrawExclModeVideoCallback_OnUpdateSize(This,dwWidth,dwHeight,dwARWidth,dwARHeight) (This)->lpVtbl->OnUpdateSize(This,dwWidth,dwHeight,dwARWidth,dwARHeight)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IDDrawExclModeVideoCallback_OnUpdateOverlay_Proxy(IDDrawExclModeVideoCallback *This,WINBOOL bBefore,DWORD dwFlags,WINBOOL bOldVisible,const RECT *prcOldSrc,const RECT *prcOldDest,WINBOOL bNewVisible,const RECT *prcNewSrc,const RECT *prcNewDest);")
cpp_quote("  void __RPC_STUB IDDrawExclModeVideoCallback_OnUpdateOverlay_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDDrawExclModeVideoCallback_OnUpdateColorKey_Proxy(IDDrawExclModeVideoCallback *This,const COLORKEY *pKey,DWORD dwColor);")
cpp_quote("  void __RPC_STUB IDDrawExclModeVideoCallback_OnUpdateColorKey_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IDDrawExclModeVideoCallback_OnUpdateSize_Proxy(IDDrawExclModeVideoCallback *This,DWORD dwWidth,DWORD dwHeight,DWORD dwARWidth,DWORD dwARHeight);")
cpp_quote("  void __RPC_STUB IDDrawExclModeVideoCallback_OnUpdateSize_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0392_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0392_v0_0_s_ifspec;")
cpp_quote("#ifndef __IPinConnection_INTERFACE_DEFINED__")
cpp_quote("#define __IPinConnection_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IPinConnection;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IPinConnection : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI DynamicQueryAccept(const AM_MEDIA_TYPE *pmt) = 0;")
cpp_quote("    virtual HRESULT WINAPI NotifyEndOfStream(HANDLE hNotifyEvent) = 0;")
cpp_quote("    virtual HRESULT WINAPI IsEndPin(void) = 0;")
cpp_quote("    virtual HRESULT WINAPI DynamicDisconnect(void) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IPinConnectionVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IPinConnection *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IPinConnection *This);")
cpp_quote("      ULONG (WINAPI *Release)(IPinConnection *This);")
cpp_quote("      HRESULT (WINAPI *DynamicQueryAccept)(IPinConnection *This,const AM_MEDIA_TYPE *pmt);")
cpp_quote("      HRESULT (WINAPI *NotifyEndOfStream)(IPinConnection *This,HANDLE hNotifyEvent);")
cpp_quote("      HRESULT (WINAPI *IsEndPin)(IPinConnection *This);")
cpp_quote("      HRESULT (WINAPI *DynamicDisconnect)(IPinConnection *This);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IPinConnectionVtbl;")
cpp_quote("  struct IPinConnection {")
cpp_quote("    CONST_VTBL struct IPinConnectionVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IPinConnection_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IPinConnection_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IPinConnection_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IPinConnection_DynamicQueryAccept(This,pmt) (This)->lpVtbl->DynamicQueryAccept(This,pmt)")
cpp_quote("#define IPinConnection_NotifyEndOfStream(This,hNotifyEvent) (This)->lpVtbl->NotifyEndOfStream(This,hNotifyEvent)")
cpp_quote("#define IPinConnection_IsEndPin(This) (This)->lpVtbl->IsEndPin(This)")
cpp_quote("#define IPinConnection_DynamicDisconnect(This) (This)->lpVtbl->DynamicDisconnect(This)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IPinConnection_DynamicQueryAccept_Proxy(IPinConnection *This,const AM_MEDIA_TYPE *pmt);")
cpp_quote("  void __RPC_STUB IPinConnection_DynamicQueryAccept_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IPinConnection_NotifyEndOfStream_Proxy(IPinConnection *This,HANDLE hNotifyEvent);")
cpp_quote("  void __RPC_STUB IPinConnection_NotifyEndOfStream_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IPinConnection_IsEndPin_Proxy(IPinConnection *This);")
cpp_quote("  void __RPC_STUB IPinConnection_IsEndPin_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IPinConnection_DynamicDisconnect_Proxy(IPinConnection *This);")
cpp_quote("  void __RPC_STUB IPinConnection_DynamicDisconnect_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IPinFlowControl_INTERFACE_DEFINED__")
cpp_quote("#define __IPinFlowControl_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IPinFlowControl;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IPinFlowControl : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI Block(DWORD dwBlockFlags,HANDLE hEvent) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IPinFlowControlVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IPinFlowControl *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IPinFlowControl *This);")
cpp_quote("      ULONG (WINAPI *Release)(IPinFlowControl *This);")
cpp_quote("      HRESULT (WINAPI *Block)(IPinFlowControl *This,DWORD dwBlockFlags,HANDLE hEvent);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IPinFlowControlVtbl;")
cpp_quote("  struct IPinFlowControl {")
cpp_quote("    CONST_VTBL struct IPinFlowControlVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IPinFlowControl_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IPinFlowControl_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IPinFlowControl_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IPinFlowControl_Block(This,dwBlockFlags,hEvent) (This)->lpVtbl->Block(This,dwBlockFlags,hEvent)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IPinFlowControl_Block_Proxy(IPinFlowControl *This,DWORD dwBlockFlags,HANDLE hEvent);")
cpp_quote("  void __RPC_STUB IPinFlowControl_Block_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  enum _AM_PIN_FLOW_CONTROL_BLOCK_FLAGS {")
cpp_quote("    AM_PIN_FLOW_CONTROL_BLOCK = 0x1")
cpp_quote("  };")
cpp_quote("  typedef enum _AM_GRAPH_CONFIG_RECONNECT_FLAGS {")
cpp_quote("    AM_GRAPH_CONFIG_RECONNECT_DIRECTCONNECT = 0x1,AM_GRAPH_CONFIG_RECONNECT_CACHE_REMOVED_FILTERS = 0x2,")
cpp_quote("    AM_GRAPH_CONFIG_RECONNECT_USE_ONLY_CACHED_FILTERS = 0x4")
cpp_quote("  } AM_GRAPH_CONFIG_RECONNECT_FLAGS;")
cpp_quote("")
cpp_quote("  enum _REM_FILTER_FLAGS {")
cpp_quote("    REMFILTERF_LEAVECONNECTED = 0x1")
cpp_quote("  };")
cpp_quote("")
cpp_quote("  typedef enum _AM_FILTER_FLAGS {")
cpp_quote("    AM_FILTER_FLAGS_REMOVABLE = 0x1")
cpp_quote("  } AM_FILTER_FLAGS;")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0394_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0394_v0_0_s_ifspec;")
cpp_quote("#ifndef __IGraphConfig_INTERFACE_DEFINED__")
cpp_quote("#define __IGraphConfig_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IGraphConfig;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IGraphConfig : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI Reconnect(IPin *pOutputPin,IPin *pInputPin,const AM_MEDIA_TYPE *pmtFirstConnection,IBaseFilter *pUsingFilter,HANDLE hAbortEvent,DWORD dwFlags) = 0;")
cpp_quote("    virtual HRESULT WINAPI Reconfigure(IGraphConfigCallback *pCallback,PVOID pvContext,DWORD dwFlags,HANDLE hAbortEvent) = 0;")
cpp_quote("    virtual HRESULT WINAPI AddFilterToCache(IBaseFilter *pFilter) = 0;")
cpp_quote("    virtual HRESULT WINAPI EnumCacheFilter(IEnumFilters **pEnum) = 0;")
cpp_quote("    virtual HRESULT WINAPI RemoveFilterFromCache(IBaseFilter *pFilter) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetStartTime(REFERENCE_TIME *prtStart) = 0;")
cpp_quote("    virtual HRESULT WINAPI PushThroughData(IPin *pOutputPin,IPinConnection *pConnection,HANDLE hEventAbort) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetFilterFlags(IBaseFilter *pFilter,DWORD dwFlags) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetFilterFlags(IBaseFilter *pFilter,DWORD *pdwFlags) = 0;")
cpp_quote("    virtual HRESULT WINAPI RemoveFilterEx(IBaseFilter *pFilter,DWORD Flags) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IGraphConfigVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IGraphConfig *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IGraphConfig *This);")
cpp_quote("      ULONG (WINAPI *Release)(IGraphConfig *This);")
cpp_quote("      HRESULT (WINAPI *Reconnect)(IGraphConfig *This,IPin *pOutputPin,IPin *pInputPin,const AM_MEDIA_TYPE *pmtFirstConnection,IBaseFilter *pUsingFilter,HANDLE hAbortEvent,DWORD dwFlags);")
cpp_quote("      HRESULT (WINAPI *Reconfigure)(IGraphConfig *This,IGraphConfigCallback *pCallback,PVOID pvContext,DWORD dwFlags,HANDLE hAbortEvent);")
cpp_quote("      HRESULT (WINAPI *AddFilterToCache)(IGraphConfig *This,IBaseFilter *pFilter);")
cpp_quote("      HRESULT (WINAPI *EnumCacheFilter)(IGraphConfig *This,IEnumFilters **pEnum);")
cpp_quote("      HRESULT (WINAPI *RemoveFilterFromCache)(IGraphConfig *This,IBaseFilter *pFilter);")
cpp_quote("      HRESULT (WINAPI *GetStartTime)(IGraphConfig *This,REFERENCE_TIME *prtStart);")
cpp_quote("      HRESULT (WINAPI *PushThroughData)(IGraphConfig *This,IPin *pOutputPin,IPinConnection *pConnection,HANDLE hEventAbort);")
cpp_quote("      HRESULT (WINAPI *SetFilterFlags)(IGraphConfig *This,IBaseFilter *pFilter,DWORD dwFlags);")
cpp_quote("      HRESULT (WINAPI *GetFilterFlags)(IGraphConfig *This,IBaseFilter *pFilter,DWORD *pdwFlags);")
cpp_quote("      HRESULT (WINAPI *RemoveFilterEx)(IGraphConfig *This,IBaseFilter *pFilter,DWORD Flags);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IGraphConfigVtbl;")
cpp_quote("  struct IGraphConfig {")
cpp_quote("    CONST_VTBL struct IGraphConfigVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IGraphConfig_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IGraphConfig_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IGraphConfig_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IGraphConfig_Reconnect(This,pOutputPin,pInputPin,pmtFirstConnection,pUsingFilter,hAbortEvent,dwFlags) (This)->lpVtbl->Reconnect(This,pOutputPin,pInputPin,pmtFirstConnection,pUsingFilter,hAbortEvent,dwFlags)")
cpp_quote("#define IGraphConfig_Reconfigure(This,pCallback,pvContext,dwFlags,hAbortEvent) (This)->lpVtbl->Reconfigure(This,pCallback,pvContext,dwFlags,hAbortEvent)")
cpp_quote("#define IGraphConfig_AddFilterToCache(This,pFilter) (This)->lpVtbl->AddFilterToCache(This,pFilter)")
cpp_quote("#define IGraphConfig_EnumCacheFilter(This,pEnum) (This)->lpVtbl->EnumCacheFilter(This,pEnum)")
cpp_quote("#define IGraphConfig_RemoveFilterFromCache(This,pFilter) (This)->lpVtbl->RemoveFilterFromCache(This,pFilter)")
cpp_quote("#define IGraphConfig_GetStartTime(This,prtStart) (This)->lpVtbl->GetStartTime(This,prtStart)")
cpp_quote("#define IGraphConfig_PushThroughData(This,pOutputPin,pConnection,hEventAbort) (This)->lpVtbl->PushThroughData(This,pOutputPin,pConnection,hEventAbort)")
cpp_quote("#define IGraphConfig_SetFilterFlags(This,pFilter,dwFlags) (This)->lpVtbl->SetFilterFlags(This,pFilter,dwFlags)")
cpp_quote("#define IGraphConfig_GetFilterFlags(This,pFilter,pdwFlags) (This)->lpVtbl->GetFilterFlags(This,pFilter,pdwFlags)")
cpp_quote("#define IGraphConfig_RemoveFilterEx(This,pFilter,Flags) (This)->lpVtbl->RemoveFilterEx(This,pFilter,Flags)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IGraphConfig_Reconnect_Proxy(IGraphConfig *This,IPin *pOutputPin,IPin *pInputPin,const AM_MEDIA_TYPE *pmtFirstConnection,IBaseFilter *pUsingFilter,HANDLE hAbortEvent,DWORD dwFlags);")
cpp_quote("  void __RPC_STUB IGraphConfig_Reconnect_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IGraphConfig_Reconfigure_Proxy(IGraphConfig *This,IGraphConfigCallback *pCallback,PVOID pvContext,DWORD dwFlags,HANDLE hAbortEvent);")
cpp_quote("  void __RPC_STUB IGraphConfig_Reconfigure_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IGraphConfig_AddFilterToCache_Proxy(IGraphConfig *This,IBaseFilter *pFilter);")
cpp_quote("  void __RPC_STUB IGraphConfig_AddFilterToCache_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IGraphConfig_EnumCacheFilter_Proxy(IGraphConfig *This,IEnumFilters **pEnum);")
cpp_quote("  void __RPC_STUB IGraphConfig_EnumCacheFilter_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IGraphConfig_RemoveFilterFromCache_Proxy(IGraphConfig *This,IBaseFilter *pFilter);")
cpp_quote("  void __RPC_STUB IGraphConfig_RemoveFilterFromCache_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IGraphConfig_GetStartTime_Proxy(IGraphConfig *This,REFERENCE_TIME *prtStart);")
cpp_quote("  void __RPC_STUB IGraphConfig_GetStartTime_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IGraphConfig_PushThroughData_Proxy(IGraphConfig *This,IPin *pOutputPin,IPinConnection *pConnection,HANDLE hEventAbort);")
cpp_quote("  void __RPC_STUB IGraphConfig_PushThroughData_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IGraphConfig_SetFilterFlags_Proxy(IGraphConfig *This,IBaseFilter *pFilter,DWORD dwFlags);")
cpp_quote("  void __RPC_STUB IGraphConfig_SetFilterFlags_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IGraphConfig_GetFilterFlags_Proxy(IGraphConfig *This,IBaseFilter *pFilter,DWORD *pdwFlags);")
cpp_quote("  void __RPC_STUB IGraphConfig_GetFilterFlags_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IGraphConfig_RemoveFilterEx_Proxy(IGraphConfig *This,IBaseFilter *pFilter,DWORD Flags);")
cpp_quote("  void __RPC_STUB IGraphConfig_RemoveFilterEx_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IGraphConfigCallback_INTERFACE_DEFINED__")
cpp_quote("#define __IGraphConfigCallback_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IGraphConfigCallback;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IGraphConfigCallback : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI Reconfigure(PVOID pvContext,DWORD dwFlags) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IGraphConfigCallbackVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IGraphConfigCallback *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IGraphConfigCallback *This);")
cpp_quote("      ULONG (WINAPI *Release)(IGraphConfigCallback *This);")
cpp_quote("      HRESULT (WINAPI *Reconfigure)(IGraphConfigCallback *This,PVOID pvContext,DWORD dwFlags);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IGraphConfigCallbackVtbl;")
cpp_quote("  struct IGraphConfigCallback {")
cpp_quote("    CONST_VTBL struct IGraphConfigCallbackVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IGraphConfigCallback_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IGraphConfigCallback_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IGraphConfigCallback_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IGraphConfigCallback_Reconfigure(This,pvContext,dwFlags) (This)->lpVtbl->Reconfigure(This,pvContext,dwFlags)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IGraphConfigCallback_Reconfigure_Proxy(IGraphConfigCallback *This,PVOID pvContext,DWORD dwFlags);")
cpp_quote("  void __RPC_STUB IGraphConfigCallback_Reconfigure_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IFilterChain_INTERFACE_DEFINED__")
cpp_quote("#define __IFilterChain_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IFilterChain;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IFilterChain : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI StartChain(IBaseFilter *pStartFilter,IBaseFilter *pEndFilter) = 0;")
cpp_quote("    virtual HRESULT WINAPI PauseChain(IBaseFilter *pStartFilter,IBaseFilter *pEndFilter) = 0;")
cpp_quote("    virtual HRESULT WINAPI StopChain(IBaseFilter *pStartFilter,IBaseFilter *pEndFilter) = 0;")
cpp_quote("    virtual HRESULT WINAPI RemoveChain(IBaseFilter *pStartFilter,IBaseFilter *pEndFilter) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IFilterChainVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IFilterChain *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IFilterChain *This);")
cpp_quote("      ULONG (WINAPI *Release)(IFilterChain *This);")
cpp_quote("      HRESULT (WINAPI *StartChain)(IFilterChain *This,IBaseFilter *pStartFilter,IBaseFilter *pEndFilter);")
cpp_quote("      HRESULT (WINAPI *PauseChain)(IFilterChain *This,IBaseFilter *pStartFilter,IBaseFilter *pEndFilter);")
cpp_quote("      HRESULT (WINAPI *StopChain)(IFilterChain *This,IBaseFilter *pStartFilter,IBaseFilter *pEndFilter);")
cpp_quote("      HRESULT (WINAPI *RemoveChain)(IFilterChain *This,IBaseFilter *pStartFilter,IBaseFilter *pEndFilter);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IFilterChainVtbl;")
cpp_quote("  struct IFilterChain {")
cpp_quote("    CONST_VTBL struct IFilterChainVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IFilterChain_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IFilterChain_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IFilterChain_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IFilterChain_StartChain(This,pStartFilter,pEndFilter) (This)->lpVtbl->StartChain(This,pStartFilter,pEndFilter)")
cpp_quote("#define IFilterChain_PauseChain(This,pStartFilter,pEndFilter) (This)->lpVtbl->PauseChain(This,pStartFilter,pEndFilter)")
cpp_quote("#define IFilterChain_StopChain(This,pStartFilter,pEndFilter) (This)->lpVtbl->StopChain(This,pStartFilter,pEndFilter)")
cpp_quote("#define IFilterChain_RemoveChain(This,pStartFilter,pEndFilter) (This)->lpVtbl->RemoveChain(This,pStartFilter,pEndFilter)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IFilterChain_StartChain_Proxy(IFilterChain *This,IBaseFilter *pStartFilter,IBaseFilter *pEndFilter);")
cpp_quote("  void __RPC_STUB IFilterChain_StartChain_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IFilterChain_PauseChain_Proxy(IFilterChain *This,IBaseFilter *pStartFilter,IBaseFilter *pEndFilter);")
cpp_quote("  void __RPC_STUB IFilterChain_PauseChain_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IFilterChain_StopChain_Proxy(IFilterChain *This,IBaseFilter *pStartFilter,IBaseFilter *pEndFilter);")
cpp_quote("  void __RPC_STUB IFilterChain_StopChain_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IFilterChain_RemoveChain_Proxy(IFilterChain *This,IBaseFilter *pStartFilter,IBaseFilter *pEndFilter);")
cpp_quote("  void __RPC_STUB IFilterChain_RemoveChain_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifdef MINGW_HAS_DDRAW_H")
cpp_quote("#include <ddraw.h>")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  typedef enum __MIDL___MIDL_itf_strmif_0397_0002 {")
cpp_quote("    VMRSample_SyncPoint = 0x1,VMRSample_Preroll = 0x2,VMRSample_Discontinuity = 0x4,VMRSample_TimeValid = 0x8,VMRSample_SrcDstRectsValid = 0x10")
cpp_quote("  } VMRPresentationFlags;")
cpp_quote("")
cpp_quote("  typedef struct tagVMRPRESENTATIONINFO {")
cpp_quote("    DWORD dwFlags;")
cpp_quote("    LPDIRECTDRAWSURFACE7 lpSurf;")
cpp_quote("    REFERENCE_TIME rtStart;")
cpp_quote("    REFERENCE_TIME rtEnd;")
cpp_quote("    SIZE szAspectRatio;")
cpp_quote("    RECT rcSrc;")
cpp_quote("    RECT rcDst;")
cpp_quote("    DWORD dwTypeSpecificFlags;")
cpp_quote("    DWORD dwInterlaceFlags;")
cpp_quote("  } VMRPRESENTATIONINFO;")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0397_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0397_v0_0_s_ifspec;")
cpp_quote("#ifndef __IVMRImagePresenter_INTERFACE_DEFINED__")
cpp_quote("#define __IVMRImagePresenter_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IVMRImagePresenter;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IVMRImagePresenter : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI StartPresenting(DWORD_PTR dwUserID) = 0;")
cpp_quote("    virtual HRESULT WINAPI StopPresenting(DWORD_PTR dwUserID) = 0;")
cpp_quote("    virtual HRESULT WINAPI PresentImage(DWORD_PTR dwUserID,VMRPRESENTATIONINFO *lpPresInfo) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IVMRImagePresenterVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IVMRImagePresenter *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IVMRImagePresenter *This);")
cpp_quote("      ULONG (WINAPI *Release)(IVMRImagePresenter *This);")
cpp_quote("      HRESULT (WINAPI *StartPresenting)(IVMRImagePresenter *This,DWORD_PTR dwUserID);")
cpp_quote("      HRESULT (WINAPI *StopPresenting)(IVMRImagePresenter *This,DWORD_PTR dwUserID);")
cpp_quote("      HRESULT (WINAPI *PresentImage)(IVMRImagePresenter *This,DWORD_PTR dwUserID,VMRPRESENTATIONINFO *lpPresInfo);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IVMRImagePresenterVtbl;")
cpp_quote("  struct IVMRImagePresenter {")
cpp_quote("    CONST_VTBL struct IVMRImagePresenterVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IVMRImagePresenter_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IVMRImagePresenter_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IVMRImagePresenter_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IVMRImagePresenter_StartPresenting(This,dwUserID) (This)->lpVtbl->StartPresenting(This,dwUserID)")
cpp_quote("#define IVMRImagePresenter_StopPresenting(This,dwUserID) (This)->lpVtbl->StopPresenting(This,dwUserID)")
cpp_quote("#define IVMRImagePresenter_PresentImage(This,dwUserID,lpPresInfo) (This)->lpVtbl->PresentImage(This,dwUserID,lpPresInfo)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IVMRImagePresenter_StartPresenting_Proxy(IVMRImagePresenter *This,DWORD_PTR dwUserID);")
cpp_quote("  void __RPC_STUB IVMRImagePresenter_StartPresenting_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRImagePresenter_StopPresenting_Proxy(IVMRImagePresenter *This,DWORD_PTR dwUserID);")
cpp_quote("  void __RPC_STUB IVMRImagePresenter_StopPresenting_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRImagePresenter_PresentImage_Proxy(IVMRImagePresenter *This,DWORD_PTR dwUserID,VMRPRESENTATIONINFO *lpPresInfo);")
cpp_quote("  void __RPC_STUB IVMRImagePresenter_PresentImage_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  typedef enum __MIDL___MIDL_itf_strmif_0398_0001 {")
cpp_quote("    AMAP_PIXELFORMAT_VALID = 0x1,AMAP_3D_TARGET = 0x2,AMAP_ALLOW_SYSMEM = 0x4,AMAP_FORCE_SYSMEM = 0x8,AMAP_DIRECTED_FLIP = 0x10,AMAP_DXVA_TARGET = 0x20")
cpp_quote("  } VMRSurfaceAllocationFlags;")
cpp_quote("")
cpp_quote("  typedef struct tagVMRALLOCATIONINFO {")
cpp_quote("    DWORD dwFlags;")
cpp_quote("    LPBITMAPINFOHEADER lpHdr;")
cpp_quote("    LPDDPIXELFORMAT lpPixFmt;")
cpp_quote("    SIZE szAspectRatio;")
cpp_quote("    DWORD dwMinBuffers;")
cpp_quote("    DWORD dwMaxBuffers;")
cpp_quote("    DWORD dwInterlaceFlags;")
cpp_quote("    SIZE szNativeSize;")
cpp_quote("  } VMRALLOCATIONINFO;")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0398_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0398_v0_0_s_ifspec;")
cpp_quote("#ifndef __IVMRSurfaceAllocator_INTERFACE_DEFINED__")
cpp_quote("#define __IVMRSurfaceAllocator_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IVMRSurfaceAllocator;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IVMRSurfaceAllocator : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI AllocateSurface(DWORD_PTR dwUserID,VMRALLOCATIONINFO *lpAllocInfo,DWORD *lpdwActualBuffers,LPDIRECTDRAWSURFACE7 *lplpSurface) = 0;")
cpp_quote("    virtual HRESULT WINAPI FreeSurface(DWORD_PTR dwID) = 0;")
cpp_quote("    virtual HRESULT WINAPI PrepareSurface(DWORD_PTR dwUserID,LPDIRECTDRAWSURFACE7 lpSurface,DWORD dwSurfaceFlags) = 0;")
cpp_quote("    virtual HRESULT WINAPI AdviseNotify(IVMRSurfaceAllocatorNotify *lpIVMRSurfAllocNotify) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IVMRSurfaceAllocatorVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IVMRSurfaceAllocator *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IVMRSurfaceAllocator *This);")
cpp_quote("      ULONG (WINAPI *Release)(IVMRSurfaceAllocator *This);")
cpp_quote("      HRESULT (WINAPI *AllocateSurface)(IVMRSurfaceAllocator *This,DWORD_PTR dwUserID,VMRALLOCATIONINFO *lpAllocInfo,DWORD *lpdwActualBuffers,LPDIRECTDRAWSURFACE7 *lplpSurface);")
cpp_quote("      HRESULT (WINAPI *FreeSurface)(IVMRSurfaceAllocator *This,DWORD_PTR dwID);")
cpp_quote("      HRESULT (WINAPI *PrepareSurface)(IVMRSurfaceAllocator *This,DWORD_PTR dwUserID,LPDIRECTDRAWSURFACE7 lpSurface,DWORD dwSurfaceFlags);")
cpp_quote("      HRESULT (WINAPI *AdviseNotify)(IVMRSurfaceAllocator *This,IVMRSurfaceAllocatorNotify *lpIVMRSurfAllocNotify);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IVMRSurfaceAllocatorVtbl;")
cpp_quote("  struct IVMRSurfaceAllocator {")
cpp_quote("    CONST_VTBL struct IVMRSurfaceAllocatorVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IVMRSurfaceAllocator_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IVMRSurfaceAllocator_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IVMRSurfaceAllocator_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IVMRSurfaceAllocator_AllocateSurface(This,dwUserID,lpAllocInfo,lpdwActualBuffers,lplpSurface) (This)->lpVtbl->AllocateSurface(This,dwUserID,lpAllocInfo,lpdwActualBuffers,lplpSurface)")
cpp_quote("#define IVMRSurfaceAllocator_FreeSurface(This,dwID) (This)->lpVtbl->FreeSurface(This,dwID)")
cpp_quote("#define IVMRSurfaceAllocator_PrepareSurface(This,dwUserID,lpSurface,dwSurfaceFlags) (This)->lpVtbl->PrepareSurface(This,dwUserID,lpSurface,dwSurfaceFlags)")
cpp_quote("#define IVMRSurfaceAllocator_AdviseNotify(This,lpIVMRSurfAllocNotify) (This)->lpVtbl->AdviseNotify(This,lpIVMRSurfAllocNotify)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IVMRSurfaceAllocator_AllocateSurface_Proxy(IVMRSurfaceAllocator *This,DWORD_PTR dwUserID,VMRALLOCATIONINFO *lpAllocInfo,DWORD *lpdwActualBuffers,LPDIRECTDRAWSURFACE7 *lplpSurface);")
cpp_quote("  void __RPC_STUB IVMRSurfaceAllocator_AllocateSurface_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRSurfaceAllocator_FreeSurface_Proxy(IVMRSurfaceAllocator *This,DWORD_PTR dwID);")
cpp_quote("  void __RPC_STUB IVMRSurfaceAllocator_FreeSurface_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRSurfaceAllocator_PrepareSurface_Proxy(IVMRSurfaceAllocator *This,DWORD_PTR dwUserID,LPDIRECTDRAWSURFACE7 lpSurface,DWORD dwSurfaceFlags);")
cpp_quote("  void __RPC_STUB IVMRSurfaceAllocator_PrepareSurface_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRSurfaceAllocator_AdviseNotify_Proxy(IVMRSurfaceAllocator *This,IVMRSurfaceAllocatorNotify *lpIVMRSurfAllocNotify);")
cpp_quote("  void __RPC_STUB IVMRSurfaceAllocator_AdviseNotify_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IVMRSurfaceAllocatorNotify_INTERFACE_DEFINED__")
cpp_quote("#define __IVMRSurfaceAllocatorNotify_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IVMRSurfaceAllocatorNotify;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IVMRSurfaceAllocatorNotify : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI AdviseSurfaceAllocator(DWORD_PTR dwUserID,IVMRSurfaceAllocator *lpIVRMSurfaceAllocator) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetDDrawDevice(LPDIRECTDRAW7 lpDDrawDevice,HMONITOR hMonitor) = 0;")
cpp_quote("    virtual HRESULT WINAPI ChangeDDrawDevice(LPDIRECTDRAW7 lpDDrawDevice,HMONITOR hMonitor) = 0;")
cpp_quote("    virtual HRESULT WINAPI RestoreDDrawSurfaces(void) = 0;")
cpp_quote("    virtual HRESULT WINAPI NotifyEvent(LONG EventCode,LONG_PTR Param1,LONG_PTR Param2) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetBorderColor(COLORREF clrBorder) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IVMRSurfaceAllocatorNotifyVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IVMRSurfaceAllocatorNotify *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IVMRSurfaceAllocatorNotify *This);")
cpp_quote("      ULONG (WINAPI *Release)(IVMRSurfaceAllocatorNotify *This);")
cpp_quote("      HRESULT (WINAPI *AdviseSurfaceAllocator)(IVMRSurfaceAllocatorNotify *This,DWORD_PTR dwUserID,IVMRSurfaceAllocator *lpIVRMSurfaceAllocator);")
cpp_quote("      HRESULT (WINAPI *SetDDrawDevice)(IVMRSurfaceAllocatorNotify *This,LPDIRECTDRAW7 lpDDrawDevice,HMONITOR hMonitor);")
cpp_quote("      HRESULT (WINAPI *ChangeDDrawDevice)(IVMRSurfaceAllocatorNotify *This,LPDIRECTDRAW7 lpDDrawDevice,HMONITOR hMonitor);")
cpp_quote("      HRESULT (WINAPI *RestoreDDrawSurfaces)(IVMRSurfaceAllocatorNotify *This);")
cpp_quote("      HRESULT (WINAPI *NotifyEvent)(IVMRSurfaceAllocatorNotify *This,LONG EventCode,LONG_PTR Param1,LONG_PTR Param2);")
cpp_quote("      HRESULT (WINAPI *SetBorderColor)(IVMRSurfaceAllocatorNotify *This,COLORREF clrBorder);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IVMRSurfaceAllocatorNotifyVtbl;")
cpp_quote("  struct IVMRSurfaceAllocatorNotify {")
cpp_quote("    CONST_VTBL struct IVMRSurfaceAllocatorNotifyVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IVMRSurfaceAllocatorNotify_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IVMRSurfaceAllocatorNotify_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IVMRSurfaceAllocatorNotify_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IVMRSurfaceAllocatorNotify_AdviseSurfaceAllocator(This,dwUserID,lpIVRMSurfaceAllocator) (This)->lpVtbl->AdviseSurfaceAllocator(This,dwUserID,lpIVRMSurfaceAllocator)")
cpp_quote("#define IVMRSurfaceAllocatorNotify_SetDDrawDevice(This,lpDDrawDevice,hMonitor) (This)->lpVtbl->SetDDrawDevice(This,lpDDrawDevice,hMonitor)")
cpp_quote("#define IVMRSurfaceAllocatorNotify_ChangeDDrawDevice(This,lpDDrawDevice,hMonitor) (This)->lpVtbl->ChangeDDrawDevice(This,lpDDrawDevice,hMonitor)")
cpp_quote("#define IVMRSurfaceAllocatorNotify_RestoreDDrawSurfaces(This) (This)->lpVtbl->RestoreDDrawSurfaces(This)")
cpp_quote("#define IVMRSurfaceAllocatorNotify_NotifyEvent(This,EventCode,Param1,Param2) (This)->lpVtbl->NotifyEvent(This,EventCode,Param1,Param2)")
cpp_quote("#define IVMRSurfaceAllocatorNotify_SetBorderColor(This,clrBorder) (This)->lpVtbl->SetBorderColor(This,clrBorder)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IVMRSurfaceAllocatorNotify_AdviseSurfaceAllocator_Proxy(IVMRSurfaceAllocatorNotify *This,DWORD_PTR dwUserID,IVMRSurfaceAllocator *lpIVRMSurfaceAllocator);")
cpp_quote("  void __RPC_STUB IVMRSurfaceAllocatorNotify_AdviseSurfaceAllocator_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRSurfaceAllocatorNotify_SetDDrawDevice_Proxy(IVMRSurfaceAllocatorNotify *This,LPDIRECTDRAW7 lpDDrawDevice,HMONITOR hMonitor);")
cpp_quote("  void __RPC_STUB IVMRSurfaceAllocatorNotify_SetDDrawDevice_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRSurfaceAllocatorNotify_ChangeDDrawDevice_Proxy(IVMRSurfaceAllocatorNotify *This,LPDIRECTDRAW7 lpDDrawDevice,HMONITOR hMonitor);")
cpp_quote("  void __RPC_STUB IVMRSurfaceAllocatorNotify_ChangeDDrawDevice_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRSurfaceAllocatorNotify_RestoreDDrawSurfaces_Proxy(IVMRSurfaceAllocatorNotify *This);")
cpp_quote("  void __RPC_STUB IVMRSurfaceAllocatorNotify_RestoreDDrawSurfaces_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRSurfaceAllocatorNotify_NotifyEvent_Proxy(IVMRSurfaceAllocatorNotify *This,LONG EventCode,LONG_PTR Param1,LONG_PTR Param2);")
cpp_quote("  void __RPC_STUB IVMRSurfaceAllocatorNotify_NotifyEvent_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRSurfaceAllocatorNotify_SetBorderColor_Proxy(IVMRSurfaceAllocatorNotify *This,COLORREF clrBorder);")
cpp_quote("  void __RPC_STUB IVMRSurfaceAllocatorNotify_SetBorderColor_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  typedef enum __MIDL___MIDL_itf_strmif_0400_0001 {")
cpp_quote("    VMR_ARMODE_NONE = 0,VMR_ARMODE_LETTER_BOX = VMR_ARMODE_NONE + 1")
cpp_quote("  } VMR_ASPECT_RATIO_MODE;")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0400_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0400_v0_0_s_ifspec;")
cpp_quote("#ifndef __IVMRWindowlessControl_INTERFACE_DEFINED__")
cpp_quote("#define __IVMRWindowlessControl_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IVMRWindowlessControl;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IVMRWindowlessControl : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI GetNativeVideoSize(LONG *lpWidth,LONG *lpHeight,LONG *lpARWidth,LONG *lpARHeight) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetMinIdealVideoSize(LONG *lpWidth,LONG *lpHeight) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetMaxIdealVideoSize(LONG *lpWidth,LONG *lpHeight) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetVideoPosition(const LPRECT lpSRCRect,const LPRECT lpDSTRect) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetVideoPosition(LPRECT lpSRCRect,LPRECT lpDSTRect) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetAspectRatioMode(DWORD *lpAspectRatioMode) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetAspectRatioMode(DWORD AspectRatioMode) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetVideoClippingWindow(HWND hwnd) = 0;")
cpp_quote("    virtual HRESULT WINAPI RepaintVideo(HWND hwnd,HDC hdc) = 0;")
cpp_quote("    virtual HRESULT WINAPI DisplayModeChanged(void) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetCurrentImage(BYTE **lpDib) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetBorderColor(COLORREF Clr) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetBorderColor(COLORREF *lpClr) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetColorKey(COLORREF Clr) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetColorKey(COLORREF *lpClr) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IVMRWindowlessControlVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IVMRWindowlessControl *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IVMRWindowlessControl *This);")
cpp_quote("      ULONG (WINAPI *Release)(IVMRWindowlessControl *This);")
cpp_quote("      HRESULT (WINAPI *GetNativeVideoSize)(IVMRWindowlessControl *This,LONG *lpWidth,LONG *lpHeight,LONG *lpARWidth,LONG *lpARHeight);")
cpp_quote("      HRESULT (WINAPI *GetMinIdealVideoSize)(IVMRWindowlessControl *This,LONG *lpWidth,LONG *lpHeight);")
cpp_quote("      HRESULT (WINAPI *GetMaxIdealVideoSize)(IVMRWindowlessControl *This,LONG *lpWidth,LONG *lpHeight);")
cpp_quote("      HRESULT (WINAPI *SetVideoPosition)(IVMRWindowlessControl *This,const LPRECT lpSRCRect,const LPRECT lpDSTRect);")
cpp_quote("      HRESULT (WINAPI *GetVideoPosition)(IVMRWindowlessControl *This,LPRECT lpSRCRect,LPRECT lpDSTRect);")
cpp_quote("      HRESULT (WINAPI *GetAspectRatioMode)(IVMRWindowlessControl *This,DWORD *lpAspectRatioMode);")
cpp_quote("      HRESULT (WINAPI *SetAspectRatioMode)(IVMRWindowlessControl *This,DWORD AspectRatioMode);")
cpp_quote("      HRESULT (WINAPI *SetVideoClippingWindow)(IVMRWindowlessControl *This,HWND hwnd);")
cpp_quote("      HRESULT (WINAPI *RepaintVideo)(IVMRWindowlessControl *This,HWND hwnd,HDC hdc);")
cpp_quote("      HRESULT (WINAPI *DisplayModeChanged)(IVMRWindowlessControl *This);")
cpp_quote("      HRESULT (WINAPI *GetCurrentImage)(IVMRWindowlessControl *This,BYTE **lpDib);")
cpp_quote("      HRESULT (WINAPI *SetBorderColor)(IVMRWindowlessControl *This,COLORREF Clr);")
cpp_quote("      HRESULT (WINAPI *GetBorderColor)(IVMRWindowlessControl *This,COLORREF *lpClr);")
cpp_quote("      HRESULT (WINAPI *SetColorKey)(IVMRWindowlessControl *This,COLORREF Clr);")
cpp_quote("      HRESULT (WINAPI *GetColorKey)(IVMRWindowlessControl *This,COLORREF *lpClr);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IVMRWindowlessControlVtbl;")
cpp_quote("  struct IVMRWindowlessControl {")
cpp_quote("    CONST_VTBL struct IVMRWindowlessControlVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IVMRWindowlessControl_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IVMRWindowlessControl_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IVMRWindowlessControl_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IVMRWindowlessControl_GetNativeVideoSize(This,lpWidth,lpHeight,lpARWidth,lpARHeight) (This)->lpVtbl->GetNativeVideoSize(This,lpWidth,lpHeight,lpARWidth,lpARHeight)")
cpp_quote("#define IVMRWindowlessControl_GetMinIdealVideoSize(This,lpWidth,lpHeight) (This)->lpVtbl->GetMinIdealVideoSize(This,lpWidth,lpHeight)")
cpp_quote("#define IVMRWindowlessControl_GetMaxIdealVideoSize(This,lpWidth,lpHeight) (This)->lpVtbl->GetMaxIdealVideoSize(This,lpWidth,lpHeight)")
cpp_quote("#define IVMRWindowlessControl_SetVideoPosition(This,lpSRCRect,lpDSTRect) (This)->lpVtbl->SetVideoPosition(This,lpSRCRect,lpDSTRect)")
cpp_quote("#define IVMRWindowlessControl_GetVideoPosition(This,lpSRCRect,lpDSTRect) (This)->lpVtbl->GetVideoPosition(This,lpSRCRect,lpDSTRect)")
cpp_quote("#define IVMRWindowlessControl_GetAspectRatioMode(This,lpAspectRatioMode) (This)->lpVtbl->GetAspectRatioMode(This,lpAspectRatioMode)")
cpp_quote("#define IVMRWindowlessControl_SetAspectRatioMode(This,AspectRatioMode) (This)->lpVtbl->SetAspectRatioMode(This,AspectRatioMode)")
cpp_quote("#define IVMRWindowlessControl_SetVideoClippingWindow(This,hwnd) (This)->lpVtbl->SetVideoClippingWindow(This,hwnd)")
cpp_quote("#define IVMRWindowlessControl_RepaintVideo(This,hwnd,hdc) (This)->lpVtbl->RepaintVideo(This,hwnd,hdc)")
cpp_quote("#define IVMRWindowlessControl_DisplayModeChanged(This) (This)->lpVtbl->DisplayModeChanged(This)")
cpp_quote("#define IVMRWindowlessControl_GetCurrentImage(This,lpDib) (This)->lpVtbl->GetCurrentImage(This,lpDib)")
cpp_quote("#define IVMRWindowlessControl_SetBorderColor(This,Clr) (This)->lpVtbl->SetBorderColor(This,Clr)")
cpp_quote("#define IVMRWindowlessControl_GetBorderColor(This,lpClr) (This)->lpVtbl->GetBorderColor(This,lpClr)")
cpp_quote("#define IVMRWindowlessControl_SetColorKey(This,Clr) (This)->lpVtbl->SetColorKey(This,Clr)")
cpp_quote("#define IVMRWindowlessControl_GetColorKey(This,lpClr) (This)->lpVtbl->GetColorKey(This,lpClr)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IVMRWindowlessControl_GetNativeVideoSize_Proxy(IVMRWindowlessControl *This,LONG *lpWidth,LONG *lpHeight,LONG *lpARWidth,LONG *lpARHeight);")
cpp_quote("  void __RPC_STUB IVMRWindowlessControl_GetNativeVideoSize_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRWindowlessControl_GetMinIdealVideoSize_Proxy(IVMRWindowlessControl *This,LONG *lpWidth,LONG *lpHeight);")
cpp_quote("  void __RPC_STUB IVMRWindowlessControl_GetMinIdealVideoSize_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRWindowlessControl_GetMaxIdealVideoSize_Proxy(IVMRWindowlessControl *This,LONG *lpWidth,LONG *lpHeight);")
cpp_quote("  void __RPC_STUB IVMRWindowlessControl_GetMaxIdealVideoSize_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRWindowlessControl_SetVideoPosition_Proxy(IVMRWindowlessControl *This,const LPRECT lpSRCRect,const LPRECT lpDSTRect);")
cpp_quote("  void __RPC_STUB IVMRWindowlessControl_SetVideoPosition_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRWindowlessControl_GetVideoPosition_Proxy(IVMRWindowlessControl *This,LPRECT lpSRCRect,LPRECT lpDSTRect);")
cpp_quote("  void __RPC_STUB IVMRWindowlessControl_GetVideoPosition_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRWindowlessControl_GetAspectRatioMode_Proxy(IVMRWindowlessControl *This,DWORD *lpAspectRatioMode);")
cpp_quote("  void __RPC_STUB IVMRWindowlessControl_GetAspectRatioMode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRWindowlessControl_SetAspectRatioMode_Proxy(IVMRWindowlessControl *This,DWORD AspectRatioMode);")
cpp_quote("  void __RPC_STUB IVMRWindowlessControl_SetAspectRatioMode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRWindowlessControl_SetVideoClippingWindow_Proxy(IVMRWindowlessControl *This,HWND hwnd);")
cpp_quote("  void __RPC_STUB IVMRWindowlessControl_SetVideoClippingWindow_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRWindowlessControl_RepaintVideo_Proxy(IVMRWindowlessControl *This,HWND hwnd,HDC hdc);")
cpp_quote("  void __RPC_STUB IVMRWindowlessControl_RepaintVideo_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRWindowlessControl_DisplayModeChanged_Proxy(IVMRWindowlessControl *This);")
cpp_quote("  void __RPC_STUB IVMRWindowlessControl_DisplayModeChanged_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRWindowlessControl_GetCurrentImage_Proxy(IVMRWindowlessControl *This,BYTE **lpDib);")
cpp_quote("  void __RPC_STUB IVMRWindowlessControl_GetCurrentImage_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRWindowlessControl_SetBorderColor_Proxy(IVMRWindowlessControl *This,COLORREF Clr);")
cpp_quote("  void __RPC_STUB IVMRWindowlessControl_SetBorderColor_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRWindowlessControl_GetBorderColor_Proxy(IVMRWindowlessControl *This,COLORREF *lpClr);")
cpp_quote("  void __RPC_STUB IVMRWindowlessControl_GetBorderColor_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRWindowlessControl_SetColorKey_Proxy(IVMRWindowlessControl *This,COLORREF Clr);")
cpp_quote("  void __RPC_STUB IVMRWindowlessControl_SetColorKey_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRWindowlessControl_GetColorKey_Proxy(IVMRWindowlessControl *This,COLORREF *lpClr);")
cpp_quote("  void __RPC_STUB IVMRWindowlessControl_GetColorKey_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  typedef enum __MIDL___MIDL_itf_strmif_0401_0001 {")
cpp_quote("    MixerPref_NoDecimation = 0x1,MixerPref_DecimateOutput = 0x2,MixerPref_ARAdjustXorY = 0x4,MixerPref_DecimationReserved = 0x8,")
cpp_quote("    MixerPref_DecimateMask = 0xf,MixerPref_BiLinearFiltering = 0x10,MixerPref_PointFiltering = 0x20,MixerPref_FilteringMask = 0xf0,")
cpp_quote("    MixerPref_RenderTargetRGB = 0x100,MixerPref_RenderTargetYUV = 0x1000,MixerPref_RenderTargetYUV420 = 0x200,MixerPref_RenderTargetYUV422 = 0x400,")
cpp_quote("    MixerPref_RenderTargetYUV444 = 0x800,MixerPref_RenderTargetReserved = 0xe000,MixerPref_RenderTargetMask = 0xff00,")
cpp_quote("    MixerPref_DynamicSwitchToBOB = 0x10000,MixerPref_DynamicDecimateBy2 = 0x20000,MixerPref_DynamicReserved = 0xc0000,")
cpp_quote("    MixerPref_DynamicMask = 0xf0000")
cpp_quote("  } VMRMixerPrefs;")
cpp_quote("")
cpp_quote("  typedef struct _NORMALIZEDRECT {")
cpp_quote("    float left;")
cpp_quote("    float top;")
cpp_quote("    float right;")
cpp_quote("    float bottom;")
cpp_quote("  } NORMALIZEDRECT;")
cpp_quote("")
cpp_quote("  typedef struct _NORMALIZEDRECT *PNORMALIZEDRECT;")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0401_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0401_v0_0_s_ifspec;")
cpp_quote("#ifndef __IVMRMixerControl_INTERFACE_DEFINED__")
cpp_quote("#define __IVMRMixerControl_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IVMRMixerControl;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IVMRMixerControl : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI SetAlpha(DWORD dwStreamID,float Alpha) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetAlpha(DWORD dwStreamID,float *pAlpha) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetZOrder(DWORD dwStreamID,DWORD dwZ) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetZOrder(DWORD dwStreamID,DWORD *pZ) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetOutputRect(DWORD dwStreamID,const NORMALIZEDRECT *pRect) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetOutputRect(DWORD dwStreamID,NORMALIZEDRECT *pRect) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetBackgroundClr(COLORREF ClrBkg) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetBackgroundClr(COLORREF *lpClrBkg) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetMixingPrefs(DWORD dwMixerPrefs) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetMixingPrefs(DWORD *pdwMixerPrefs) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IVMRMixerControlVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IVMRMixerControl *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IVMRMixerControl *This);")
cpp_quote("      ULONG (WINAPI *Release)(IVMRMixerControl *This);")
cpp_quote("      HRESULT (WINAPI *SetAlpha)(IVMRMixerControl *This,DWORD dwStreamID,float Alpha);")
cpp_quote("      HRESULT (WINAPI *GetAlpha)(IVMRMixerControl *This,DWORD dwStreamID,float *pAlpha);")
cpp_quote("      HRESULT (WINAPI *SetZOrder)(IVMRMixerControl *This,DWORD dwStreamID,DWORD dwZ);")
cpp_quote("      HRESULT (WINAPI *GetZOrder)(IVMRMixerControl *This,DWORD dwStreamID,DWORD *pZ);")
cpp_quote("      HRESULT (WINAPI *SetOutputRect)(IVMRMixerControl *This,DWORD dwStreamID,const NORMALIZEDRECT *pRect);")
cpp_quote("      HRESULT (WINAPI *GetOutputRect)(IVMRMixerControl *This,DWORD dwStreamID,NORMALIZEDRECT *pRect);")
cpp_quote("      HRESULT (WINAPI *SetBackgroundClr)(IVMRMixerControl *This,COLORREF ClrBkg);")
cpp_quote("      HRESULT (WINAPI *GetBackgroundClr)(IVMRMixerControl *This,COLORREF *lpClrBkg);")
cpp_quote("      HRESULT (WINAPI *SetMixingPrefs)(IVMRMixerControl *This,DWORD dwMixerPrefs);")
cpp_quote("      HRESULT (WINAPI *GetMixingPrefs)(IVMRMixerControl *This,DWORD *pdwMixerPrefs);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IVMRMixerControlVtbl;")
cpp_quote("  struct IVMRMixerControl {")
cpp_quote("    CONST_VTBL struct IVMRMixerControlVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IVMRMixerControl_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IVMRMixerControl_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IVMRMixerControl_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IVMRMixerControl_SetAlpha(This,dwStreamID,Alpha) (This)->lpVtbl->SetAlpha(This,dwStreamID,Alpha)")
cpp_quote("#define IVMRMixerControl_GetAlpha(This,dwStreamID,pAlpha) (This)->lpVtbl->GetAlpha(This,dwStreamID,pAlpha)")
cpp_quote("#define IVMRMixerControl_SetZOrder(This,dwStreamID,dwZ) (This)->lpVtbl->SetZOrder(This,dwStreamID,dwZ)")
cpp_quote("#define IVMRMixerControl_GetZOrder(This,dwStreamID,pZ) (This)->lpVtbl->GetZOrder(This,dwStreamID,pZ)")
cpp_quote("#define IVMRMixerControl_SetOutputRect(This,dwStreamID,pRect) (This)->lpVtbl->SetOutputRect(This,dwStreamID,pRect)")
cpp_quote("#define IVMRMixerControl_GetOutputRect(This,dwStreamID,pRect) (This)->lpVtbl->GetOutputRect(This,dwStreamID,pRect)")
cpp_quote("#define IVMRMixerControl_SetBackgroundClr(This,ClrBkg) (This)->lpVtbl->SetBackgroundClr(This,ClrBkg)")
cpp_quote("#define IVMRMixerControl_GetBackgroundClr(This,lpClrBkg) (This)->lpVtbl->GetBackgroundClr(This,lpClrBkg)")
cpp_quote("#define IVMRMixerControl_SetMixingPrefs(This,dwMixerPrefs) (This)->lpVtbl->SetMixingPrefs(This,dwMixerPrefs)")
cpp_quote("#define IVMRMixerControl_GetMixingPrefs(This,pdwMixerPrefs) (This)->lpVtbl->GetMixingPrefs(This,pdwMixerPrefs)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IVMRMixerControl_SetAlpha_Proxy(IVMRMixerControl *This,DWORD dwStreamID,float Alpha);")
cpp_quote("  void __RPC_STUB IVMRMixerControl_SetAlpha_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRMixerControl_GetAlpha_Proxy(IVMRMixerControl *This,DWORD dwStreamID,float *pAlpha);")
cpp_quote("  void __RPC_STUB IVMRMixerControl_GetAlpha_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRMixerControl_SetZOrder_Proxy(IVMRMixerControl *This,DWORD dwStreamID,DWORD dwZ);")
cpp_quote("  void __RPC_STUB IVMRMixerControl_SetZOrder_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRMixerControl_GetZOrder_Proxy(IVMRMixerControl *This,DWORD dwStreamID,DWORD *pZ);")
cpp_quote("  void __RPC_STUB IVMRMixerControl_GetZOrder_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRMixerControl_SetOutputRect_Proxy(IVMRMixerControl *This,DWORD dwStreamID,const NORMALIZEDRECT *pRect);")
cpp_quote("  void __RPC_STUB IVMRMixerControl_SetOutputRect_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRMixerControl_GetOutputRect_Proxy(IVMRMixerControl *This,DWORD dwStreamID,NORMALIZEDRECT *pRect);")
cpp_quote("  void __RPC_STUB IVMRMixerControl_GetOutputRect_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRMixerControl_SetBackgroundClr_Proxy(IVMRMixerControl *This,COLORREF ClrBkg);")
cpp_quote("  void __RPC_STUB IVMRMixerControl_SetBackgroundClr_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRMixerControl_GetBackgroundClr_Proxy(IVMRMixerControl *This,COLORREF *lpClrBkg);")
cpp_quote("  void __RPC_STUB IVMRMixerControl_GetBackgroundClr_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRMixerControl_SetMixingPrefs_Proxy(IVMRMixerControl *This,DWORD dwMixerPrefs);")
cpp_quote("  void __RPC_STUB IVMRMixerControl_SetMixingPrefs_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRMixerControl_GetMixingPrefs_Proxy(IVMRMixerControl *This,DWORD *pdwMixerPrefs);")
cpp_quote("")
cpp_quote("  void __RPC_STUB IVMRMixerControl_GetMixingPrefs_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifdef __cplusplus")
cpp_quote("  typedef struct tagVMRGUID {")
cpp_quote("    ::GUID *pGUID;")
cpp_quote("    ::GUID GUID;")
cpp_quote("  } VMRGUID;")
cpp_quote("#else")
cpp_quote("  typedef struct tagVMRGUID {")
cpp_quote("    GUID *pGUID;")
cpp_quote("    GUID GUID;")
cpp_quote("  } VMRGUID;")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  typedef struct tagVMRMONITORINFO {")
cpp_quote("    VMRGUID guid;")
cpp_quote("    RECT rcMonitor;")
cpp_quote("    HMONITOR hMon;")
cpp_quote("    DWORD dwFlags;")
cpp_quote("    wchar_t szDevice[32];")
cpp_quote("    wchar_t szDescription[256];")
cpp_quote("    LARGE_INTEGER liDriverVersion;")
cpp_quote("    DWORD dwVendorId;")
cpp_quote("    DWORD dwDeviceId;")
cpp_quote("    DWORD dwSubSysId;")
cpp_quote("    DWORD dwRevision;")
cpp_quote("  } VMRMONITORINFO;")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0402_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0402_v0_0_s_ifspec;")
cpp_quote("#ifndef __IVMRMonitorConfig_INTERFACE_DEFINED__")
cpp_quote("#define __IVMRMonitorConfig_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IVMRMonitorConfig;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IVMRMonitorConfig : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI SetMonitor(const VMRGUID *pGUID) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetMonitor(VMRGUID *pGUID) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetDefaultMonitor(const VMRGUID *pGUID) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetDefaultMonitor(VMRGUID *pGUID) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetAvailableMonitors(VMRMONITORINFO *pInfo,DWORD dwMaxInfoArraySize,DWORD *pdwNumDevices) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IVMRMonitorConfigVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IVMRMonitorConfig *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IVMRMonitorConfig *This);")
cpp_quote("      ULONG (WINAPI *Release)(IVMRMonitorConfig *This);")
cpp_quote("      HRESULT (WINAPI *SetMonitor)(IVMRMonitorConfig *This,const VMRGUID *pGUID);")
cpp_quote("      HRESULT (WINAPI *GetMonitor)(IVMRMonitorConfig *This,VMRGUID *pGUID);")
cpp_quote("      HRESULT (WINAPI *SetDefaultMonitor)(IVMRMonitorConfig *This,const VMRGUID *pGUID);")
cpp_quote("      HRESULT (WINAPI *GetDefaultMonitor)(IVMRMonitorConfig *This,VMRGUID *pGUID);")
cpp_quote("      HRESULT (WINAPI *GetAvailableMonitors)(IVMRMonitorConfig *This,VMRMONITORINFO *pInfo,DWORD dwMaxInfoArraySize,DWORD *pdwNumDevices);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IVMRMonitorConfigVtbl;")
cpp_quote("  struct IVMRMonitorConfig {")
cpp_quote("    CONST_VTBL struct IVMRMonitorConfigVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IVMRMonitorConfig_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IVMRMonitorConfig_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IVMRMonitorConfig_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IVMRMonitorConfig_SetMonitor(This,pGUID) (This)->lpVtbl->SetMonitor(This,pGUID)")
cpp_quote("#define IVMRMonitorConfig_GetMonitor(This,pGUID) (This)->lpVtbl->GetMonitor(This,pGUID)")
cpp_quote("#define IVMRMonitorConfig_SetDefaultMonitor(This,pGUID) (This)->lpVtbl->SetDefaultMonitor(This,pGUID)")
cpp_quote("#define IVMRMonitorConfig_GetDefaultMonitor(This,pGUID) (This)->lpVtbl->GetDefaultMonitor(This,pGUID)")
cpp_quote("#define IVMRMonitorConfig_GetAvailableMonitors(This,pInfo,dwMaxInfoArraySize,pdwNumDevices) (This)->lpVtbl->GetAvailableMonitors(This,pInfo,dwMaxInfoArraySize,pdwNumDevices)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IVMRMonitorConfig_SetMonitor_Proxy(IVMRMonitorConfig *This,const VMRGUID *pGUID);")
cpp_quote("  void __RPC_STUB IVMRMonitorConfig_SetMonitor_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRMonitorConfig_GetMonitor_Proxy(IVMRMonitorConfig *This,VMRGUID *pGUID);")
cpp_quote("  void __RPC_STUB IVMRMonitorConfig_GetMonitor_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRMonitorConfig_SetDefaultMonitor_Proxy(IVMRMonitorConfig *This,const VMRGUID *pGUID);")
cpp_quote("  void __RPC_STUB IVMRMonitorConfig_SetDefaultMonitor_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRMonitorConfig_GetDefaultMonitor_Proxy(IVMRMonitorConfig *This,VMRGUID *pGUID);")
cpp_quote("  void __RPC_STUB IVMRMonitorConfig_GetDefaultMonitor_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRMonitorConfig_GetAvailableMonitors_Proxy(IVMRMonitorConfig *This,VMRMONITORINFO *pInfo,DWORD dwMaxInfoArraySize,DWORD *pdwNumDevices);")
cpp_quote("  void __RPC_STUB IVMRMonitorConfig_GetAvailableMonitors_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  typedef enum __MIDL___MIDL_itf_strmif_0403_0001 {")
cpp_quote("    RenderPrefs_RestrictToInitialMonitor = 0,RenderPrefs_ForceOffscreen = 0x1,RenderPrefs_ForceOverlays = 0x2,RenderPrefs_AllowOverlays = 0,")
cpp_quote("    RenderPrefs_AllowOffscreen = 0,RenderPrefs_DoNotRenderColorKeyAndBorder = 0x8,RenderPrefs_Reserved = 0x10,RenderPrefs_PreferAGPMemWhenMixing = 0x20,")
cpp_quote("    RenderPrefs_Mask = 0x3f")
cpp_quote("  } VMRRenderPrefs;")
cpp_quote("")
cpp_quote("  typedef enum __MIDL___MIDL_itf_strmif_0403_0002 {")
cpp_quote("    VMRMode_Windowed = 0x1,VMRMode_Windowless = 0x2,VMRMode_Renderless = 0x4,VMRMode_Mask = 0x7")
cpp_quote("  } VMRMode;")
cpp_quote("")
cpp_quote("  enum __MIDL___MIDL_itf_strmif_0403_0003 {")
cpp_quote("    MAX_NUMBER_OF_STREAMS = 16")
cpp_quote("  };")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0403_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0403_v0_0_s_ifspec;")
cpp_quote("#ifndef __IVMRFilterConfig_INTERFACE_DEFINED__")
cpp_quote("#define __IVMRFilterConfig_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IVMRFilterConfig;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IVMRFilterConfig : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI SetImageCompositor(IVMRImageCompositor *lpVMRImgCompositor) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetNumberOfStreams(DWORD dwMaxStreams) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetNumberOfStreams(DWORD *pdwMaxStreams) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetRenderingPrefs(DWORD dwRenderFlags) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetRenderingPrefs(DWORD *pdwRenderFlags) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetRenderingMode(DWORD Mode) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetRenderingMode(DWORD *pMode) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IVMRFilterConfigVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IVMRFilterConfig *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IVMRFilterConfig *This);")
cpp_quote("      ULONG (WINAPI *Release)(IVMRFilterConfig *This);")
cpp_quote("      HRESULT (WINAPI *SetImageCompositor)(IVMRFilterConfig *This,IVMRImageCompositor *lpVMRImgCompositor);")
cpp_quote("      HRESULT (WINAPI *SetNumberOfStreams)(IVMRFilterConfig *This,DWORD dwMaxStreams);")
cpp_quote("      HRESULT (WINAPI *GetNumberOfStreams)(IVMRFilterConfig *This,DWORD *pdwMaxStreams);")
cpp_quote("      HRESULT (WINAPI *SetRenderingPrefs)(IVMRFilterConfig *This,DWORD dwRenderFlags);")
cpp_quote("      HRESULT (WINAPI *GetRenderingPrefs)(IVMRFilterConfig *This,DWORD *pdwRenderFlags);")
cpp_quote("      HRESULT (WINAPI *SetRenderingMode)(IVMRFilterConfig *This,DWORD Mode);")
cpp_quote("      HRESULT (WINAPI *GetRenderingMode)(IVMRFilterConfig *This,DWORD *pMode);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IVMRFilterConfigVtbl;")
cpp_quote("  struct IVMRFilterConfig {")
cpp_quote("    CONST_VTBL struct IVMRFilterConfigVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IVMRFilterConfig_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IVMRFilterConfig_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IVMRFilterConfig_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IVMRFilterConfig_SetImageCompositor(This,lpVMRImgCompositor) (This)->lpVtbl->SetImageCompositor(This,lpVMRImgCompositor)")
cpp_quote("#define IVMRFilterConfig_SetNumberOfStreams(This,dwMaxStreams) (This)->lpVtbl->SetNumberOfStreams(This,dwMaxStreams)")
cpp_quote("#define IVMRFilterConfig_GetNumberOfStreams(This,pdwMaxStreams) (This)->lpVtbl->GetNumberOfStreams(This,pdwMaxStreams)")
cpp_quote("#define IVMRFilterConfig_SetRenderingPrefs(This,dwRenderFlags) (This)->lpVtbl->SetRenderingPrefs(This,dwRenderFlags)")
cpp_quote("#define IVMRFilterConfig_GetRenderingPrefs(This,pdwRenderFlags) (This)->lpVtbl->GetRenderingPrefs(This,pdwRenderFlags)")
cpp_quote("#define IVMRFilterConfig_SetRenderingMode(This,Mode) (This)->lpVtbl->SetRenderingMode(This,Mode)")
cpp_quote("#define IVMRFilterConfig_GetRenderingMode(This,pMode) (This)->lpVtbl->GetRenderingMode(This,pMode)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IVMRFilterConfig_SetImageCompositor_Proxy(IVMRFilterConfig *This,IVMRImageCompositor *lpVMRImgCompositor);")
cpp_quote("  void __RPC_STUB IVMRFilterConfig_SetImageCompositor_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRFilterConfig_SetNumberOfStreams_Proxy(IVMRFilterConfig *This,DWORD dwMaxStreams);")
cpp_quote("  void __RPC_STUB IVMRFilterConfig_SetNumberOfStreams_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRFilterConfig_GetNumberOfStreams_Proxy(IVMRFilterConfig *This,DWORD *pdwMaxStreams);")
cpp_quote("  void __RPC_STUB IVMRFilterConfig_GetNumberOfStreams_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRFilterConfig_SetRenderingPrefs_Proxy(IVMRFilterConfig *This,DWORD dwRenderFlags);")
cpp_quote("  void __RPC_STUB IVMRFilterConfig_SetRenderingPrefs_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRFilterConfig_GetRenderingPrefs_Proxy(IVMRFilterConfig *This,DWORD *pdwRenderFlags);")
cpp_quote("  void __RPC_STUB IVMRFilterConfig_GetRenderingPrefs_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRFilterConfig_SetRenderingMode_Proxy(IVMRFilterConfig *This,DWORD Mode);")
cpp_quote("  void __RPC_STUB IVMRFilterConfig_SetRenderingMode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRFilterConfig_GetRenderingMode_Proxy(IVMRFilterConfig *This,DWORD *pMode);")
cpp_quote("  void __RPC_STUB IVMRFilterConfig_GetRenderingMode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IVMRAspectRatioControl_INTERFACE_DEFINED__")
cpp_quote("#define __IVMRAspectRatioControl_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IVMRAspectRatioControl;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IVMRAspectRatioControl : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI GetAspectRatioMode(LPDWORD lpdwARMode) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetAspectRatioMode(DWORD dwARMode) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IVMRAspectRatioControlVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IVMRAspectRatioControl *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IVMRAspectRatioControl *This);")
cpp_quote("      ULONG (WINAPI *Release)(IVMRAspectRatioControl *This);")
cpp_quote("      HRESULT (WINAPI *GetAspectRatioMode)(IVMRAspectRatioControl *This,LPDWORD lpdwARMode);")
cpp_quote("      HRESULT (WINAPI *SetAspectRatioMode)(IVMRAspectRatioControl *This,DWORD dwARMode);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IVMRAspectRatioControlVtbl;")
cpp_quote("  struct IVMRAspectRatioControl {")
cpp_quote("    CONST_VTBL struct IVMRAspectRatioControlVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IVMRAspectRatioControl_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IVMRAspectRatioControl_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IVMRAspectRatioControl_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IVMRAspectRatioControl_GetAspectRatioMode(This,lpdwARMode) (This)->lpVtbl->GetAspectRatioMode(This,lpdwARMode)")
cpp_quote("#define IVMRAspectRatioControl_SetAspectRatioMode(This,dwARMode) (This)->lpVtbl->SetAspectRatioMode(This,dwARMode)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IVMRAspectRatioControl_GetAspectRatioMode_Proxy(IVMRAspectRatioControl *This,LPDWORD lpdwARMode);")
cpp_quote("  void __RPC_STUB IVMRAspectRatioControl_GetAspectRatioMode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRAspectRatioControl_SetAspectRatioMode_Proxy(IVMRAspectRatioControl *This,DWORD dwARMode);")
cpp_quote("  void __RPC_STUB IVMRAspectRatioControl_SetAspectRatioMode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  typedef enum __MIDL___MIDL_itf_strmif_0405_0001 {")
cpp_quote("    DeinterlacePref_NextBest = 0x1,DeinterlacePref_BOB = 0x2,DeinterlacePref_Weave = 0x4,DeinterlacePref_Mask = 0x7")
cpp_quote("  } VMRDeinterlacePrefs;")
cpp_quote("")
cpp_quote("  typedef enum __MIDL___MIDL_itf_strmif_0405_0002 {")
cpp_quote("    DeinterlaceTech_Unknown = 0,DeinterlaceTech_BOBLineReplicate = 0x1,DeinterlaceTech_BOBVerticalStretch = 0x2,DeinterlaceTech_MedianFiltering = 0x4,")
cpp_quote("    DeinterlaceTech_EdgeFiltering = 0x10,DeinterlaceTech_FieldAdaptive = 0x20,DeinterlaceTech_PixelAdaptive = 0x40,")
cpp_quote("    DeinterlaceTech_MotionVectorSteered = 0x80")
cpp_quote("  } VMRDeinterlaceTech;")
cpp_quote("")
cpp_quote("  typedef struct _VMRFrequency {")
cpp_quote("    DWORD dwNumerator;")
cpp_quote("    DWORD dwDenominator;")
cpp_quote("  } VMRFrequency;")
cpp_quote("")
cpp_quote("  typedef struct _VMRVideoDesc {")
cpp_quote("    DWORD dwSize;")
cpp_quote("    DWORD dwSampleWidth;")
cpp_quote("    DWORD dwSampleHeight;")
cpp_quote("    WINBOOL SingleFieldPerSample;")
cpp_quote("    DWORD dwFourCC;")
cpp_quote("    VMRFrequency InputSampleFreq;")
cpp_quote("    VMRFrequency OutputFrameFreq;")
cpp_quote("  } VMRVideoDesc;")
cpp_quote("")
cpp_quote("  typedef struct _VMRDeinterlaceCaps {")
cpp_quote("    DWORD dwSize;")
cpp_quote("    DWORD dwNumPreviousOutputFrames;")
cpp_quote("    DWORD dwNumForwardRefSamples;")
cpp_quote("    DWORD dwNumBackwardRefSamples;")
cpp_quote("    VMRDeinterlaceTech DeinterlaceTechnology;")
cpp_quote("  } VMRDeinterlaceCaps;")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0405_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0405_v0_0_s_ifspec;")
cpp_quote("#ifndef __IVMRDeinterlaceControl_INTERFACE_DEFINED__")
cpp_quote("#define __IVMRDeinterlaceControl_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IVMRDeinterlaceControl;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IVMRDeinterlaceControl : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI GetNumberOfDeinterlaceModes(VMRVideoDesc *lpVideoDescription,LPDWORD lpdwNumDeinterlaceModes,LPGUID lpDeinterlaceModes) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetDeinterlaceModeCaps(LPGUID lpDeinterlaceMode,VMRVideoDesc *lpVideoDescription,VMRDeinterlaceCaps *lpDeinterlaceCaps) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetDeinterlaceMode(DWORD dwStreamID,LPGUID lpDeinterlaceMode) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetDeinterlaceMode(DWORD dwStreamID,LPGUID lpDeinterlaceMode) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetDeinterlacePrefs(LPDWORD lpdwDeinterlacePrefs) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetDeinterlacePrefs(DWORD dwDeinterlacePrefs) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetActualDeinterlaceMode(DWORD dwStreamID,LPGUID lpDeinterlaceMode) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IVMRDeinterlaceControlVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IVMRDeinterlaceControl *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IVMRDeinterlaceControl *This);")
cpp_quote("      ULONG (WINAPI *Release)(IVMRDeinterlaceControl *This);")
cpp_quote("      HRESULT (WINAPI *GetNumberOfDeinterlaceModes)(IVMRDeinterlaceControl *This,VMRVideoDesc *lpVideoDescription,LPDWORD lpdwNumDeinterlaceModes,LPGUID lpDeinterlaceModes);")
cpp_quote("      HRESULT (WINAPI *GetDeinterlaceModeCaps)(IVMRDeinterlaceControl *This,LPGUID lpDeinterlaceMode,VMRVideoDesc *lpVideoDescription,VMRDeinterlaceCaps *lpDeinterlaceCaps);")
cpp_quote("      HRESULT (WINAPI *GetDeinterlaceMode)(IVMRDeinterlaceControl *This,DWORD dwStreamID,LPGUID lpDeinterlaceMode);")
cpp_quote("      HRESULT (WINAPI *SetDeinterlaceMode)(IVMRDeinterlaceControl *This,DWORD dwStreamID,LPGUID lpDeinterlaceMode);")
cpp_quote("      HRESULT (WINAPI *GetDeinterlacePrefs)(IVMRDeinterlaceControl *This,LPDWORD lpdwDeinterlacePrefs);")
cpp_quote("      HRESULT (WINAPI *SetDeinterlacePrefs)(IVMRDeinterlaceControl *This,DWORD dwDeinterlacePrefs);")
cpp_quote("      HRESULT (WINAPI *GetActualDeinterlaceMode)(IVMRDeinterlaceControl *This,DWORD dwStreamID,LPGUID lpDeinterlaceMode);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IVMRDeinterlaceControlVtbl;")
cpp_quote("  struct IVMRDeinterlaceControl {")
cpp_quote("    CONST_VTBL struct IVMRDeinterlaceControlVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IVMRDeinterlaceControl_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IVMRDeinterlaceControl_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IVMRDeinterlaceControl_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IVMRDeinterlaceControl_GetNumberOfDeinterlaceModes(This,lpVideoDescription,lpdwNumDeinterlaceModes,lpDeinterlaceModes) (This)->lpVtbl->GetNumberOfDeinterlaceModes(This,lpVideoDescription,lpdwNumDeinterlaceModes,lpDeinterlaceModes)")
cpp_quote("#define IVMRDeinterlaceControl_GetDeinterlaceModeCaps(This,lpDeinterlaceMode,lpVideoDescription,lpDeinterlaceCaps) (This)->lpVtbl->GetDeinterlaceModeCaps(This,lpDeinterlaceMode,lpVideoDescription,lpDeinterlaceCaps)")
cpp_quote("#define IVMRDeinterlaceControl_GetDeinterlaceMode(This,dwStreamID,lpDeinterlaceMode) (This)->lpVtbl->GetDeinterlaceMode(This,dwStreamID,lpDeinterlaceMode)")
cpp_quote("#define IVMRDeinterlaceControl_SetDeinterlaceMode(This,dwStreamID,lpDeinterlaceMode) (This)->lpVtbl->SetDeinterlaceMode(This,dwStreamID,lpDeinterlaceMode)")
cpp_quote("#define IVMRDeinterlaceControl_GetDeinterlacePrefs(This,lpdwDeinterlacePrefs) (This)->lpVtbl->GetDeinterlacePrefs(This,lpdwDeinterlacePrefs)")
cpp_quote("#define IVMRDeinterlaceControl_SetDeinterlacePrefs(This,dwDeinterlacePrefs) (This)->lpVtbl->SetDeinterlacePrefs(This,dwDeinterlacePrefs)")
cpp_quote("#define IVMRDeinterlaceControl_GetActualDeinterlaceMode(This,dwStreamID,lpDeinterlaceMode) (This)->lpVtbl->GetActualDeinterlaceMode(This,dwStreamID,lpDeinterlaceMode)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IVMRDeinterlaceControl_GetNumberOfDeinterlaceModes_Proxy(IVMRDeinterlaceControl *This,VMRVideoDesc *lpVideoDescription,LPDWORD lpdwNumDeinterlaceModes,LPGUID lpDeinterlaceModes);")
cpp_quote("  void __RPC_STUB IVMRDeinterlaceControl_GetNumberOfDeinterlaceModes_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRDeinterlaceControl_GetDeinterlaceModeCaps_Proxy(IVMRDeinterlaceControl *This,LPGUID lpDeinterlaceMode,VMRVideoDesc *lpVideoDescription,VMRDeinterlaceCaps *lpDeinterlaceCaps);")
cpp_quote("  void __RPC_STUB IVMRDeinterlaceControl_GetDeinterlaceModeCaps_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRDeinterlaceControl_GetDeinterlaceMode_Proxy(IVMRDeinterlaceControl *This,DWORD dwStreamID,LPGUID lpDeinterlaceMode);")
cpp_quote("  void __RPC_STUB IVMRDeinterlaceControl_GetDeinterlaceMode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRDeinterlaceControl_SetDeinterlaceMode_Proxy(IVMRDeinterlaceControl *This,DWORD dwStreamID,LPGUID lpDeinterlaceMode);")
cpp_quote("  void __RPC_STUB IVMRDeinterlaceControl_SetDeinterlaceMode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRDeinterlaceControl_GetDeinterlacePrefs_Proxy(IVMRDeinterlaceControl *This,LPDWORD lpdwDeinterlacePrefs);")
cpp_quote("  void __RPC_STUB IVMRDeinterlaceControl_GetDeinterlacePrefs_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRDeinterlaceControl_SetDeinterlacePrefs_Proxy(IVMRDeinterlaceControl *This,DWORD dwDeinterlacePrefs);")
cpp_quote("  void __RPC_STUB IVMRDeinterlaceControl_SetDeinterlacePrefs_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRDeinterlaceControl_GetActualDeinterlaceMode_Proxy(IVMRDeinterlaceControl *This,DWORD dwStreamID,LPGUID lpDeinterlaceMode);")
cpp_quote("  void __RPC_STUB IVMRDeinterlaceControl_GetActualDeinterlaceMode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  typedef struct _VMRALPHABITMAP {")
cpp_quote("    DWORD dwFlags;")
cpp_quote("    HDC hdc;")
cpp_quote("    LPDIRECTDRAWSURFACE7 pDDS;")
cpp_quote("    RECT rSrc;")
cpp_quote("    NORMALIZEDRECT rDest;")
cpp_quote("    FLOAT fAlpha;")
cpp_quote("    COLORREF clrSrcKey;")
cpp_quote("  } VMRALPHABITMAP;")
cpp_quote("")
cpp_quote("  typedef struct _VMRALPHABITMAP *PVMRALPHABITMAP;")
cpp_quote("")
cpp_quote("#define VMRBITMAP_DISABLE 0x00000001")
cpp_quote("#define VMRBITMAP_HDC 0x00000002")
cpp_quote("#define VMRBITMAP_ENTIREDDS 0x00000004")
cpp_quote("#define VMRBITMAP_SRCCOLORKEY 0x00000008")
cpp_quote("#define VMRBITMAP_SRCRECT 0x00000010")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0406_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0406_v0_0_s_ifspec;")
cpp_quote("#ifndef __IVMRMixerBitmap_INTERFACE_DEFINED__")
cpp_quote("#define __IVMRMixerBitmap_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IVMRMixerBitmap;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IVMRMixerBitmap : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI SetAlphaBitmap(const VMRALPHABITMAP *pBmpParms) = 0;")
cpp_quote("    virtual HRESULT WINAPI UpdateAlphaBitmapParameters(PVMRALPHABITMAP pBmpParms) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetAlphaBitmapParameters(PVMRALPHABITMAP pBmpParms) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IVMRMixerBitmapVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IVMRMixerBitmap *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IVMRMixerBitmap *This);")
cpp_quote("      ULONG (WINAPI *Release)(IVMRMixerBitmap *This);")
cpp_quote("      HRESULT (WINAPI *SetAlphaBitmap)(IVMRMixerBitmap *This,const VMRALPHABITMAP *pBmpParms);")
cpp_quote("      HRESULT (WINAPI *UpdateAlphaBitmapParameters)(IVMRMixerBitmap *This,PVMRALPHABITMAP pBmpParms);")
cpp_quote("      HRESULT (WINAPI *GetAlphaBitmapParameters)(IVMRMixerBitmap *This,PVMRALPHABITMAP pBmpParms);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IVMRMixerBitmapVtbl;")
cpp_quote("  struct IVMRMixerBitmap {")
cpp_quote("    CONST_VTBL struct IVMRMixerBitmapVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IVMRMixerBitmap_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IVMRMixerBitmap_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IVMRMixerBitmap_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IVMRMixerBitmap_SetAlphaBitmap(This,pBmpParms) (This)->lpVtbl->SetAlphaBitmap(This,pBmpParms)")
cpp_quote("#define IVMRMixerBitmap_UpdateAlphaBitmapParameters(This,pBmpParms) (This)->lpVtbl->UpdateAlphaBitmapParameters(This,pBmpParms)")
cpp_quote("#define IVMRMixerBitmap_GetAlphaBitmapParameters(This,pBmpParms) (This)->lpVtbl->GetAlphaBitmapParameters(This,pBmpParms)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IVMRMixerBitmap_SetAlphaBitmap_Proxy(IVMRMixerBitmap *This,const VMRALPHABITMAP *pBmpParms);")
cpp_quote("  void __RPC_STUB IVMRMixerBitmap_SetAlphaBitmap_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRMixerBitmap_UpdateAlphaBitmapParameters_Proxy(IVMRMixerBitmap *This,PVMRALPHABITMAP pBmpParms);")
cpp_quote("  void __RPC_STUB IVMRMixerBitmap_UpdateAlphaBitmapParameters_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRMixerBitmap_GetAlphaBitmapParameters_Proxy(IVMRMixerBitmap *This,PVMRALPHABITMAP pBmpParms);")
cpp_quote("  void __RPC_STUB IVMRMixerBitmap_GetAlphaBitmapParameters_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("  typedef struct _VMRVIDEOSTREAMINFO {")
cpp_quote("    LPDIRECTDRAWSURFACE7 pddsVideoSurface;")
cpp_quote("    DWORD dwWidth;")
cpp_quote("    DWORD dwHeight;")
cpp_quote("    DWORD dwStrmID;")
cpp_quote("    FLOAT fAlpha;")
cpp_quote("    DDCOLORKEY ddClrKey;")
cpp_quote("    NORMALIZEDRECT rNormal;")
cpp_quote("  } VMRVIDEOSTREAMINFO;")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0407_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0407_v0_0_s_ifspec;")
cpp_quote("#ifndef __IVMRImageCompositor_INTERFACE_DEFINED__")
cpp_quote("#define __IVMRImageCompositor_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IVMRImageCompositor;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IVMRImageCompositor : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI InitCompositionTarget(IUnknown *pD3DDevice,LPDIRECTDRAWSURFACE7 pddsRenderTarget) = 0;")
cpp_quote("    virtual HRESULT WINAPI TermCompositionTarget(IUnknown *pD3DDevice,LPDIRECTDRAWSURFACE7 pddsRenderTarget) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetStreamMediaType(DWORD dwStrmID,AM_MEDIA_TYPE *pmt,WINBOOL fTexture) = 0;")
cpp_quote("    virtual HRESULT WINAPI CompositeImage(IUnknown *pD3DDevice,LPDIRECTDRAWSURFACE7 pddsRenderTarget,AM_MEDIA_TYPE *pmtRenderTarget,REFERENCE_TIME rtStart,REFERENCE_TIME rtEnd,DWORD dwClrBkGnd,VMRVIDEOSTREAMINFO *pVideoStreamInfo,UINT cStreams) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IVMRImageCompositorVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IVMRImageCompositor *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IVMRImageCompositor *This);")
cpp_quote("      ULONG (WINAPI *Release)(IVMRImageCompositor *This);")
cpp_quote("      HRESULT (WINAPI *InitCompositionTarget)(IVMRImageCompositor *This,IUnknown *pD3DDevice,LPDIRECTDRAWSURFACE7 pddsRenderTarget);")
cpp_quote("      HRESULT (WINAPI *TermCompositionTarget)(IVMRImageCompositor *This,IUnknown *pD3DDevice,LPDIRECTDRAWSURFACE7 pddsRenderTarget);")
cpp_quote("      HRESULT (WINAPI *SetStreamMediaType)(IVMRImageCompositor *This,DWORD dwStrmID,AM_MEDIA_TYPE *pmt,WINBOOL fTexture);")
cpp_quote("      HRESULT (WINAPI *CompositeImage)(IVMRImageCompositor *This,IUnknown *pD3DDevice,LPDIRECTDRAWSURFACE7 pddsRenderTarget,AM_MEDIA_TYPE *pmtRenderTarget,REFERENCE_TIME rtStart,REFERENCE_TIME rtEnd,DWORD dwClrBkGnd,VMRVIDEOSTREAMINFO *pVideoStreamInfo,UINT cStreams);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IVMRImageCompositorVtbl;")
cpp_quote("  struct IVMRImageCompositor {")
cpp_quote("    CONST_VTBL struct IVMRImageCompositorVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IVMRImageCompositor_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IVMRImageCompositor_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IVMRImageCompositor_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IVMRImageCompositor_InitCompositionTarget(This,pD3DDevice,pddsRenderTarget) (This)->lpVtbl->InitCompositionTarget(This,pD3DDevice,pddsRenderTarget)")
cpp_quote("#define IVMRImageCompositor_TermCompositionTarget(This,pD3DDevice,pddsRenderTarget) (This)->lpVtbl->TermCompositionTarget(This,pD3DDevice,pddsRenderTarget)")
cpp_quote("#define IVMRImageCompositor_SetStreamMediaType(This,dwStrmID,pmt,fTexture) (This)->lpVtbl->SetStreamMediaType(This,dwStrmID,pmt,fTexture)")
cpp_quote("#define IVMRImageCompositor_CompositeImage(This,pD3DDevice,pddsRenderTarget,pmtRenderTarget,rtStart,rtEnd,dwClrBkGnd,pVideoStreamInfo,cStreams) (This)->lpVtbl->CompositeImage(This,pD3DDevice,pddsRenderTarget,pmtRenderTarget,rtStart,rtEnd,dwClrBkGnd,pVideoStreamInfo,cStreams)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IVMRImageCompositor_InitCompositionTarget_Proxy(IVMRImageCompositor *This,IUnknown *pD3DDevice,LPDIRECTDRAWSURFACE7 pddsRenderTarget);")
cpp_quote("  void __RPC_STUB IVMRImageCompositor_InitCompositionTarget_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRImageCompositor_TermCompositionTarget_Proxy(IVMRImageCompositor *This,IUnknown *pD3DDevice,LPDIRECTDRAWSURFACE7 pddsRenderTarget);")
cpp_quote("  void __RPC_STUB IVMRImageCompositor_TermCompositionTarget_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRImageCompositor_SetStreamMediaType_Proxy(IVMRImageCompositor *This,DWORD dwStrmID,AM_MEDIA_TYPE *pmt,WINBOOL fTexture);")
cpp_quote("  void __RPC_STUB IVMRImageCompositor_SetStreamMediaType_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRImageCompositor_CompositeImage_Proxy(IVMRImageCompositor *This,IUnknown *pD3DDevice,LPDIRECTDRAWSURFACE7 pddsRenderTarget,AM_MEDIA_TYPE *pmtRenderTarget,REFERENCE_TIME rtStart,REFERENCE_TIME rtEnd,DWORD dwClrBkGnd,VMRVIDEOSTREAMINFO *pVideoStreamInfo,UINT cStreams);")
cpp_quote("  void __RPC_STUB IVMRImageCompositor_CompositeImage_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IVMRVideoStreamControl_INTERFACE_DEFINED__")
cpp_quote("#define __IVMRVideoStreamControl_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IVMRVideoStreamControl;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IVMRVideoStreamControl : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI SetColorKey(LPDDCOLORKEY lpClrKey) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetColorKey(LPDDCOLORKEY lpClrKey) = 0;")
cpp_quote("    virtual HRESULT WINAPI SetStreamActiveState(WINBOOL fActive) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetStreamActiveState(WINBOOL *lpfActive) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IVMRVideoStreamControlVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IVMRVideoStreamControl *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IVMRVideoStreamControl *This);")
cpp_quote("      ULONG (WINAPI *Release)(IVMRVideoStreamControl *This);")
cpp_quote("      HRESULT (WINAPI *SetColorKey)(IVMRVideoStreamControl *This,LPDDCOLORKEY lpClrKey);")
cpp_quote("      HRESULT (WINAPI *GetColorKey)(IVMRVideoStreamControl *This,LPDDCOLORKEY lpClrKey);")
cpp_quote("      HRESULT (WINAPI *SetStreamActiveState)(IVMRVideoStreamControl *This,WINBOOL fActive);")
cpp_quote("      HRESULT (WINAPI *GetStreamActiveState)(IVMRVideoStreamControl *This,WINBOOL *lpfActive);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IVMRVideoStreamControlVtbl;")
cpp_quote("  struct IVMRVideoStreamControl {")
cpp_quote("    CONST_VTBL struct IVMRVideoStreamControlVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IVMRVideoStreamControl_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IVMRVideoStreamControl_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IVMRVideoStreamControl_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IVMRVideoStreamControl_SetColorKey(This,lpClrKey) (This)->lpVtbl->SetColorKey(This,lpClrKey)")
cpp_quote("#define IVMRVideoStreamControl_GetColorKey(This,lpClrKey) (This)->lpVtbl->GetColorKey(This,lpClrKey)")
cpp_quote("#define IVMRVideoStreamControl_SetStreamActiveState(This,fActive) (This)->lpVtbl->SetStreamActiveState(This,fActive)")
cpp_quote("#define IVMRVideoStreamControl_GetStreamActiveState(This,lpfActive) (This)->lpVtbl->GetStreamActiveState(This,lpfActive)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IVMRVideoStreamControl_SetColorKey_Proxy(IVMRVideoStreamControl *This,LPDDCOLORKEY lpClrKey);")
cpp_quote("  void __RPC_STUB IVMRVideoStreamControl_SetColorKey_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRVideoStreamControl_GetColorKey_Proxy(IVMRVideoStreamControl *This,LPDDCOLORKEY lpClrKey);")
cpp_quote("  void __RPC_STUB IVMRVideoStreamControl_GetColorKey_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRVideoStreamControl_SetStreamActiveState_Proxy(IVMRVideoStreamControl *This,WINBOOL fActive);")
cpp_quote("  void __RPC_STUB IVMRVideoStreamControl_SetStreamActiveState_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRVideoStreamControl_GetStreamActiveState_Proxy(IVMRVideoStreamControl *This,WINBOOL *lpfActive);")
cpp_quote("  void __RPC_STUB IVMRVideoStreamControl_GetStreamActiveState_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IVMRSurface_INTERFACE_DEFINED__")
cpp_quote("#define __IVMRSurface_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IVMRSurface;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IVMRSurface : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI IsSurfaceLocked(void) = 0;")
cpp_quote("    virtual HRESULT WINAPI LockSurface(BYTE **lpSurface) = 0;")
cpp_quote("    virtual HRESULT WINAPI UnlockSurface(void) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetSurface(LPDIRECTDRAWSURFACE7 *lplpSurface) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IVMRSurfaceVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IVMRSurface *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IVMRSurface *This);")
cpp_quote("      ULONG (WINAPI *Release)(IVMRSurface *This);")
cpp_quote("      HRESULT (WINAPI *IsSurfaceLocked)(IVMRSurface *This);")
cpp_quote("      HRESULT (WINAPI *LockSurface)(IVMRSurface *This,BYTE **lpSurface);")
cpp_quote("      HRESULT (WINAPI *UnlockSurface)(IVMRSurface *This);")
cpp_quote("      HRESULT (WINAPI *GetSurface)(IVMRSurface *This,LPDIRECTDRAWSURFACE7 *lplpSurface);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IVMRSurfaceVtbl;")
cpp_quote("  struct IVMRSurface {")
cpp_quote("    CONST_VTBL struct IVMRSurfaceVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IVMRSurface_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IVMRSurface_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IVMRSurface_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IVMRSurface_IsSurfaceLocked(This) (This)->lpVtbl->IsSurfaceLocked(This)")
cpp_quote("#define IVMRSurface_LockSurface(This,lpSurface) (This)->lpVtbl->LockSurface(This,lpSurface)")
cpp_quote("#define IVMRSurface_UnlockSurface(This) (This)->lpVtbl->UnlockSurface(This)")
cpp_quote("#define IVMRSurface_GetSurface(This,lplpSurface) (This)->lpVtbl->GetSurface(This,lplpSurface)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IVMRSurface_IsSurfaceLocked_Proxy(IVMRSurface *This);")
cpp_quote("  void __RPC_STUB IVMRSurface_IsSurfaceLocked_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRSurface_LockSurface_Proxy(IVMRSurface *This,BYTE **lpSurface);")
cpp_quote("  void __RPC_STUB IVMRSurface_LockSurface_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRSurface_UnlockSurface_Proxy(IVMRSurface *This);")
cpp_quote("  void __RPC_STUB IVMRSurface_UnlockSurface_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRSurface_GetSurface_Proxy(IVMRSurface *This,LPDIRECTDRAWSURFACE7 *lplpSurface);")
cpp_quote("  void __RPC_STUB IVMRSurface_GetSurface_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IVMRImagePresenterConfig_INTERFACE_DEFINED__")
cpp_quote("#define __IVMRImagePresenterConfig_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IVMRImagePresenterConfig;")
cpp_quote("")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IVMRImagePresenterConfig : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI SetRenderingPrefs(DWORD dwRenderFlags) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetRenderingPrefs(DWORD *dwRenderFlags) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IVMRImagePresenterConfigVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IVMRImagePresenterConfig *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IVMRImagePresenterConfig *This);")
cpp_quote("      ULONG (WINAPI *Release)(IVMRImagePresenterConfig *This);")
cpp_quote("      HRESULT (WINAPI *SetRenderingPrefs)(IVMRImagePresenterConfig *This,DWORD dwRenderFlags);")
cpp_quote("      HRESULT (WINAPI *GetRenderingPrefs)(IVMRImagePresenterConfig *This,DWORD *dwRenderFlags);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IVMRImagePresenterConfigVtbl;")
cpp_quote("  struct IVMRImagePresenterConfig {")
cpp_quote("    CONST_VTBL struct IVMRImagePresenterConfigVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IVMRImagePresenterConfig_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IVMRImagePresenterConfig_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IVMRImagePresenterConfig_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IVMRImagePresenterConfig_SetRenderingPrefs(This,dwRenderFlags) (This)->lpVtbl->SetRenderingPrefs(This,dwRenderFlags)")
cpp_quote("#define IVMRImagePresenterConfig_GetRenderingPrefs(This,dwRenderFlags) (This)->lpVtbl->GetRenderingPrefs(This,dwRenderFlags)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IVMRImagePresenterConfig_SetRenderingPrefs_Proxy(IVMRImagePresenterConfig *This,DWORD dwRenderFlags);")
cpp_quote("  void __RPC_STUB IVMRImagePresenterConfig_SetRenderingPrefs_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRImagePresenterConfig_GetRenderingPrefs_Proxy(IVMRImagePresenterConfig *This,DWORD *dwRenderFlags);")
cpp_quote("  void __RPC_STUB IVMRImagePresenterConfig_GetRenderingPrefs_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IVMRImagePresenterExclModeConfig_INTERFACE_DEFINED__")
cpp_quote("#define __IVMRImagePresenterExclModeConfig_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IVMRImagePresenterExclModeConfig;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IVMRImagePresenterExclModeConfig : public IVMRImagePresenterConfig {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI SetXlcModeDDObjAndPrimarySurface(LPDIRECTDRAW7 lpDDObj,LPDIRECTDRAWSURFACE7 lpPrimarySurf) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetXlcModeDDObjAndPrimarySurface(LPDIRECTDRAW7 *lpDDObj,LPDIRECTDRAWSURFACE7 *lpPrimarySurf) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IVMRImagePresenterExclModeConfigVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IVMRImagePresenterExclModeConfig *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IVMRImagePresenterExclModeConfig *This);")
cpp_quote("      ULONG (WINAPI *Release)(IVMRImagePresenterExclModeConfig *This);")
cpp_quote("      HRESULT (WINAPI *SetRenderingPrefs)(IVMRImagePresenterExclModeConfig *This,DWORD dwRenderFlags);")
cpp_quote("      HRESULT (WINAPI *GetRenderingPrefs)(IVMRImagePresenterExclModeConfig *This,DWORD *dwRenderFlags);")
cpp_quote("      HRESULT (WINAPI *SetXlcModeDDObjAndPrimarySurface)(IVMRImagePresenterExclModeConfig *This,LPDIRECTDRAW7 lpDDObj,LPDIRECTDRAWSURFACE7 lpPrimarySurf);")
cpp_quote("      HRESULT (WINAPI *GetXlcModeDDObjAndPrimarySurface)(IVMRImagePresenterExclModeConfig *This,LPDIRECTDRAW7 *lpDDObj,LPDIRECTDRAWSURFACE7 *lpPrimarySurf);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IVMRImagePresenterExclModeConfigVtbl;")
cpp_quote("  struct IVMRImagePresenterExclModeConfig {")
cpp_quote("    CONST_VTBL struct IVMRImagePresenterExclModeConfigVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IVMRImagePresenterExclModeConfig_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IVMRImagePresenterExclModeConfig_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IVMRImagePresenterExclModeConfig_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IVMRImagePresenterExclModeConfig_SetRenderingPrefs(This,dwRenderFlags) (This)->lpVtbl->SetRenderingPrefs(This,dwRenderFlags)")
cpp_quote("#define IVMRImagePresenterExclModeConfig_GetRenderingPrefs(This,dwRenderFlags) (This)->lpVtbl->GetRenderingPrefs(This,dwRenderFlags)")
cpp_quote("#define IVMRImagePresenterExclModeConfig_SetXlcModeDDObjAndPrimarySurface(This,lpDDObj,lpPrimarySurf) (This)->lpVtbl->SetXlcModeDDObjAndPrimarySurface(This,lpDDObj,lpPrimarySurf)")
cpp_quote("#define IVMRImagePresenterExclModeConfig_GetXlcModeDDObjAndPrimarySurface(This,lpDDObj,lpPrimarySurf) (This)->lpVtbl->GetXlcModeDDObjAndPrimarySurface(This,lpDDObj,lpPrimarySurf)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IVMRImagePresenterExclModeConfig_SetXlcModeDDObjAndPrimarySurface_Proxy(IVMRImagePresenterExclModeConfig *This,LPDIRECTDRAW7 lpDDObj,LPDIRECTDRAWSURFACE7 lpPrimarySurf);")
cpp_quote("  void __RPC_STUB IVMRImagePresenterExclModeConfig_SetXlcModeDDObjAndPrimarySurface_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVMRImagePresenterExclModeConfig_GetXlcModeDDObjAndPrimarySurface_Proxy(IVMRImagePresenterExclModeConfig *This,LPDIRECTDRAW7 *lpDDObj,LPDIRECTDRAWSURFACE7 *lpPrimarySurf);")
cpp_quote("  void __RPC_STUB IVMRImagePresenterExclModeConfig_GetXlcModeDDObjAndPrimarySurface_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#ifndef __IVPManager_INTERFACE_DEFINED__")
cpp_quote("#define __IVPManager_INTERFACE_DEFINED__")
cpp_quote("  EXTERN_C const IID IID_IVPManager;")
cpp_quote("#if defined(__cplusplus) && !defined(CINTERFACE)")
cpp_quote("  struct IVPManager : public IUnknown {")
cpp_quote("  public:")
cpp_quote("    virtual HRESULT WINAPI SetVideoPortIndex(DWORD dwVideoPortIndex) = 0;")
cpp_quote("    virtual HRESULT WINAPI GetVideoPortIndex(DWORD *pdwVideoPortIndex) = 0;")
cpp_quote("  };")
cpp_quote("#else")
cpp_quote("  typedef struct IVPManagerVtbl {")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("      HRESULT (WINAPI *QueryInterface)(IVPManager *This,REFIID riid,void **ppvObject);")
cpp_quote("      ULONG (WINAPI *AddRef)(IVPManager *This);")
cpp_quote("      ULONG (WINAPI *Release)(IVPManager *This);")
cpp_quote("      HRESULT (WINAPI *SetVideoPortIndex)(IVPManager *This,DWORD dwVideoPortIndex);")
cpp_quote("      HRESULT (WINAPI *GetVideoPortIndex)(IVPManager *This,DWORD *pdwVideoPortIndex);")
cpp_quote("    END_INTERFACE")
cpp_quote("  } IVPManagerVtbl;")
cpp_quote("  struct IVPManager {")
cpp_quote("    CONST_VTBL struct IVPManagerVtbl *lpVtbl;")
cpp_quote("  };")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IVPManager_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IVPManager_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IVPManager_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IVPManager_SetVideoPortIndex(This,dwVideoPortIndex) (This)->lpVtbl->SetVideoPortIndex(This,dwVideoPortIndex)")
cpp_quote("#define IVPManager_GetVideoPortIndex(This,pdwVideoPortIndex) (This)->lpVtbl->GetVideoPortIndex(This,pdwVideoPortIndex)")
cpp_quote("#endif")
cpp_quote("#endif")
cpp_quote("  HRESULT WINAPI IVPManager_SetVideoPortIndex_Proxy(IVPManager *This,DWORD dwVideoPortIndex);")
cpp_quote("  void __RPC_STUB IVPManager_SetVideoPortIndex_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("  HRESULT WINAPI IVPManager_GetVideoPortIndex_Proxy(IVPManager *This,DWORD *pdwVideoPortIndex);")
cpp_quote("  void __RPC_STUB IVPManager_GetVideoPortIndex_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#if (_WIN32_WINNT >= 0x0601)")
cpp_quote("#undef  INTERFACE")
cpp_quote("#define INTERFACE IAMAsyncReaderTimestampScaling")
cpp_quote("#ifdef __GNUC__")
cpp_quote("#warning COM interfaces layout in this header has not been verified.")
cpp_quote("#warning COM interfaces with incorrect layout may not work at all.")
cpp_quote("__MINGW_BROKEN_INTERFACE(INTERFACE)")
cpp_quote("#endif")
cpp_quote("DECLARE_INTERFACE_(IAMAsyncReaderTimestampScaling,IUnknown)")
cpp_quote("{")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("")
cpp_quote("    /* IUnknown methods */")
cpp_quote("    STDMETHOD(QueryInterface)(THIS_ REFIID riid, void **ppvObject) PURE;")
cpp_quote("    STDMETHOD_(ULONG, AddRef)(THIS) PURE;")
cpp_quote("    STDMETHOD_(ULONG, Release)(THIS) PURE;")
cpp_quote("")
cpp_quote("    /* IAMAsyncReaderTimestampScaling methods */")
cpp_quote("    STDMETHOD_(HRESULT,GetTimestampMode)(THIS_ WINBOOL *pfRaw) PURE;")
cpp_quote("    STDMETHOD_(HRESULT,SetTimestampMode)(THIS_ WINBOOL fRaw) PURE;")
cpp_quote("")
cpp_quote("    END_INTERFACE")
cpp_quote("};")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IAMAsyncReaderTimestampScaling_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IAMAsyncReaderTimestampScaling_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IAMAsyncReaderTimestampScaling_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IAMAsyncReaderTimestampScaling_GetTimestampMode(This,pfRaw) (This)->lpVtbl->GetTimestampMode(This,pfRaw)")
cpp_quote("#define IAMAsyncReaderTimestampScaling_SetTimestampMode(This,fRaw) (This)->lpVtbl->SetTimestampMode(This,fRaw)")
cpp_quote("#endif /*COBJMACROS*/")
cpp_quote("")
cpp_quote("#undef  INTERFACE")
cpp_quote("#define INTERFACE IAMPluginControl")
cpp_quote("#ifdef __GNUC__")
cpp_quote("#warning COM interfaces layout in this header has not been verified.")
cpp_quote("#warning COM interfaces with incorrect layout may not work at all.")
cpp_quote("__MINGW_BROKEN_INTERFACE(INTERFACE)")
cpp_quote("#endif")
cpp_quote("DECLARE_INTERFACE_(IAMPluginControl,IUnknown)")
cpp_quote("{")
cpp_quote("    BEGIN_INTERFACE")
cpp_quote("")
cpp_quote("    /* IUnknown methods */")
cpp_quote("    STDMETHOD(QueryInterface)(THIS_ REFIID riid, void **ppvObject) PURE;")
cpp_quote("    STDMETHOD_(ULONG, AddRef)(THIS) PURE;")
cpp_quote("    STDMETHOD_(ULONG, Release)(THIS) PURE;")
cpp_quote("")
cpp_quote("    /* IAMPluginControl methods */")
cpp_quote("    STDMETHOD_(HRESULT,GetDisabledByIndex)(THIS_ DWORD index,CLSID *clsid) PURE;")
cpp_quote("    STDMETHOD_(HRESULT,GetPreferredClsid)(THIS_ REFGUID subType,CLSID *clsid) PURE;")
cpp_quote("    STDMETHOD_(HRESULT,GetPreferredClsidByIndex)(THIS_ DWORD index,GUID *subType,CLSID *clsid) PURE;")
cpp_quote("    STDMETHOD_(HRESULT,IsDisabled)(THIS_ REFCLSID clsid) PURE;")
cpp_quote("    STDMETHOD_(HRESULT,IsLegacyDisabled)(THIS_ LPCWSTR dllName) PURE;")
cpp_quote("    STDMETHOD_(HRESULT,SetDisabled)(THIS_ REFCLSID clsid,BOOL disabled) PURE;")
cpp_quote("    STDMETHOD_(HRESULT,SetPreferredClsid)(THIS_ REFGUID subType,const CLSID *clsid) PURE;")
cpp_quote("")
cpp_quote("    END_INTERFACE")
cpp_quote("};")
cpp_quote("#ifdef COBJMACROS")
cpp_quote("#define IAMPluginControl_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)")
cpp_quote("#define IAMPluginControl_AddRef(This) (This)->lpVtbl->AddRef(This)")
cpp_quote("#define IAMPluginControl_Release(This) (This)->lpVtbl->Release(This)")
cpp_quote("#define IAMPluginControl_GetDisabledByIndex(This,index,clsid) (This)->lpVtbl->GetDisabledByIndex(This,index,clsid)")
cpp_quote("#define IAMPluginControl_GetPreferredClsid(This,subType,clsid) (This)->lpVtbl->GetPreferredClsid(This,subType,clsid)")
cpp_quote("#define IAMPluginControl_GetPreferredClsidByIndex(This,index,subType,clsid) (This)->lpVtbl->GetPreferredClsidByIndex(This,index,subType,clsid)")
cpp_quote("#define IAMPluginControl_IsDisabled(This,clsid) (This)->lpVtbl->IsDisabled(This,clsid)")
cpp_quote("#define IAMPluginControl_IsLegacyDisabled(This,dllName) (This)->lpVtbl->IsLegacyDisabled(This,dllName)")
cpp_quote("#define IAMPluginControl_SetDisabled(This,clsid,disabled) (This)->lpVtbl->SetDisabled(This,clsid,disabled)")
cpp_quote("#define IAMPluginControl_SetPreferredClsid(This,subType,clsid) (This)->lpVtbl->SetPreferredClsid(This,subType,clsid)")
cpp_quote("#endif /*COBJMACROS*/")
cpp_quote("")
cpp_quote("#endif /*(_WIN32_WINNT >= 0x0601)*/")
cpp_quote("")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0413_v0_0_c_ifspec;")
cpp_quote("  extern RPC_IF_HANDLE __MIDL_itf_strmif_0413_v0_0_s_ifspec;")
cpp_quote("")
cpp_quote("  unsigned long __RPC_API VARIANT_UserSize(unsigned long *,unsigned long,VARIANT *);")
cpp_quote("  unsigned char *__RPC_API VARIANT_UserMarshal(unsigned long *,unsigned char *,VARIANT *);")
cpp_quote("  unsigned char *__RPC_API VARIANT_UserUnmarshal(unsigned long *,unsigned char *,VARIANT *);")
cpp_quote("  void __RPC_API VARIANT_UserFree(unsigned long *,VARIANT *);")
cpp_quote("")
cpp_quote("  HRESULT WINAPI ICaptureGraphBuilder_FindInterface_Proxy(ICaptureGraphBuilder *This,const GUID *pCategory,IBaseFilter *pf,REFIID riid,void **ppint);")
cpp_quote("  HRESULT WINAPI ICaptureGraphBuilder_FindInterface_Stub(ICaptureGraphBuilder *This,const GUID *pCategory,IBaseFilter *pf,REFIID riid,IUnknown **ppint);")
cpp_quote("  HRESULT WINAPI ICaptureGraphBuilder2_FindInterface_Proxy(ICaptureGraphBuilder2 *This,const GUID *pCategory,const GUID *pType,IBaseFilter *pf,REFIID riid,void **ppint);")
cpp_quote("  HRESULT WINAPI ICaptureGraphBuilder2_FindInterface_Stub(ICaptureGraphBuilder2 *This,const GUID *pCategory,const GUID *pType,IBaseFilter *pf,REFIID riid,IUnknown **ppint);")
cpp_quote("  HRESULT WINAPI IKsPropertySet_Set_Proxy(IKsPropertySet *This,REFGUID guidPropSet,DWORD dwPropID,LPVOID pInstanceData,DWORD cbInstanceData,LPVOID pPropData,DWORD cbPropData);")
cpp_quote("  HRESULT WINAPI IKsPropertySet_Set_Stub(IKsPropertySet *This,REFGUID guidPropSet,DWORD dwPropID,byte *pInstanceData,DWORD cbInstanceData,byte *pPropData,DWORD cbPropData);")
cpp_quote("  HRESULT WINAPI IKsPropertySet_Get_Proxy(IKsPropertySet *This,REFGUID guidPropSet,DWORD dwPropID,LPVOID pInstanceData,DWORD cbInstanceData,LPVOID pPropData,DWORD cbPropData,DWORD *pcbReturned);")
cpp_quote("  HRESULT WINAPI IKsPropertySet_Get_Stub(IKsPropertySet *This,REFGUID guidPropSet,DWORD dwPropID,byte *pInstanceData,DWORD cbInstanceData,byte *pPropData,DWORD cbPropData,DWORD *pcbReturned);")
